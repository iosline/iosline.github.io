<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[初尝Mac工具推荐及开发环境配置]]></title>
      <url>http://yoursite.com/2016/07/07/%E5%88%9D%E5%B0%9DMac%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90%E5%8F%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>销匿了一段时间之后，又基本回到正常的开发工作，随着这次的开始，首先在配置上正所谓步枪换AK了，从之前的Windows升级到了现在到处充满高大上的牛逼MacBook Pro(尤其是价格),其次是从所谓的二三线城市郑州转移到了充满xx与xx的帝都(其实是然并卵)，最后才是最重要的，那就是作者的水平实在是太菜了，有很大的进步空间啊啊啊啊。</p>
<p>废话不多说，书归正传。</p>
<p>经同学的指点，才慢慢熟悉OS系统，都是大神啊，上来就给你玩终端命令，看来是用windows图形化界面比较懒了，以后要多用命令。</p>
<h3 id="推荐环节"><a href="#推荐环节" class="headerlink" title="推荐环节"></a>推荐环节</h3><h4 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2:"></a><a href="http://www.iterm2.com/" target="_blank" rel="external">iTerm2:</a></h4><p>一款终端工具,点此可以跳转到官网下载。</p>
<h4 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew:"></a><a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew:</a></h4><p>在终端的基础上，推荐一款可以通过终端来下载app的工具,点此连接，即可快速掌握其作用。</p>
<p>通过brew下载的默认安装路径：/usr/local/</p>
<h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a><a href="http://ohmyz.sh/" target="_blank" rel="external">oh-my-zsh</a></h4><p>我们大多数人使用苹果自带的Bash,一般人也就当做terminal来使用了，并没有什么太大的差别。</p>
<p>zsh具有强大的自动补全功能，当然还有很多其他的功能。</p>
<p>zsh虽然很强大，但是特别不容易上手，但是世界之大，能人很多，国外有个人在Github上有个开源项目就是 让你快速上手Zsh的，它叫<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">on my zsh</a>.</p>
<h5 id="zsh的安装-ohmyz"><a href="#zsh的安装-ohmyz" class="headerlink" title="zsh的安装: ohmyz"></a>zsh的安装: <a href="http://ohmyz.sh/" target="_blank" rel="external">ohmyz</a></h5><pre><code>点此链接进入，在终端打入命令即可
</code></pre><h5 id="zsh的使用"><a href="#zsh的使用" class="headerlink" title="zsh的使用"></a>zsh的使用</h5><h5 id="zsh与bash的切换"><a href="#zsh与bash的切换" class="headerlink" title="zsh与bash的切换"></a>zsh与bash的切换</h5><p>bash—-&gt;zsh :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /bin/zsh</div></pre></td></tr></table></figure>
<p>zsh—–&gt;bash</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /bin/bash</div></pre></td></tr></table></figure>
<h4 id="vi"><a href="#vi" class="headerlink" title="vi:"></a><a href="http://www.eepw.com.cn/article/48018.htm" target="_blank" rel="external">vi:</a></h4><p>一款在终端进行编辑的编辑器工具,里面详细的介绍了vi的使用方法，可以点此连接查看。</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="Mac下adb不起作用"><a href="#Mac下adb不起作用" class="headerlink" title="Mac下adb不起作用"></a>Mac下adb不起作用</h4><p>原因：是由于zsh的缘故</p>
<p>解决方案：</p>
<p>在.bash_profile中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PATH=$&#123;PATH&#125;:/Users/jiayongkai/Library/Android/sdk/platform-tools</div><div class="line">export PATH=$&#123;PATH&#125;:/Users/jiayongkai/Library/Android/sdk/tools</div></pre></td></tr></table></figure>
<p>然后找到User目录下面的.zshrc文件，我的在jiayongkai/.zshrc.在文件最后添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">\# Enable my profile</div><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure>
<p>检查是否成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ source .bash_profile</div><div class="line">$ echo $adb </div><div class="line">$ adb -version</div></pre></td></tr></table></figure>
<h4 id="Mac下JAVA-HOME的配置"><a href="#Mac下JAVA-HOME的配置" class="headerlink" title="Mac下JAVA_HOME的配置"></a>Mac下JAVA_HOME的配置</h4><p>配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">\# 使用vim打开.bash_profile文件，加入java环境变量</div><div class="line">$ vim .bash_profile</div><div class="line">export JAVA_HOME=$(/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home)</div><div class="line">export PATH=$&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin</div></pre></td></tr></table></figure>
<p>检查是否成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ source .bash_profile</div><div class="line">$ echo $JAVA_HOME </div><div class="line">$ java -version</div></pre></td></tr></table></figure>
<h4 id="Mac下ANDROID-HOME的配置"><a href="#Mac下ANDROID-HOME的配置" class="headerlink" title="Mac下ANDROID_HOME的配置"></a>Mac下ANDROID_HOME的配置</h4><p>配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim .bash_profile </div><div class="line">export ANDROID_HOME=~/Library/Android/sdk</div><div class="line">export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</div></pre></td></tr></table></figure>
<p>检查是否成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ source .bash_profile</div><div class="line">$ echo $ANDROID_HOME </div><div class="line">$ adb</div></pre></td></tr></table></figure>
<h4 id="Mac下Gradle的配置"><a href="#Mac下Gradle的配置" class="headerlink" title="Mac下Gradle的配置"></a>Mac下Gradle的配置</h4><p>Android Studio 自带的gradle路径为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Applications/Android\ Studio.app/Contents/gradle/gradle-2.10/bin</div></pre></td></tr></table></figure>
<p>步骤：</p>
<p>1.打开终端</p>
<p>2.输入：vim ~/.bash_profile</p>
<p>3.进入编辑模式</p>
<p>4.在文本末尾添加如下信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export GRADLE_HOME=/Applications/Android\ Studio.app/Contents/gradle/gradle-2.10</div><div class="line">export PATH=$&#123;PATH&#125;:$&#123;GRADLE_HOME&#125;/bin</div></pre></td></tr></table></figure>
<p>5.退出编辑模式，输入:wq退出</p>
<p>6.输入：gradle -v显示如下信息，表明环境变量配置成功</p>
<hr>
<p>Gradle 2.10</p>
<hr>
<p>检查是否成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ source .bash_profile</div><div class="line">$ echo $gradle </div><div class="line">$ gradle -version</div></pre></td></tr></table></figure>
<h4 id="Mac下MAVEN-HOME的配置"><a href="#Mac下MAVEN-HOME的配置" class="headerlink" title="Mac下MAVEN_HOME的配置"></a>Mac下MAVEN_HOME的配置</h4><p>Android Studio自带gradle与maven，所以不用下载，这里演示一下通过brew下载maven,再配置。</p>
<p>1.使用brew下载并配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install maven</div></pre></td></tr></table></figure>
<p>2.去官网下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">下载地址：</div><div class="line">Maven：http://maven.apache.org/</div><div class="line"></div><div class="line">将下载的maven解压并复制/移动到你需要的目录 </div><div class="line">比如：/usr/local/maven</div></pre></td></tr></table></figure>
<p>配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim .bash_profile</div><div class="line">export MAVEN_HOME=/usr/local/maven/apache-maven-x.x.x</div><div class="line">export PATH=$MAVEN_HOME/bin:$PATH</div></pre></td></tr></table></figure>
<p>检查是否成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ source .bash_profile</div><div class="line">$ echo $MAVEN_HOME</div><div class="line">$ mvn -version</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[通知学习之自定义通知]]></title>
      <url>http://yoursite.com/2016/02/24/%E9%80%9A%E7%9F%A5%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%9F%A5/</url>
      <content type="html"><![CDATA[<p>实现自定义的通知栏效果：</p>
<p>主要要用到RemoteViews这个类</p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>Notification的自定义布局是RemoteViews，和其他RemoteViews一样，在自定义视图布局文件中，仅支持FrameLayout、LinearLayout、RelativeLayout三种布局控件和AnalogClock、Chronometer、Button、ImageButton、ImageView、ProgressBar、TextView、ViewFlipper、ListView、GridView、StackView和AdapterViewFlipper这些显示控件，不支持这些类的子类或Android提供的其他控件。否则会引起ClassNotFoundException异常</p>
<h4 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h4><p><li>1）创建自定义视图</li></p>
<p><li>2）获取远程视图对象（注：Notification的contentView不能为空）</li></p>
<p><li>3）设置PendingIntent（来响应各种事件）</li></p>
<p><li>4）发起Notification</li></p>
<h4 id="代码模块："><a href="#代码模块：" class="headerlink" title="代码模块："></a>代码模块：</h4><p>样式：</p>
<h5 id="1-自定义带按钮通知栏-如下样式"><a href="#1-自定义带按钮通知栏-如下样式" class="headerlink" title="1.自定义带按钮通知栏(如下样式)"></a>1.自定义带按钮通知栏(如下样式)</h5><p>正在进行的<br>“正在进行的”通知使用户了解正在运行的后台进程。例如，音乐播放器可以显示正在播放的音乐。也可以用来显示需要长时间处理的操作，例如下载或编码视频。“正在进行的”通知不能被手动删除。<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/notifications_pattern_ongoing_music.png"></p>
<p>实现方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showButtonNotify</span><span class="params">()</span></span>&#123;</div><div class="line">     NotificationCompat.Builder mBuilder = <span class="keyword">new</span> Builder(<span class="keyword">this</span>);</div><div class="line">     RemoteViews mRemoteViews = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.view_custom_button);</div><div class="line">     mRemoteViews.setImageViewResource(R.id.custom_song_icon, R.drawable.sing_icon);</div><div class="line">     <span class="comment">//API3.0 以上的时候显示按钮，否则消失</span></div><div class="line">     mRemoteViews.setTextViewText(R.id.tv_custom_song_singer, <span class="string">"周杰伦"</span>);</div><div class="line">     mRemoteViews.setTextViewText(R.id.tv_custom_song_name, <span class="string">"七里香"</span>);</div><div class="line">     <span class="comment">//如果版本号低于（3。0），那么不显示按钮</span></div><div class="line">     <span class="keyword">if</span>(BaseTools.getSystemVersion() &lt;= <span class="number">9</span>)&#123;</div><div class="line">           mRemoteViews.setViewVisibility(R.id.ll_custom_button, View.GONE);</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">           mRemoteViews.setViewVisibility(R.id.ll_custom_button, View.VISIBLE);</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//</span></div><div class="line">     <span class="keyword">if</span>(isPlay)&#123;</div><div class="line">           mRemoteViews.setImageViewResource(R.id.btn_custom_play, R.drawable.btn_pause);</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">           mRemoteViews.setImageViewResource(R.id.btn_custom_play, R.drawable.btn_play);</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//点击的事件处理</span></div><div class="line">     Intent buttonIntent = <span class="keyword">new</span> Intent(ACTION_BUTTON);</div><div class="line">     <span class="comment">/* 上一首按钮 */</span></div><div class="line">     buttonIntent.putExtra(INTENT_BUTTONID_TAG, BUTTON_PREV_ID);</div><div class="line">     <span class="comment">//这里加了广播，所及INTENT的必须用getBroadcast方法</span></div><div class="line">     PendingIntent intent_prev = PendingIntent.getBroadcast(<span class="keyword">this</span>, <span class="number">1</span>, buttonIntent, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line">     mRemoteViews.setOnClickPendingIntent(R.id.btn_custom_prev, intent_prev);</div><div class="line">     <span class="comment">/* 播放/暂停  按钮 */</span></div><div class="line">     buttonIntent.putExtra(INTENT_BUTTONID_TAG, BUTTON_PALY_ID);</div><div class="line">     PendingIntent intent_paly = PendingIntent.getBroadcast(<span class="keyword">this</span>, <span class="number">2</span>, buttonIntent, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line">     mRemoteViews.setOnClickPendingIntent(R.id.btn_custom_play, intent_paly);</div><div class="line">     <span class="comment">/* 下一首 按钮  */</span></div><div class="line">     buttonIntent.putExtra(INTENT_BUTTONID_TAG, BUTTON_NEXT_ID);</div><div class="line">     PendingIntent intent_next = PendingIntent.getBroadcast(<span class="keyword">this</span>, <span class="number">3</span>, buttonIntent, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line">     mRemoteViews.setOnClickPendingIntent(R.id.btn_custom_next, intent_next);</div><div class="line"> </div><div class="line">     mBuilder.setContent(mRemoteViews)</div><div class="line">             .setContentIntent(getDefalutIntent(Notification.FLAG_ONGOING_EVENT))</div><div class="line">             .setWhen(System.currentTimeMillis())<span class="comment">// 通知产生的时间，会在通知信息里显示</span></div><div class="line">             .setTicker(<span class="string">"正在播放"</span>)</div><div class="line">             .setPriority(Notification.PRIORITY_DEFAULT)<span class="comment">// 设置该通知优先级</span></div><div class="line">             .setOngoing(<span class="keyword">true</span>)</div><div class="line">             .setSmallIcon(R.drawable.sing_icon);</div><div class="line">     Notification notify = mBuilder.build();</div><div class="line">     notify.flags = Notification.FLAG_ONGOING_EVENT;</div><div class="line">     mNotificationManager.notify(notifyId, notify);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：带按钮的布局相应点击事件在3.0以下版本没有用，所以这边作了系统版本判断，来显示消失按钮。</p>
<h5 id="2-自定义不带按钮通知栏"><a href="#2-自定义不带按钮通知栏" class="headerlink" title="2.自定义不带按钮通知栏"></a>2.自定义不带按钮通知栏</h5><p>实现方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">//先设定RemoteViews</span></div><div class="line">	RemoteViews view_custom = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.view_custom);</div><div class="line">	<span class="comment">//设置对应IMAGEVIEW的ID的资源图片</span></div><div class="line">	view_custom.setImageViewResource(R.id.custom_icon, R.drawable.icon);</div><div class="line">	<span class="comment">//view_custom.setInt(R.id.custom_icon,"setBackgroundResource",R.drawable.icon);</span></div><div class="line">	view_custom.setTextViewText(R.id.tv_custom_title, <span class="string">"今日头条"</span>);</div><div class="line">	view_custom.setTextViewText(R.id.tv_custom_content, <span class="string">"金州勇士官方宣布球队已经解雇了主帅马克-杰克逊"</span>);</div><div class="line">```	</div><div class="line"></div><div class="line">之后调用：</div><div class="line"></div><div class="line">```java</div><div class="line">	mBuilder.setContent(view_custom)</div></pre></td></tr></table></figure>
<p>来设定自定义的这个布局。</p>
<h5 id="最近遇到的代码例子："><a href="#最近遇到的代码例子：" class="headerlink" title="最近遇到的代码例子："></a>最近遇到的代码例子：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//final String STATUS_BAR_COVER_CLICK_ACTION="download";</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showNotification</span><span class="params">()</span> </span>&#123;</div><div class="line">       </div><div class="line">        <span class="keyword">final</span> NotificationManager mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div><div class="line">        NotificationCompat.Builder mBuilder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">final</span> RemoteViews mRemoteViews = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.layout_notification_custom);</div><div class="line">       </div><div class="line"></div><div class="line"><span class="comment">//        Intent buttonIntent=new Intent(this, SendNewsActivity.class);</span></div><div class="line"><span class="comment">//        buttonIntent.putExtra("key", 1456546);</span></div><div class="line"><span class="comment">//        buttonIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span></div><div class="line"></div><div class="line">        mBuilder.setContent(mRemoteViews)</div><div class="line">                .setWhen(System.currentTimeMillis())<span class="comment">// 通知产生的时间，会在通知信息里显示</span></div><div class="line">                .setPriority(Notification.PRIORITY_DEFAULT)<span class="comment">// 设置该通知优先级</span></div><div class="line">                .setSmallIcon(R.drawable.myicon).setAutoCancel(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="comment">//        BroadcastReceiver onClickReceiver = new BroadcastReceiver() &#123;</span></div><div class="line"><span class="comment">//            private boolean flag = false;</span></div><div class="line"><span class="comment">//            @Override</span></div><div class="line"><span class="comment">//            public void onReceive(Context context, Intent intent) &#123;</span></div><div class="line"><span class="comment">//                if (intent.getAction().equals(STATUS_BAR_COVER_CLICK_ACTION)) &#123;</span></div><div class="line"><span class="comment">//                 //在这里处理点击事件</span></div><div class="line"><span class="comment">//                   ToastUtil.show("========wobeidianjile");</span></div><div class="line"><span class="comment">//                 //取消通知栏</span></div><div class="line"><span class="comment">////                    mNotificationManager.cancel(0);</span></div><div class="line"><span class="comment">//                &#125;</span></div><div class="line"><span class="comment">//            &#125;&#125;;</span></div><div class="line"></div><div class="line"><span class="comment">//        IntentFilter filter = new IntentFilter();</span></div><div class="line"><span class="comment">//        filter.addAction(STATUS_BAR_COVER_CLICK_ACTION);</span></div><div class="line"><span class="comment">//        registerReceiver(onClickReceiver, filter);</span></div><div class="line"><span class="comment">//        Intent buttonIntent = new Intent(STATUS_BAR_COVER_CLICK_ACTION);</span></div><div class="line"></div><div class="line">        Intent buttonIntent=<span class="keyword">new</span> Intent();</div><div class="line">        buttonIntent.setAction(Intent.ACTION_VIEW);</div><div class="line">        buttonIntent.setData(Uri.parse(<span class="string">"http://img.zcool.cn/community/01b28d554bcd6e000001bf72eacf96.jpg"</span>));</div><div class="line">        PendingIntent pendingIntent=PendingIntent.getActivity(<span class="keyword">this</span>,<span class="number">0</span>,buttonIntent,PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line"><span class="comment">//        PendingIntent pendingIntent=PendingIntent.getBroadcast(this, 0, buttonIntent, 0);</span></div><div class="line">        mBuilder.setContentIntent(pendingIntent);</div><div class="line"><span class="comment">//        mRemoteViews.setOnClickPendingIntent(R.id.image,pendingIntent);</span></div><div class="line">        Notification notify = mBuilder.build();</div><div class="line">Picasso.with(<span class="keyword">this</span>).load(bean.getImg()).into(mRemoteViews,R.id.image,<span class="number">0</span>,notify);</div><div class="line">        mNotificationManager.notify(<span class="number">0</span>, notify);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="Android-5-0之后通知栏图标为白色的解决方案："><a href="#Android-5-0之后通知栏图标为白色的解决方案：" class="headerlink" title="Android 5.0之后通知栏图标为白色的解决方案："></a>Android 5.0之后通知栏图标为白色的解决方案：</h4><h5 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h5><p>Android 5.0(API23)针对targetSdkVersion&gt;=21（Build.VERSION_CODES.LOLLIPOP是21，非23 )， 通知栏图标均自动做了过滤处理，为了统一整个系统的风格。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (entry.icon != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (entry.targetSdk &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">                entry.icon.setColorFilter(mContext.getResources().getColor(android.R.color.white));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                entry.icon.setColorFilter(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>目前可行的就是把AndroidManifest.xml uses-sdk节点的targetSdkVersion属性设置为21以下（不含21）。</p>
<h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5><p>在5.0之前的版本用一个图片，在之后的版本用另一张只有白色和透明的颜色，然后再设置一个背景颜色</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &lt; <span class="number">21</span>) 						</div><div class="line">     nf.icon = R.drawable.ic_launcher; 					</div><div class="line"><span class="keyword">else</span> &#123; 						</div><div class="line">     nf.icon = R.drawable.ic_launcher_notification; 						</div><div class="line">     Class&lt;?&gt; clazz = nf.getClass(); 						</div><div class="line">     Field field = clazz.getDeclaredField(<span class="string">"color"</span>); 						</div><div class="line">     field.setAccessible(<span class="keyword">true</span>); 						</div><div class="line">     field.set(nf, context.getResources().getColor(R.color.red_launcher)); 		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="知识点示例代码"><a href="#知识点示例代码" class="headerlink" title="知识点示例代码"></a><a href="https://github.com/iosline/Notification" target="_blank" rel="external">知识点示例代码</a></h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android通知详解学习]]></title>
      <url>http://yoursite.com/2016/02/24/Android%E9%80%9A%E7%9F%A5%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>Notification状态通知栏：</p>
<h3 id="功能作用"><a href="#功能作用" class="headerlink" title="功能作用"></a>功能作用</h3><ol>
<li>显示接收到短消息、即使消息等信息 （如QQ、微信、新浪、短信）</li>
<li>显示客户端的推送消息（如有新版本发布，广告，推荐新闻等）</li>
<li>显示正在进行的事物（例如：后台运行的程序）（如音乐播放器、版本更新时候的下载进度等）</li>
</ol>
<h3 id="思维导图结构"><a href="#思维导图结构" class="headerlink" title="思维导图结构"></a>思维导图结构</h3><p>Notificaiton — service   – BroadcastReceiver  – Intent（flag、Action等属性应用） —  PendingIntent</p>
<h3 id="联系："><a href="#联系：" class="headerlink" title="联系："></a>联系：</h3><ol>
<li><p>由于service 是在后台运行，所以它意图做什么我们看不到，可以通过Notificaiton 来显示提醒（如音乐的后台播放）。</p>
</li>
<li><p>service服务和BroadcastReceiver广播相结合，在加上Notificaiton 显示（如程序的后台更新）。</p>
</li>
<li><p>Intent作为意图处理，和Notificaiton的点击时间紧密结合在了一起，并且与BroadcastReceiver和service的联系也紧密不可以分割。</p>
</li>
</ol>
<p>（service 在后台之后通过BroadcastReceiver来通知Notificaiton 显示相关东西，在通过Intent完成用户的意图操作）</p>
<h3 id="大体了解"><a href="#大体了解" class="headerlink" title="大体了解"></a>大体了解</h3><p>Notification支持文字内容显示、震动、三色灯、铃声等多种提示形式，在默认情况下，Notification仅显示消息标题、消息内容、送达时间这3项内容。以下就是通知的基本布局。</p>
<h4 id="通知的基本布局："><a href="#通知的基本布局：" class="headerlink" title="通知的基本布局："></a>通知的基本布局：</h4><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/notifications_pattern_anatomy.png"></p>
<h4 id="元素："><a href="#元素：" class="headerlink" title="元素："></a>元素：</h4><ol>
<li><p>标题   Title/Name</p>
</li>
<li><p>大图标  Icon/Photo</p>
</li>
<li><p>内容文字</p>
</li>
<li><p>内容信息   MESSAGE</p>
</li>
<li><p>小图标 Secondary Icon</p>
</li>
<li><p>通知的时间 Timestamp,默认为系统发出通知的时间，也可通过setWhen()来设置</p>
</li>
</ol>
<h3 id="相关分析："><a href="#相关分析：" class="headerlink" title="相关分析："></a>相关分析：</h3><p>状态通知栏主要涉及到2个类：  Notification 和 NotificationManager</p>
<p>Notification为通知信息类，它里面对应了通知栏的各个属性</p>
<p>NotificationManager ：  是状态栏通知的管理类，负责发通知、清除通知等操作。</p>
<p>注意：NotificationManager 是一个系统Service，所以必须通过 getSystemService(NOTIFICATION_SERVICE)方法来获取，方法如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NotificationManager mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div></pre></td></tr></table></figure>
<h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><h4 id="流程模块："><a href="#流程模块：" class="headerlink" title="流程模块："></a>流程模块：</h4><p><li>第一步：创建一个通知栏的Builder构造类  （Create a Notification Builder）</li></p>
<p><li>第二步：定义通知栏的Action  （Define the Notification’s Action）</li></p>
<p><li>第三步：设置通知栏点击事件    （Set the Notification’s Click Behavior）</li></p>
<p><li>第四步：通知   （Issue the Notification）</li></p>
<h4 id="代码模块："><a href="#代码模块：" class="headerlink" title="代码模块："></a>代码模块：</h4><p>实现系统默认的通知栏效果：</p>
<p><li>第一步：获取状态通知栏管理：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NotificationManager mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div></pre></td></tr></table></figure>
<p><li>第二步：实例化通知栏构造器NotificationCompat.Builder：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NotificationCompat.Builder mBuilder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p><li>第三步：对Builder进行配置：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">	mBuilder.setContentTitle(<span class="string">"测试标题"</span>)<span class="comment">//设置通知栏标题</span></div><div class="line">        .setContentText(<span class="string">"测试内容"</span>) <span class="comment">//设置通知栏显示内容</span></div><div class="line">        .setContentIntent(getDefalutIntent(Notification.FLAG_AUTO_CANCEL)) <span class="comment">//设置通知栏点击意图</span></div><div class="line">        <span class="comment">//  .setNumber(number) //设置通知集合的数量</span></div><div class="line">        .setTicker(<span class="string">"测试通知来啦"</span>) <span class="comment">//通知首次出现在通知栏，带上升动画效果的</span></div><div class="line">        .setWhen(System.currentTimeMillis())<span class="comment">//通知产生的时间，会在通知信息里显示，一般是系统获取到的时间</span></div><div class="line">        .setPriority(Notification.PRIORITY_DEFAULT) <span class="comment">//设置该通知优先级</span></div><div class="line">        <span class="comment">//  .setAutoCancel(true)//设置这个标志当用户单击面板就可以让通知将自动取消</span></div><div class="line">        .setOngoing(<span class="keyword">false</span>)<span class="comment">//true，设置他为一个正在进行的通知。他们通常是用来表示一个后台任务,用户积极参与(如播放音乐)或以某种方式正在等待,因此占用设备(如一个文件下载,同步操作,主动网络连接)</span></div><div class="line">        .setDefaults(Notification.DEFAULT_VIBRATE)<span class="comment">//向通知添加声音、闪灯和振动效果的最简单、最一致的方式是使用当前的用户默认设置，使用defaults属性，可以组合</span></div><div class="line">        <span class="comment">//Notification.DEFAULT_ALL  Notification.DEFAULT_SOUND 添加声音 // requires VIBRATE permission</span></div><div class="line">        .setSmallIcon(R.drawable.ic_launcher);<span class="comment">//设置通知小ICON</span></div><div class="line">```        </div><div class="line">        </div><div class="line">&lt;li&gt;第四步：设置通知栏PendingIntent（点击动作事件等都包含在这里）</div><div class="line"></div><div class="line">```java</div><div class="line">	mBuilder.setContentIntent(PendingIntent intent)</div></pre></td></tr></table></figure>
<p>PendingIntent和Intent略有不同，它可以设置执行次数，主要用于远程服务通信、闹铃、通知、启动器、短信中，在一般情况下用的比较少。</p>
<p>相关属性和方法</p>
<p>属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PendingIntent的位标识符：</div><div class="line">FLAG_ONE_SHOT   表示返回的PendingIntent仅能执行一次，执行完后自动取消</div><div class="line">FLAG_NO_CREATE     表示如果描述的PendingIntent不存在，并不创建相应的PendingIntent，而是返回NULL</div><div class="line">FLAG_CANCEL_CURRENT      表示相应的PendingIntent已经存在，则取消前者，然后创建新的PendingIntent，这个有利于数据保持为最新的，可以用于即时通信的通信场景</div><div class="line">FLAG_UPDATE_CURRENT     表示更新的PendingIntent</div></pre></td></tr></table></figure>
<p>方法：<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/20140511193432625.jpg"><br>可以看出，它支持多种相应方式，有Activity、Broadcast、Service，就根据你自身需求去选择。</p>
<p>在各种情况下情况下它还会根据各种情况出发效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	contentIntent：在通知窗口区域，Notification被单击时的响应事件由该intent触发；</div><div class="line">	deleteIntent：当用户点击全部清除按钮时，响应该清除事件的Intent；</div><div class="line">	fullScreenIntent：响应紧急状态的全屏事件（例如来电事件），也就是说通知来的时候，跳过在通知区域点击通知这一步，直接执行fullScreenIntent代表的事件。</div><div class="line">例如：在执行了点击通知之后要跳转到指定的XXX的Activity的时候，可以设置以下方法来相应点击事件：</div><div class="line"></div><div class="line">	Intent intent = <span class="keyword">new</span> Intent(context,XXX.class);</div><div class="line">	PendingIntent pendingIntent = PendingIntent.getActivity(context, <span class="number">0</span>, intent, <span class="number">0</span>);</div><div class="line">	mBuilder.setContentIntent(pendingIntent)</div></pre></td></tr></table></figure>
<p>例如：在执行了清空全部的通知操作时候，可以设置以下方法来相应这个事件：</p>
<p>采用setDeleteIntent(PendingIntent intent)方法或按照以下写法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent deleteIntent = <span class="keyword">new</span> Intent();</div><div class="line">deleteIntent.setClass(context, XXXReceiver.class);</div><div class="line">deleteIntent.setAction(DELETE_ACTION);</div><div class="line">notification.deleteIntent = PendingIntent.getBroadcast(context, <span class="number">0</span>, deleteIntent, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>例如：在响应紧急事件（如来电）时候，可以设置以下方法来相应这个事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setFullScreenIntent(PendingIntent intent, <span class="keyword">boolean</span> highPriority)</div></pre></td></tr></table></figure>
<p><li>第五步，最简单的一部，发送通知请求</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mNotificationManager.notify(notifyId, mBuilder.build());</div></pre></td></tr></table></figure>
<h4 id="对应的各个方法的属性（部分方法以上代码中已经作注释，就不再介绍）："><a href="#对应的各个方法的属性（部分方法以上代码中已经作注释，就不再介绍）：" class="headerlink" title="对应的各个方法的属性（部分方法以上代码中已经作注释，就不再介绍）："></a>对应的各个方法的属性（部分方法以上代码中已经作注释，就不再介绍）：</h4><p>#####（1）方法：设置提醒标志符Flags<br>功能：提醒标志符，向通知添加声音、闪灯和振动效果等设置达到通知提醒效果，可以组合多个属性</p>
<p>有2种设置方法：</p>
<p>1.实例化通知栏之后通过给他添加.flags属性赋值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Notification notification = mBuilder.build();</div><div class="line">notification.flags = Notification.FLAG_AUTO_CANCEL;</div></pre></td></tr></table></figure>
<p>2.通过setContentIntent(PendingIntent intent)方法中的意图设置对应的flags</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> PendingIntent <span class="title">getDefalutIntent</span><span class="params">(<span class="keyword">int</span> flags)</span></span>&#123;</div><div class="line">      PendingIntent pendingIntent= PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">1</span>, <span class="keyword">new</span> Intent(), flags);</div><div class="line">      <span class="keyword">return</span> pendingIntent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提醒标志符成员：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Notification.FLAG_SHOW_LIGHTS              <span class="comment">//三色灯提醒，在使用三色灯提醒时候必须加该标志符</span></div><div class="line">Notification.FLAG_ONGOING_EVENT          <span class="comment">//发起正在运行事件（活动中）</span></div><div class="line">Notification.FLAG_INSISTENT   <span class="comment">//让声音、振动无限循环，直到用户响应 （取消或者打开）</span></div><div class="line">Notification.FLAG_ONLY_ALERT_ONCE  <span class="comment">//发起Notification后，铃声和震动均只执行一次</span></div><div class="line">Notification.FLAG_AUTO_CANCEL      <span class="comment">//用户单击通知后自动消失</span></div><div class="line">Notification.FLAG_NO_CLEAR          <span class="comment">//只有全部清除时，Notification才会清除 ，不清楚该通知(QQ的通知无法清除，就是用的这个)</span></div><div class="line">Notification.FLAG_FOREGROUND_SERVICE    <span class="comment">//表示正在运行的服务</span></div></pre></td></tr></table></figure>
<p>#####（2）方法：.setDefaults(int defaults)     （NotificationCompat.Builder中的方法，用于提示）</p>
<p>功能：向通知添加声音、闪灯和振动效果的最简单、使用默认（defaults）属性，可以组合多个属性（和方法1中提示效果一样的）<br>对应属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Notification.DEFAULT_VIBRATE    <span class="comment">//添加默认震动提醒  需要 VIBRATE permission</span></div><div class="line">Notification.DEFAULT_SOUND    <span class="comment">// 添加默认声音提醒</span></div><div class="line">Notification.DEFAULT_LIGHTS<span class="comment">// 添加默认三色灯提醒</span></div><div class="line">Notification.DEFAULT_ALL<span class="comment">// 添加默认以上3种全部提醒</span></div></pre></td></tr></table></figure>
<p>#####（3）方法：setVibrate(long[] pattern)</p>
<p>功能：设置震动方式。<br>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mBuilder.setVibrate(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">0</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">700</span>&#125;);</div></pre></td></tr></table></figure>
<p>实现效果：延迟0ms，然后振动300ms，在延迟500ms，接着在振动700ms。</p>
<p>以上方法的还有种写法是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mBuilder.build().vibrate = <span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">0</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">700</span>&#125;;</div></pre></td></tr></table></figure>
<p>以此类推，2种写法都可以。</p>
<p>如果希望设置默认振动方式，设置了方法（2）中默认为DEFAULT_VIBRATE 即可。</p>
<p>#####（4）方法：.setLights(intledARGB ,intledOnMS ,intledOffMS )</p>
<p>功能：android支持三色灯提醒，这个方法就是设置不同场景下的不同颜色的灯。<br>描述：其中ledARGB 表示灯光颜色、 ledOnMS 亮持续时间、ledOffMS 暗的时间。<br>注意：</p>
<p>1）只有在设置了标志符Flags为Notification.FLAG_SHOW_LIGHTS的时候，才支持三色灯提醒。<br>2）这边的颜色跟设备有关，不是所有的颜色都可以，要看具体设备。<br>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mBuilder.setLights(<span class="number">0xff0000ff</span>, <span class="number">300</span>, <span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>同理，以下方法也可以设置同样效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Notification notify = mBuilder.build();</div><div class="line">notify.flags = Notification.FLAG_SHOW_LIGHTS;</div><div class="line">notify.ledARGB = <span class="number">0xff0000ff</span>;</div><div class="line">notify.ledOnMS = <span class="number">300</span>;</div><div class="line">notify.ledOffMS = <span class="number">300</span>;</div></pre></td></tr></table></figure>
<p>如果希望使用默认的三色灯提醒，设置了方法（2）中默认为DEFAULT_LIGHTS即可。</p>
<p>#####（5）方法：.setSound(Uri sound)</p>
<p>功能：设置默认或则自定义的铃声，来提醒。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取默认铃声</span></div><div class="line">.setDefaults(Notification.DEFAULT_SOUND)</div><div class="line"><span class="comment">//获取自定义铃声</span></div><div class="line">.setSound(Uri.parse(<span class="string">"file:///sdcard/xx/xx.mp3"</span>))</div><div class="line"><span class="comment">//获取Android多媒体库内的铃声</span></div><div class="line">.setSound(Uri.withAppendedPath(Audio.Media.INTERNAL_CONTENT_URI, <span class="string">"5"</span>))</div></pre></td></tr></table></figure>
<p>同理相同效果的另一种设置方法这边就不讲， 和上面的都是一样的。</p>
<p>#####（6）方法：.setPriority(int pri)</p>
<p>功能：设置优先级</p>
<p>对应属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Notification.PRIORITY_DEFAULT</div><div class="line">Notification.PRIORITY_HIGH</div><div class="line">Notification.PRIORITY_LOW</div><div class="line">Notification.PRIORITY_MAX</div><div class="line">Notification.PRIORITY_MIN</div></pre></td></tr></table></figure>
<p>#####（7）方法：setOngoing(boolean ongoing)</p>
<p>功能：设置为ture，表示它为一个正在进行的通知。他们通常是用来表示一个后台任务,用户积极参与(如播放音乐)或以某种方式正在等待,因此占用设备(如一个文件下载,同步操作,主动网络连接)</p>
<p>#####（8）方法：setProgress(int max, int progress,boolean indeterminate)</p>
<p>属性：max:进度条最大数值  、progress:当前进度、indeterminate:表示进度是否不确定，true为不确定，false为确定</p>
<p>功能：设置带进度条的通知，可以在下载中使用</p>
<p>注意：此方法在4.0及以后版本才有用，如果为早期版本：需要自定义通知布局，其中包含ProgressBar视图</p>
<p>使用：如果为确定的进度条：调用setProgress(max, progress, false)来设置通知，在更新进度的时候在此发起通知更新progress，并且在下载完成后要移除进度条，通过调用setProgress(0, 0, false)既可。</p>
<p>如果为不确定（持续活动）的进度条，这是在处理进度无法准确获知时显示活动正在持续，所以调用setProgress(0, 0, true) ，操作结束时，调用setProgress(0, 0, false)并更新通知以移除指示条</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义ViewPager实现无限轮播]]></title>
      <url>http://yoursite.com/2016/02/17/%E8%87%AA%E5%AE%9A%E4%B9%89ViewPager%E5%AE%9E%E7%8E%B0%E6%97%A0%E9%99%90%E8%BD%AE%E6%92%AD/</url>
      <content type="html"><![CDATA[<p>ViewPager实现的轮播图广告自定义视图，如京东首页的广告轮播图效果；<br>既支持自动轮播页面也支持手势滑动切换页面</p>
<p><b>CustomViewPager.java</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomViewPager</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//自动轮播的时间间隔</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> TIME_INTERVAL = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="comment">//放轮播图片的ImageView 的list</span></div><div class="line">    <span class="keyword">private</span> List&lt;ImageView&gt; imageViewsList;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;LunbotuBean&gt; newsList;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ViewPager viewPager;</div><div class="line">    <span class="keyword">private</span> TextView title;</div><div class="line">    <span class="keyword">private</span> LinearLayout pointGroup;</div><div class="line">    <span class="comment">//当前轮播页</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentItem = <span class="number">0</span>;</div><div class="line">    <span class="comment">//定时任务</span></div><div class="line">    <span class="keyword">private</span> ScheduledExecutorService scheduledExecutorService;</div><div class="line">    <span class="comment">//Handler</span></div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            viewPager.setCurrentItem(currentItem);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(List&lt;LunbotuBean&gt; newsList, <span class="keyword">boolean</span> isAutoPlay)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.newsList = newsList;</div><div class="line">        initView();</div><div class="line">        initData();</div><div class="line">        <span class="keyword">if</span> (isAutoPlay) &#123;</div><div class="line">            startPlay();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始轮播图切换</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</div><div class="line">        scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();</div><div class="line">        scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> SlideShowTask(), <span class="number">5</span>, <span class="number">4</span>, TimeUnit.SECONDS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 停止轮播图切换</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopPlay</span><span class="params">()</span> </span>&#123;</div><div class="line">        scheduledExecutorService.shutdown();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化Views等UI</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        imageViewsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        title.setText(newsList.get(<span class="number">0</span>).getTitle());</div><div class="line">       </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newsList.size(); i++) &#123;</div><div class="line">            ImageView view = <span class="keyword">new</span> ImageView(getContext());</div><div class="line">            <span class="keyword">final</span> LunbotuBean bean = newsList.get(i);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</div><div class="line">            Ion.with(view).placeholder(R.drawable.img_options_wait_list).load(bean.getImage());</div><div class="line">            view.setScaleType(ScaleType.CENTER_CROP);</div><div class="line">            view.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    String[] arr = <span class="keyword">new</span> String[newsList.size() - finalI];</div><div class="line">                    String[] images = <span class="keyword">new</span> String[newsList.size() - finalI];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; newsList.size(); j++) &#123;</div><div class="line">                        <span class="keyword">if</span> (j &gt;= finalI) &#123;</div><div class="line">                            arr[j - finalI] = newsList.get(j).getId();</div><div class="line">                            images[j - finalI] = newsList.get(j).getImage();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    NoteActivity_.intent(getContext()).array(arr).titleImages(images).start();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            imageViewsList.add(view);</div><div class="line"></div><div class="line">            ImageView point = <span class="keyword">new</span> ImageView(getContext());</div><div class="line">            point.setBackgroundResource(R.drawable.point_bg);</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                point.setEnabled(<span class="keyword">true</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                point.setEnabled(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">            LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, -<span class="number">2</span>);</div><div class="line">            layoutParams.leftMargin = <span class="number">10</span>;</div><div class="line">            pointGroup.addView(point, layoutParams);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        viewPager = (ViewPager) findViewById(R.id.viewPager);</div><div class="line">        viewPager.setFocusable(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        viewPager.setAdapter(<span class="keyword">new</span> CustomPagerAdapter(imageViewsList));</div><div class="line">        viewPager.setOnPageChangeListener(<span class="keyword">new</span> MyPageChangeListener());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        LayoutInflater.from(getContext()).inflate(R.layout.layout_custom_viewpager, <span class="keyword">this</span>, <span class="keyword">true</span>);</div><div class="line">        viewPager = (ViewPager) findViewById(R.id.viewPager);</div><div class="line">        title = (TextView) findViewById(R.id.lunbo_title);</div><div class="line">        pointGroup = (LinearLayout) findViewById(R.id.ll_point_container);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lastPosition;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * ViewPager的监听器</div><div class="line">     * 当ViewPager中页面的状态发生改变时调用</div><div class="line">     *</div><div class="line">     * <span class="doctag">@author</span> caizhiming</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPageChangeListener</span> <span class="keyword">implements</span> <span class="title">OnPageChangeListener</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> isAutoPlay = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> arg0)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (arg0) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">// 手势滑动，空闲中</span></div><div class="line">                    isAutoPlay = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">// 界面切换中</span></div><div class="line">                    isAutoPlay = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:<span class="comment">// 滑动结束，即切换完毕或者加载完毕</span></div><div class="line">                    <span class="comment">// 当前为最后一张，此时从右向左滑，则切换到第一张</span></div><div class="line">                    <span class="keyword">if</span> (viewPager.getCurrentItem() == viewPager.getAdapter().getCount() - <span class="number">1</span> &amp;&amp; !isAutoPlay) &#123;</div><div class="line">                        viewPager.setCurrentItem(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// 当前为第一张，此时从左向右滑，则切换到最后一张</span></div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (viewPager.getCurrentItem() == <span class="number">0</span> &amp;&amp; !isAutoPlay) &#123;</div><div class="line">                        viewPager.setCurrentItem(viewPager.getAdapter().getCount() - <span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> arg0, <span class="keyword">float</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">            <span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</div><div class="line">            title.setText(newsList.get(pos).getTitle());</div><div class="line">            pointGroup.getChildAt(lastPosition).setEnabled(<span class="keyword">false</span>);</div><div class="line">            pointGroup.getChildAt(pos).setEnabled(<span class="keyword">true</span>);</div><div class="line">            lastPosition = pos;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行轮播图切换任务</div><div class="line">     *</div><div class="line">     * <span class="doctag">@author</span> caizhiming</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SlideShowTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (viewPager) &#123;</div><div class="line">                currentItem = (currentItem + <span class="number">1</span>) % imageViewsList.size();</div><div class="line">                handler.obtainMessage().sendToTarget();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 销毁ImageView资源，回收内存</div><div class="line">     *</div><div class="line">     * <span class="doctag">@author</span> caizhiming</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destoryBitmaps</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imageViewsList.size(); i++) &#123;</div><div class="line">            ImageView imageView = imageViewsList.get(i);</div><div class="line">            Drawable drawable = imageView.getDrawable();</div><div class="line">            <span class="keyword">if</span> (drawable != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//解除drawable对view的引用</span></div><div class="line">                drawable.setCallback(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><b>布局文件</b></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v4.view.ViewPager</div><div class="line">        android:id="@+id/viewPager"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="150dp" /&gt;</div><div class="line"></div><div class="line">    &lt;RelativeLayout</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:padding="5dp"&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id="@+id/lunbo_title"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_toLeftOf="@+id/ll_point_container"</div><div class="line">            android:singleLine="true"</div><div class="line">            android:textColor="@color/black"</div><div class="line">            android:textSize="16sp"</div><div class="line">            /&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:id="@+id/ll_point_container"</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_alignParentRight="true"</div><div class="line">            android:layout_centerVertical="true"</div><div class="line">            android:orientation="horizontal" /&gt;</div><div class="line">    &lt;/RelativeLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p><b>CustomPagerAdapter.java</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> List&lt;ImageView&gt; imageViewList;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomPagerAdapter</span><span class="params">(List&lt;ImageView&gt; imageViewsList)</span></span>&#123;</div><div class="line">       <span class="keyword">this</span>.imageViewList=imageViewsList;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(View container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">        ((ViewPager)container).removeView(imageViewList.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> view == object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(View container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        ((ViewPager)container).addView(imageViewList.get(position));</div><div class="line">        <span class="keyword">return</span> imageViewList.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> imageViewList.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EventBus使用详解]]></title>
      <url>http://yoursite.com/2016/02/16/EventBus%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>EventBus是一款针对Android优化的发布/订阅事件总线。</p>
<p>主要功能是替代Intent、Handler、BroadCast在Fragment、Activity、Service、线程之间传递消息。</p>
<p>优点是，开销小，代码更优雅，以及将发送者和接受者解耦。</p>
<p>作为一个消息总线，有三个主要的元素：</p>
<p><li>Event：事件</li></p>
<pre><code>Event 可以是任意类型的对象
</code></pre><p><li>Subscriber:事件订阅者，接收特定的事件</li></p>
<p>   在EventBus中，使用约定来指定事件订阅者以简化使用。即所有事件订阅都都是以onEvent开头的函数，具体来说，函数的名字是onEvent，onEventMainThread，onEventBackgroundThread，onEventAsync这四个，这个和ThreadMode有关</p>
<p><li>Publisher:事件发布者，用于通知Subscriber有事件发生</li></p>
<p>可以在任意线程任意位置发送事件，直接调用EventBus的<code>post(Object)</code>方法，可以自己实例化EventBus对象，但一般使用默认的单例就好了：<code>EventBus.getDefault()</code>，根据post函数参数的类型，会自动调用订阅相应类型事件的函数。</p>
<p><li>ThreadMode</li></p>
<p>前面说了，Subscriber函数的名字只能是那4个，因为每个事件订阅函数都是和一个<code>ThreadMode</code>相关联的，ThreadMode指定了会调用的函数。有以下四个ThreadMode：</p>
<ul><li>PostThread：事件的处理在和事件的发送在相同的进程，所以事件处理时间不应太长，不然影响事件的发送线程，而这个线程可能是UI线程。对应的函数名是onEvent。<br><br></li><li>MainThread: 事件的处理会在UI线程中执行。事件处理时间不能太长，这个不用说的，长了会ANR的，对应的函数名是onEventMainThread。<br><br></li><li>BackgroundThread：事件的处理会在一个后台线程中执行，对应的函数名是onEventBackgroundThread，虽然名字是BackgroundThread，事件处理是在后台线程，但事件处理时间还是不应该太长，因为如果发送事件的线程是后台线程，会直接执行事件，如果当前线程是UI线程，事件会被加到一个队列中，由一个线程依次处理这些事件，如果某个事件处理时间太长，会阻塞后面的事件的派发或处理。<br><br></li><li>Async：事件处理会在单独的线程中执行，主要用于在后台线程中执行耗时操作，每个事件会开启一个线程（有线程池），但最好限制线程的数目。</li></ul>

<p>根据事件订阅都函数名称的不同，会使用不同的ThreadMode，比如果在后台线程加载了数据想在UI线程显示，订阅者只需把函数命名为onEventMainThread。</p>
<h3 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h3><p>导入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'de.greenrobot:eventbus:2.4.0'</span></div></pre></td></tr></table></figure>
<p>使用方法：</p>
<p>在EventBus中，获取实例的方法一般是采用EventBus.getInstance()来获取默认的EventBus实例</p>
<p>①.定义事件类型：<br><code>public class MyEvent {}</code></p>
<p>②.定义事件处理方法：<br><code>public void onEventMainThread</code></p>
<p>③.注册订阅者：<br><code>EventBus.getDefault().register(this)</code></p>
<p>③.解除注册订阅者：<br><code>EventBus.getDefault().unregister(this)</code></p>
<p>④.发送事件：<br><code>EventBus.getDefault().post(new MyEvent())</code></p>
<p>注册/解除订阅者，是在对事件进行处理的Activity或者Fragment等的onCreate()、onDestoty()中进行的。<br>发送事件的页面中不用注册。</p>
<h3 id="三、实战"><a href="#三、实战" class="headerlink" title="三、实战"></a>三、实战</h3><p>现在我们的需求是这样的，两个Fragment组成主界面，左边的Fragment是个目录、即列表，右边的Fragment是详细信息面板；</p>
<p>a、目录的列表是从网络获取的。</p>
<p>b、当点击目录上的条目时，动态更新详细信息面板；</p>
<p>效果图：</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/greendao.gif"></p>
<p>有了这个需求，我们传统的做法是：</p>
<p>a、目录Fragment在onCreate中去开启线程去访问网络获取数据，获取完成以后，通过handler去更新界面。</p>
<p>b、在目录的Fragment中提供一个接口，然后详细信息面板去注册这个接口，当发生点击时，去回调这个接口，让详细信息面板发生改变。</p>
<p>这种做法不错的，但是有了EventBus之后，我们有….</p>
<h4 id="1-MainActivity及其布局"><a href="#1-MainActivity及其布局" class="headerlink" title="1.MainActivity及其布局"></a>1.MainActivity及其布局</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>布局</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  </div><div class="line">    xmlns:tools="http://schemas.android.com/tools"  </div><div class="line">    android:layout_width="match_parent"  </div><div class="line">    android:layout_height="match_parent"  </div><div class="line">    android:baselineAligned="false"  </div><div class="line">    android:divider="?android:attr/dividerHorizontal"  </div><div class="line">    android:orientation="horizontal"  </div><div class="line">    android:showDividers="middle" &gt;  </div><div class="line">  </div><div class="line">    &lt;fragment  </div><div class="line">        android:id="@+id/item_list"  </div><div class="line">        android:name="com.angeldevil.eventbusdemo.ItemListFragment"  </div><div class="line">        android:layout_width="0dip"  </div><div class="line">        android:layout_height="match_parent"  </div><div class="line">        android:layout_weight="1" /&gt;  </div><div class="line">  </div><div class="line">    &lt;fragment  </div><div class="line">        android:id="@+id/item_detail_container"  </div><div class="line">        android:name="com.angeldevil.eventbusdemo.ItemDetailFragment"  </div><div class="line">        android:layout_width="0dip"  </div><div class="line">        android:layout_height="match_parent"  </div><div class="line">        android:layout_weight="2" /&gt;  </div><div class="line">  </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>可以看到，我们MainActvity可以说没有一行代码，布局文件即两个Fragment组成；</p>
<h4 id="2-ItemListFragment"><a href="#2-ItemListFragment" class="headerlink" title="2.ItemListFragment"></a>2.ItemListFragment</h4><p>首先看个实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">public</span> String id;  </div><div class="line">    <span class="keyword">public</span> String content;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Item&gt; ITEMS = <span class="keyword">new</span> ArrayList&lt;Item&gt;();  </div><div class="line">    <span class="keyword">static</span>  </div><div class="line">    &#123;  </div><div class="line">        <span class="comment">// Add 6 sample items.  </span></div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"1"</span>, <span class="string">"Item 1"</span>));  </div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"2"</span>, <span class="string">"Item 2"</span>));  </div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"3"</span>, <span class="string">"Item 3"</span>));  </div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"4"</span>, <span class="string">"Item 4"</span>));  </div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"5"</span>, <span class="string">"Item 5"</span>));  </div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"6"</span>, <span class="string">"Item 6"</span>));  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(Item item)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        ITEMS.add(item);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">(String id, String content)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">this</span>.id = id;  </div><div class="line">        <span class="keyword">this</span>.content = content;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> content;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次，ItemListFragment</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemListFragment</span> <span class="keyword">extends</span> <span class="title">ListFragment</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        <span class="comment">// Register  </span></div><div class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        <span class="comment">// Unregister  </span></div><div class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(View view, Bundle savedInstanceState)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);  </div><div class="line">        <span class="comment">// 开启线程加载列表  </span></div><div class="line">        <span class="keyword">new</span> Thread()  </div><div class="line">        &#123;  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>  </span></div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">try</span>  </div><div class="line">                &#123;  </div><div class="line">                    Thread.sleep(<span class="number">2000</span>); <span class="comment">// 模拟延时  </span></div><div class="line">                    <span class="comment">// 发布事件，在后台线程发的事件  </span></div><div class="line">                    EventBus.getDefault().post(<span class="keyword">new</span> ItemListEvent(Item.ITEMS));  </div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e)  </div><div class="line">                &#123;  </div><div class="line">                    e.printStackTrace();  </div><div class="line">                &#125;  </div><div class="line">            &#125;;  </div><div class="line">        &#125;.start();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(ItemListEvent event)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        setListAdapter(<span class="keyword">new</span> ArrayAdapter&lt;Item&gt;(getActivity(),  </div><div class="line">                android.R.layout.simple_list_item_activated_1,  </div><div class="line">                android.R.id.text1, event.getItems()));  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView listView, View view, <span class="keyword">int</span> position,  </span></span></div><div class="line">            <span class="keyword">long</span> id)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onListItemClick(listView, view, position, id);  </div><div class="line">        EventBus.getDefault().post(getListView().getItemAtPosition(position));  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ItemListFragment里面在onCreate里面进行了事件的订阅，onDestroy里面进行了事件的取消；onViewCreated中我们模拟了一个子线程去网络加载数据，获取成功后我们调用<br>了EventBus.getDefault().post(new ItemListEvent(Item.ITEMS));发布了一个事件；</p>
<p>onListItemClick则是ListView的点击事件，我们调用了EventBus.getDefault().post(getListView().getItemAtPosition(position));去发布一个事件，</p>
<p>getListView().getItemAtPosition(position)的类型为Item类型；</p>
<p>细心的你一定发现了一些诡异的事，直接new Thread()获取到数据以后，竟然没有使用handler；我们界面竟然发生了变化，那么List是何时绑定的数据？</p>
<p>仔细看下代码，发现这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(ItemListEvent event)</span></span></div><div class="line">	&#123;</div><div class="line">		setListAdapter(<span class="keyword">new</span> ArrayAdapter&lt;Item&gt;(getActivity(),</div><div class="line">				android.R.layout.simple_list_item_activated_1,</div><div class="line">				android.R.id.text1, event.getItems()));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>应该是这个方法为List绑定的数据。那么这个方法是怎么被调用的呢？<br>现在就可以细谈订阅事件与发布事件了：</p>
<p>如果方法名以onEvent开头，则代表要订阅一个事件，MainThread意思，这个方法最终要在UI线程执行；当事件发布的时候，这个方法就会被执行。<br>那么这个事件什么时候发布呢？</p>
<p>我们的onEventMainThread触发时机应该在new Thread()执行完成之后，可以看到子线程执行完成之后，执行了EventBus.getDefault().post(new ItemListEvent(Item.ITEMS));</p>
<p>意味着发布了一个事件，当这个事件发布，我们的onEventMainThread就执行了，那么二者的关联关系是什么呢？</p>
<p>其实和参数的类型，我们onEventMainThread需要接收一个ItemListEvent ，我们也发布了一个ItemListEvent的实例。</p>
<p>现在我们完整的理一下：</p>
<p>在onCreate里面执行    EventBus.getDefault().register(this);意思是让EventBus扫描当前类，把所有onEvent开头的方法记录下来，如何记录呢？使用Map，Key为方法的参数类型，Value中包含我们的方法。<br>这样在onCreate执行完成以后，我们的onEventMainThread就已经以键值对的方式被存储到EventBus中了。</p>
<p>然后当子线程执行完毕，调用EventBus.getDefault().post(new ItemListEvent(Item.ITEMS))时，EventBus会根据post中实参的类型，去Map中查找对于的方法，于是找到了我们的onEventMainThread，最终调用反射去执行我们的方法。</p>
<p>现在应该明白了，整个运行的流程了；那么没有接口却能发生回调应该也能解释了。</p>
<p>现在我们在看看代码，当Item点击的时候EventBus.getDefault().post(getListView().getItemAtPosition(position));我们同样发布了一个事件，参数为Item；这个事件是为了让详细信息的Fragment去更新数据，不用说，按照上面的推测，详细信息的Fragment里面一个有个这样的方法：    public void onEventMainThread(Item item) ； 是不是呢？我们去看看。</p>
<h4 id="3-ItemDetailFragment"><a href="#3-ItemDetailFragment" class="headerlink" title="3.ItemDetailFragment"></a>3.ItemDetailFragment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDetailFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> TextView tvDetail;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        <span class="comment">// register  </span></div><div class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        <span class="comment">// Unregister  </span></div><div class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** List点击时会发送些事件，接收到事件后更新详情 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(Item item)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span> (item != <span class="keyword">null</span>)  </div><div class="line">            tvDetail.setText(item.content);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,  </span></span></div><div class="line">            Bundle savedInstanceState)  </div><div class="line">    &#123;  </div><div class="line">        View rootView = inflater.inflate(R.layout.fragment_item_detail,  </div><div class="line">                container, <span class="keyword">false</span>);  </div><div class="line">        tvDetail = (TextView) rootView.findViewById(R.id.item_detail);  </div><div class="line">        <span class="keyword">return</span> rootView;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>果然不出我们的所料，真的存在onEventMainThread(Item item)的方法。当然了，必须在onCreate里面首先书写EventBus.getDefault().register(this);让EventBus扫描再说。</p>
<p>那么这个Fragment的流程就是：onCreate时，EventBus扫描当前类，将onEventMainThread以键值对的形式进行存储，键为Item.class ，值为包含该方法的对象。</p>
<p>然后当ItemListFragment中Item被点击时，发布了一个事件：EventBus.getDefault().post(getListView().getItemAtPosition(position));实参的类型恰好是Item，于是触发我们的<br>onEventMainThread方法，并把Item实参传递进来，我们更新控件。</p>
<h4 id="4-Event"><a href="#4-Event" class="headerlink" title="4.Event"></a>4.Event</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">/** 列表加载事件 */</span>  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemListEvent</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">private</span> List&lt;Item&gt; items;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ItemListEvent</span><span class="params">(List&lt;Item&gt; items)</span>  </span></div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">this</span>.items = items;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">getItems</span><span class="params">()</span>  </span></div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">return</span> items;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个Event 可以是任意类型 可以是个类，还可以是个枚举等，只要参数不同，针对参数的事件做相应的处理。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Listview列表中视频的播放与暂停及之间的牵制]]></title>
      <url>http://yoursite.com/2016/01/18/Android-Listview%E5%88%97%E8%A1%A8%E4%B8%AD%E8%A7%86%E9%A2%91%E7%9A%84%E6%92%AD%E6%94%BE%E4%B8%8E%E6%9A%82%E5%81%9C%E5%8F%8A%E4%B9%8B%E9%97%B4%E7%9A%84%E7%89%B5%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>实现的效果：</p>
<p>   在列表中播放视频，同时播放这个视频的同时，打开列表中另一个视频，当前视频停止播放,控制视频的进度。</p>
<p>实现方式：</p>
<p>   android原生的videoview及系统的mediaControll，自带的进度条会在当前页面的下方，不能达到我们每个视频一个进度条的效果， 还有进度条位置的效果。</p>
<p>解决：</p>
<p>  自定义视频播放组件，就是将videoview和seekbar整合到一个组件中，自己控制进度，不使用系统的mediaControll。</p>
<p>思路：</p>
<p> 检查 定时器任务是否继续进行，定时器任务（videoview播放进度 控制seekbar的进度），定时器任务关掉，否则会一直进行，退出的时候会崩溃</p>
<p>没写完，回来了解透彻之后在写。</p>
<p>具体代码见：<a href="https://github.com/iosline/videoplayer" target="_blank" rel="external">源码地址</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中WebView使用之二（JavaScript代码使用）]]></title>
      <url>http://yoursite.com/2015/12/17/Android%E4%B8%ADWebView%E4%BD%BF%E7%94%A8%E4%B9%8B%E4%BA%8C%EF%BC%88JavaScript%E4%BB%A3%E7%A0%81%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="本文主要讲的是-JS代码与Android代码的互相调用"><a href="#本文主要讲的是-JS代码与Android代码的互相调用" class="headerlink" title="本文主要讲的是 JS代码与Android代码的互相调用"></a>本文主要讲的是 JS代码与Android代码的互相调用</h3><h4 id="一、在WebView中使用JavaScript"><a href="#一、在WebView中使用JavaScript" class="headerlink" title="一、在WebView中使用JavaScript"></a>一、在WebView中使用JavaScript</h4><p>如果你想要载入的页面中用了JavaScript，你必须为你的WebView使用JavaScript。</p>
<p>一旦使用之后，你也可以自己创建接口在你的应用和JavaScript代码间进行交互。</p>
<h5 id="前情提要：使用JavaScript"><a href="#前情提要：使用JavaScript" class="headerlink" title="前情提要：使用JavaScript"></a>前情提要：使用JavaScript</h5><p>上一篇文章已经说过，可以通过getSettings()获得WebSettings，然后用setJavaScriptEnabled()使能JavaScript：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class="line">WebSettings webSettings = myWebView.getSettings();</div><div class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<h5 id="绑定JavaScript与Android代码"><a href="#绑定JavaScript与Android代码" class="headerlink" title="绑定JavaScript与Android代码"></a>绑定JavaScript与Android代码</h5><p>当你为你的Android应用中的WebView专门开发一个网页应用时，你可以创建你的JavaScript代码和你的客户端的Android代码之间的接口。</p>
<p>比如，你可以用JavaScript代码调用Android代码中的方法，来展现一个对话框之类，而不是使用alert()方法（JS中的对话框方法）。</p>
<p>在JS和Android代码间绑定一个新的接口，需要调用 addJavascriptInterface()方法。</p>
<p>方法参数传入一个Java对象实例和一个字符串，该字符串是一个名字（interface name，注意此接口不是通常所说的那个用来实现的接口，而是传入的这个对象在JS中的别名），在JS代码中用此名字调用该Java对象的方法。</p>
<p>注意这个方法可以让JS代码控制宿主程序，这是一个非常有力的特性，但是同时也存在一些安全问题，因为进一步JS代码可以通过反射访问到注入对象的公有域。攻击者可能会在HTML和JavaScript中包含了有威胁性的代码。</p>
<p>所以Android 4.1，API 17，也就是JELLY_BEAN 开始，只有被JavascriptInterface 注解标识的公有方法可以被JS代码访问。</p>
<p>另外，因为JS代码和Java对象在这个WebView所私有的后台线程交互，所以还需要注意线程安全性问题。</p>
<p>注意，与JS代码绑定的的这个Java对象运行在另一个线程中，与创建它的线程不是一个线程。</p>
<p>注意，这个Java对象的域是不可访问的。</p>
<h5 id="绑定JavaScript与Android代码的例子"><a href="#绑定JavaScript与Android代码的例子" class="headerlink" title="绑定JavaScript与Android代码的例子"></a>绑定JavaScript与Android代码的例子</h5><p>比如可以定义这么一个类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义的Android代码和JavaScript代码之间的桥梁类</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> 1</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppInterface</span></span></div><div class="line">&#123;</div><div class="line">    Context mContext;</div><div class="line"></div><div class="line">    <span class="comment">/** Instantiate the interface and set the context */</span></div><div class="line">    WebAppInterface(Context c)</div><div class="line">    &#123;</div><div class="line">        mContext = c;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** Show a toast from the web page */</span></div><div class="line">    <span class="comment">// 如果target 大于等于API 17，则需要加上如下注解</span></div><div class="line">    <span class="comment">// @JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String toast)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();</span></div><div class="line">        Toast.makeText(mContext, toast, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后将这个类和你的WebView中的JS代码绑定：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WebView webView = (WebView) findViewById(R.id.webview);</div><div class="line">webView.addJavascriptInterface(<span class="keyword">new</span> WebAppInterface(<span class="keyword">this</span>), <span class="string">"Android"</span>);</div></pre></td></tr></table></figure>
<p>　　给这个对象起的别名叫“Android”。</p>
<p>　　这个就创立了一个接口名，叫“Android”，运行在WebView中的JS代码可以通过这个名字调用WebAppInterface类中的showToast()方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;input type="button" value="Say hello" onClick="showAndroidToast('Hello Android!')" /&gt;</div><div class="line"></div><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">    function showAndroidToast(toast) </div><div class="line">    &#123;</div><div class="line">        Android.showToast(toast);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h5 id="特别注意：需要设置chrome-handler"><a href="#特别注意：需要设置chrome-handler" class="headerlink" title="特别注意：需要设置chrome handler"></a>特别注意：需要设置chrome handler</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果不设置这个，JS代码中的按钮会显示，但是按下去却不弹出对话框</span></div><div class="line">  <span class="comment">// Sets the chrome handler. This is an implementation of WebChromeClient</span></div><div class="line">  <span class="comment">// for use in handling JavaScript dialogs, favicons, titles, and the</span></div><div class="line">  <span class="comment">// progress. This will replace the current handler.</span></div><div class="line">  myWebView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient()</div><div class="line">  &#123;</div><div class="line">	</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message,</span></span></div><div class="line">              JsResult result)</div><div class="line">      &#123;</div><div class="line">          <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.onJsAlert(view, url, message, result);</div><div class="line">      &#125;</div><div class="line">	</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h4 id="二、Android-调用JavaScript代码"><a href="#二、Android-调用JavaScript代码" class="headerlink" title="二、Android 调用JavaScript代码"></a>二、Android 调用JavaScript代码</h4><p>这个还比较简单，需要调用的时候只需要一行代码：　　</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myWebView.loadUrl(<span class="string">"javascript:myFunction()"</span>);<span class="comment">//其中myFunction()是JS函数。</span></div></pre></td></tr></table></figure>
<p>　　这里要补充一下，如果JavaScript函数是带参数的，那么调用时要特别注意。</p>
<p>　　比如下面这个JS函数，在原来内容上加入一行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    function writeLine(string)</div><div class="line">    &#123;</div><div class="line">        console.log("Write a new Line");//调试信息</div><div class="line">        document.getElementById("content").innerHTML += string + "&lt;br /&gt;";//在content标签段落加入新行</div><div class="line">    &#125;</div><div class="line">```    </div><div class="line">    </div><div class="line">　　注：其中content是自定义的标签，html中有一个段落是：</div><div class="line"></div><div class="line">```java</div><div class="line">    &lt;p id="content"&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>那么在Android代码中调用这个writeLine()函数时，需要传入一个字符串参数，比如，想要传入一个叫name的String：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myWebView.loadUrl(<span class="string">"javascript:writeLine('"</span>+name+<span class="string">"')"</span>);<span class="comment">//JS代码要是带参数</span></div></pre></td></tr></table></figure>
<p>　　还有就是要注意双引号中的函数名一定不要写错。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中WebView使用之一（基础用法）]]></title>
      <url>http://yoursite.com/2015/12/17/Android%E4%B8%ADWebView%E4%BD%BF%E7%94%A8%E4%B9%8B%E4%B8%80%EF%BC%88%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="WebView基础使用"><a href="#WebView基础使用" class="headerlink" title="WebView基础使用"></a>WebView基础使用</h3><p>WebView是View的一个子类，可以让你在activity中显示网页。</p>
<p>　　可以在布局文件中写入WebView：比如下面这个写了一个填满整个屏幕的WebView：　</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">	&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">	&lt;WebView  xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">	    android:id=<span class="string">"@+id/webview"</span></div><div class="line">	    android:layout_width=<span class="string">"fill_parent"</span></div><div class="line">	    android:layout_height=<span class="string">"fill_parent"</span></div><div class="line">	/&gt;</div><div class="line">``` </div><div class="line"></div><div class="line">　　加载一个网页，使用loadUrl()：</div><div class="line"></div><div class="line">```java</div><div class="line">	WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class="line">	myWebView.loadUrl(<span class="string">"http://www.example.com"</span>);</div></pre></td></tr></table></figure>
<h4 id="一、设置WebView要现实的网页"><a href="#一、设置WebView要现实的网页" class="headerlink" title="一、设置WebView要现实的网页"></a>一、设置WebView要现实的网页</h4><p>设置WevView要显示的网页方法有很多：</p>
<p>　　互联网页面直接用：<br>　　　<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myWebView.loadUrl(<span class="string">"http://www.google.com"</span>);</div></pre></td></tr></table></figure></p>
<p>   本地文件用：<br>　　<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">	myWebView.loadUrl(<span class="string">"file:///android_asset/XX.html"</span>); </div><div class="line">```	 </div><div class="line">　　本地文件存放在：assets文件中。</div><div class="line"></div><div class="line">　　还可以直接载入html的字符串，如：</div><div class="line"></div><div class="line">```java</div><div class="line">	String htmlString = <span class="string">"&lt;h1&gt;Title&lt;/h1&gt;&lt;p&gt;This is HTML text&lt;br /&gt;&lt;i&gt;Formatted in italics&lt;/i&gt;&lt;br /&gt;Anothor Line&lt;/p&gt;"</span>;</div><div class="line">	<span class="comment">// 载入这个html页面</span></div><div class="line">	myWebView.loadData(htmlString, <span class="string">"text/html"</span>, <span class="string">"utf-8"</span>);</div></pre></td></tr></table></figure></p>
<p>打开页面时， 自适应屏幕：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">WebSettings webSettings =   mWebView .getSettings();       </div><div class="line">webSettings.setUseWideViewPort(<span class="keyword">true</span>);<span class="comment">//设置此属性，可任意比例缩放</span></div><div class="line">webSettings.setLoadWithOverviewMode(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>便页面支持缩放：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">WebSettings webSettings =   mWebView .getSettings();       </div><div class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);  </div><div class="line">webSettings.setBuiltInZoomControls(<span class="keyword">true</span>);</div><div class="line">webSettings.setSupportZoom(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>如果webView中需要用户手动输入用户名、密码或其他，则webview必须设置支持获取手势焦点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webview.requestFocusFromTouch();</div></pre></td></tr></table></figure>
<h4 id="二、在WebView中使用JavaScript"><a href="#二、在WebView中使用JavaScript" class="headerlink" title="二、在WebView中使用JavaScript"></a>二、在WebView中使用JavaScript</h4><p>如果你想要载入的页面中用了JavaScript，你必须为你的WebView使用JavaScript。</p>
<p>一旦使用之后，你也可以自己创建接口在你的应用和JavaScript代码间进行交互。</p>
<p>使用JavaScript可以通过getSettings()获得WebSettings，然后用setJavaScriptEnabled()使能JavaScript：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">	WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class="line">	WebSettings webSettings = myWebView.getSettings();</div><div class="line">	webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">``` </div><div class="line"></div><div class="line">WebSettings中提供了很多有用的设置。</div><div class="line"></div><div class="line">```<span class="function">java</span></div><div class="line">	<span class="title">setJavaScriptEnabled</span><span class="params">(<span class="keyword">true</span>)</span>;  <span class="comment">//支持js</span></div><div class="line">	</div><div class="line">	setPluginsEnabled(<span class="keyword">true</span>);  <span class="comment">//支持插件 </span></div><div class="line">	</div><div class="line">	setUseWideViewPort(<span class="keyword">false</span>);  <span class="comment">//将图片调整到适合webview的大小 </span></div><div class="line">	</div><div class="line">	setSupportZoom(<span class="keyword">true</span>);  <span class="comment">//支持缩放 </span></div><div class="line">	</div><div class="line">	setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); <span class="comment">//支持内容重新布局  </span></div><div class="line">	</div><div class="line">	supportMultipleWindows();  <span class="comment">//多窗口 </span></div><div class="line">	</div><div class="line">	setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);  <span class="comment">//关闭webview中缓存 </span></div><div class="line">	</div><div class="line">	setAllowFileAccess(<span class="keyword">true</span>);  <span class="comment">//设置可以访问文件 </span></div><div class="line">	</div><div class="line">	setNeedInitialFocus(<span class="keyword">true</span>); <span class="comment">//当webview调用requestFocus时为webview设置节点</span></div><div class="line">	</div><div class="line">	webview webSettings.setBuiltInZoomControls(<span class="keyword">true</span>); <span class="comment">//设置支持缩放 </span></div><div class="line">	</div><div class="line">	setJavaScriptCanOpenWindowsAutomatically(<span class="keyword">true</span>); <span class="comment">//支持通过JS打开新窗口 </span></div><div class="line">	</div><div class="line">	setLoadWithOverviewMode(<span class="keyword">true</span>); <span class="comment">// 缩放至屏幕的大小</span></div><div class="line">	</div><div class="line">	setLoadsImagesAutomatically(<span class="keyword">true</span>);  <span class="comment">//支持自动加载图片</span></div></pre></td></tr></table></figure>
<h4 id="三、处理页面浏览"><a href="#三、处理页面浏览" class="headerlink" title="三、处理页面浏览"></a>三、处理页面浏览</h4><p>当用户点击了你的WebView中的一个链接，默认的行为是Android启动一个处理URL的应用，通常，默认的浏览器打开并下载目标URL。</p>
<p>但是，你可以在你的WebView中覆盖这一行为，使得连接仍在你的WebView中打开。</p>
<p>之后，根据在WebView中维护的网页浏览历史，你可以允许用户向前或向后浏览他们的网页。</p>
<h5 id="在WebView中打开所有链接"><a href="#在WebView中打开所有链接" class="headerlink" title="在WebView中打开所有链接"></a>在WebView中打开所有链接</h5><p>要打开用户点击的链接，只需要用setWebViewClient()方法向你的WebView提供一个WebViewClient 比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class="line">myWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient());</div></pre></td></tr></table></figure>
<p>此时就OK了， 就可以在你的WebView中打开链接了。</p>
<h5 id="关于打开链接位置的更多控制"><a href="#关于打开链接位置的更多控制" class="headerlink" title="关于打开链接位置的更多控制"></a>关于打开链接位置的更多控制</h5><p>如果你对在哪里打开链接需要更多的控制，你可以创建自己的类，继承 WebViewClient，然后覆写shouldOverrideUrlLoading() 方法。</p>
<p>　　比如下面这个：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebViewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span></span></div><div class="line">&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span></span></div><div class="line">    &#123;</div><div class="line">	</div><div class="line">	　　　　　　　<span class="keyword">if</span>(Uri.parse(url).getHost().equals(www.example.com))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url));</div><div class="line">        startActivity(intent);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将特定的链接用自己的WebView打开，其他链接用浏览器（intent启动了默认的处理URL的Activity）。</p>
<p>定义完之后把这个类的对象传入setWebViewClient()方法即可。　</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class="line">myWebView.setWebViewClient(<span class="keyword">new</span> MyWebViewClient());</div></pre></td></tr></table></figure>
<h5 id="浏览网页历史回退"><a href="#浏览网页历史回退" class="headerlink" title="浏览网页历史回退"></a>浏览网页历史回退</h5><p>当你的WebView覆写了URL载入的行为，它会自动地对访问过的网页积累一个历史，你可以利用 goBack() 和 goForward()方法在这个历史中前进或后退。</p>
<p>比如说使用后退键进行网页后退：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 按键响应，在WebView中查看网页时，按返回键的时候按浏览历史退回,如果不做此项处理则整个WebView返回退出</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Check if the key event was the Back button and if there's history</span></div><div class="line">    <span class="keyword">if</span> ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; myWebView.canGoBack())</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 返回键退回</span></div><div class="line">        myWebView.goBack();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>canGoBack() 方法在网页可以后退时返回true。</p>
<p>类似的，canGoForward()方法可以检查是否有可以前进的历史记录。</p>
<p>如果你不执行这种检查，一旦 goBack() 和 goForward()方法到达历史记录顶端，它们将什么也不做。</p>
<p>如果不加这种设置，在用户按下Back键时，如果是WebView显示网页，则会将WebView作为整体返回。</p>
<h5 id="WebViewClient方法详解"><a href="#WebViewClient方法详解" class="headerlink" title="WebViewClient方法详解"></a>WebViewClient方法详解</h5><pre><code class="java">doUpdateVisitedHistory(WebView view, String url, <span class="keyword">boolean</span> isReload)  <span class="comment">//(更新历史记录) </span>

onFormResubmission(WebView view, Message dontResend, Message resend) <span class="comment">//(应用程序重新请求网页数据) </span>

onLoadResource(WebView view, String url) <span class="comment">// 在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。 </span>

onPageStarted(WebView view, String url, Bitmap favicon) <span class="comment">//这个事件就是开始载入页面调用的，通常我们可以在这设定一个loading的页面，告诉用户程序在等待网络响应。 </span>

onPageFinished(WebView view, String url) <span class="comment">//在页面加载结束时调用。同样道理，我们知道一个页面载入完成，于是我们可以关闭loading 条，切换程序动作。 </span>

onReceivedError(WebView view, <span class="keyword">int</span> errorCode, String description, String failingUrl)<span class="comment">// (报告错误信息) </span>

onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm)<span class="comment">//（获取返回信息授权请求） </span>

onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) <span class="comment">//重写此方法可以让webview处理https请求。</span>

onScaleChanged(WebView view, <span class="keyword">float</span> oldScale, <span class="keyword">float</span> newScale) <span class="comment">// (WebView发生改变时调用) </span>

onUnhandledKeyEvent(WebView view, KeyEvent event) <span class="comment">//（Key事件未被加载时调用） </span>

shouldOverrideKeyEvent(WebView view, KeyEvent event)<span class="comment">//重写此方法才能够处理在浏览器中的按键事件。 </span>

shouldOverrideUrlLoading(WebView view, String url) 
<span class="comment">//在点击请求的是链接是才会调用，重写此方法返回true表明点击网页里面的链接还是在当前的webview里跳转，不跳到浏览器那边。这个函数我们可以做很多操作，比如我们读取到某些特殊的URL，于是就可以不打开地址，取消这个操作，进行预先定义的其他操作，这对一个程序是非常必要的。</span>
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[仿QQ好友列表]]></title>
      <url>http://yoursite.com/2015/12/15/%E4%BB%BFQQ%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>前段时间，朋友不经意间就说起了那天发生的事，一个ios面试者去他公司面试，让他直接做一个QQ好友列表，那哥们不会，被他彻底的鄙视了一番，马丹，我一听，草，我也不会啊，然后我就默默的记住了，回来去查了下资料写了下。</p>
<h4 id="唉，我太菜了，学无止境啊"><a href="#唉，我太菜了，学无止境啊" class="headerlink" title="唉，我太菜了，学无止境啊"></a>唉，我太菜了，学无止境啊</h4><p>进入正题：</p>
<p>其实就是用到了<b>ExpandableListView</b>这个组件，用法和listview相似。</p>
<h4 id="一、默认图标"><a href="#一、默认图标" class="headerlink" title="一、默认图标"></a>一、默认图标</h4><p>在Activity的布局文件中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;RelativeLayout </div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    &gt;</div><div class="line"></div><div class="line">    &lt;ExpandableListView</div><div class="line">        android:id="@+id/expanded_list"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        android:divider="@null"</div><div class="line">        android:scrollbars="none"/&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>然后在Activity中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    ExpandableListView expandablelistview;</div><div class="line">    <span class="comment">//群组名称</span></div><div class="line">    <span class="keyword">private</span> String[] group = <span class="keyword">new</span> String[] &#123; <span class="string">"在线好友"</span>, <span class="string">"我的好友"</span>, <span class="string">"我的同事"</span>&#125;;</div><div class="line">    <span class="comment">//好友名称</span></div><div class="line">    <span class="keyword">private</span> String[][] buddy = <span class="keyword">new</span> String[][] &#123;</div><div class="line">            &#123; <span class="string">"元芳"</span>, <span class="string">"雷丶小贱"</span>, <span class="string">"狄大人"</span>&#125;,</div><div class="line">            &#123;<span class="string">"高太后"</span>, <span class="string">"士兵甲"</span>, <span class="string">"士兵乙"</span>, <span class="string">"士兵丙"</span> &#125;,</div><div class="line">            &#123; <span class="string">"艺术家"</span>, <span class="string">"叫兽"</span>, <span class="string">"攻城师"</span>, <span class="string">"职业玩家"</span> &#125;&#125;;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">       </div><div class="line"></div><div class="line">        expandablelistview= (ExpandableListView) findViewById(R.id.expanded_list);</div><div class="line">        ExpandableListAdapter adapter=<span class="keyword">new</span> BuddyAdapter();</div><div class="line">        expandablelistview.setAdapter(adapter);</div><div class="line">        expandablelistview.setOnChildClickListener(<span class="keyword">new</span> ExpandableListView.OnChildClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onChildClick</span><span class="params">(ExpandableListView parent, View v, <span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,buddy[groupPosition][childPosition].toString(),Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BuddyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseExpandableListAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGroupCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> group.length;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChildrenCount</span><span class="params">(<span class="keyword">int</span> groupPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> buddy[groupPosition].length;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getGroup</span><span class="params">(<span class="keyword">int</span> groupPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> group[groupPosition];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> buddy[groupPosition][childPosition];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getGroupId</span><span class="params">(<span class="keyword">int</span> groupPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> groupPosition;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getChildId</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> childPosition;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasStableIds</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">getGroupView</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">boolean</span> isExpanded, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">            TextView textView = getTextView();<span class="comment">//调用定义的getTextView()方法</span></div><div class="line">            textView.setText(getGroup(groupPosition).toString());<span class="comment">//添加数据</span></div><div class="line">            <span class="keyword">return</span> textView;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">getChildView</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition, <span class="keyword">boolean</span> isLastChild, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">            LinearLayout ll = <span class="keyword">new</span> LinearLayout(MainActivity.<span class="keyword">this</span>);</div><div class="line">            ll.setOrientation(LinearLayout.HORIZONTAL);<span class="comment">//定义为纵向排列</span></div><div class="line">            ImageView logo = <span class="keyword">new</span> ImageView(MainActivity.<span class="keyword">this</span>);</div><div class="line">            logo.setImageResource(R.mipmap.ic_launcher);<span class="comment">//添加图片</span></div><div class="line">            ll.addView(logo);</div><div class="line">            TextView textView = getTextView();<span class="comment">//调用定义的getTextView()方法</span></div><div class="line">            LinearLayout.LayoutParams params=<span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class="line">            params.gravity= Gravity.CENTER;</div><div class="line">            textView.setLayoutParams(params);</div><div class="line">            textView.setText(getChild(groupPosition,childPosition).toString());<span class="comment">//添加数据</span></div><div class="line">            ll.addView(textView);</div><div class="line">            <span class="keyword">return</span> ll;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isChildSelectable</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> TextView <span class="title">getTextView</span><span class="params">()</span> </span>&#123;</div><div class="line">        AbsListView.LayoutParams lp = <span class="keyword">new</span> AbsListView.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,<span class="number">100</span>);</div><div class="line">        TextView textView = <span class="keyword">new</span> TextView(MainActivity.<span class="keyword">this</span>);</div><div class="line">        textView.setLayoutParams(lp);</div><div class="line">        textView.setPadding(<span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        textView.setTextSize(<span class="number">20</span>);</div><div class="line">        <span class="keyword">return</span> textView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图：<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/仿QQ好友列表.gif"></p>
<h4 id="二、自定义列表图标"><a href="#二、自定义列表图标" class="headerlink" title="二、自定义列表图标"></a>二、自定义列表图标</h4><p><li>1、更改自定义图标</li></p>
<p>在drawable文件夹下新建expandablelistview_change.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version = "1.0"   encoding = "utf-8"?&gt;</div><div class="line">&lt;selector   xmlns:android = "http://schemas.android.com/apk/res/android" &gt;      </div><div class="line">     &lt;item android:state_expanded = "true"   android:drawable = "@drawable/w2"/&gt;      </div><div class="line">     &lt;item android:drawable = "@drawable/w1"/&gt;      </div><div class="line">&lt;/selector &gt;</div></pre></td></tr></table></figure>
<p><li>2.修改布局文件中Expandablelistview的属性等</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;ExpandableListView</div><div class="line">    android:id=<span class="string">"@+id/expanded_list"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:divider=<span class="string">"@null"</span></div><div class="line">    android:scrollbars=<span class="string">"none"</span></div><div class="line">    android:groupIndicator=<span class="string">"@drawable/expandablelistview_change"</span>/&gt;   <span class="comment">//就是添加这个</span></div></pre></td></tr></table></figure>
<p><li>3.如果想让图标放在右边可以这样做：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 得到屏幕的大小</span></div><div class="line">DisplayMetrics dm = <span class="keyword">new</span> DisplayMetrics();</div><div class="line">getWindowManager().getDefaultDisplay().getMetrics(dm);</div><div class="line"><span class="comment">//图标设置在右边</span></div><div class="line">getExpandableListView().setIndicatorBounds(dm.widthPixels-<span class="number">60</span>, dm.widthPixels); <span class="comment">// 设置指示图标的位置</span></div></pre></td></tr></table></figure>
<h4 id="引以为戒"><a href="#引以为戒" class="headerlink" title="引以为戒"></a>引以为戒</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 夜间模式的简单实现]]></title>
      <url>http://yoursite.com/2015/10/31/Android-%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>夜间模式的实现，是关于Theme的设置。在Activity中有一个方法叫setTheme()，可以设置Activity的Theme，当然Application类中也有相同的方法，也可以在Application中设置当前应用的Theme。就好像我们可以在Manifest文件中通过android:theme=“”来设置主题一样。</p>
<p>实现流程：</p>
<h3 id="一、创建属性名"><a href="#一、创建属性名" class="headerlink" title="一、创建属性名"></a>一、创建属性名</h3><p>在<code>res/value</code>目录下新建一个attr文件，并添加两个item，如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;attr name="text_color" format="reference|color" /&gt;</div><div class="line">    &lt;attr name="text_bg_color" format="reference|color" /&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p>其中text_bg和text_bg_color就是我们定义的两个属性名，后面的format是指的这个属性名的类型，这里我是用reference|color表示既可以是一个引用，也可以是一个argb颜色值。除了这些你还可以选择int，boolan，string等数据类型。</p>
<h3 id="二、定义资源样式"><a href="#二、定义资源样式" class="headerlink" title="二、定义资源样式"></a>二、定义资源样式</h3><p>创建完属性名后就需要创建主题样式了。依旧在res/values/下新建一个xml文件，或者也可以在原style.xml中写，是一样的。 我们需要在这里定义步骤一中定义的各属性名在当前主题下的值。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;style name="Dark" parent="AppTheme"&gt;</div><div class="line">    &lt;item name="text_color"&gt;@color/black_text&lt;/item&gt;</div><div class="line">    &lt;item name="text_bg_color"&gt;@color/white&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line"> &lt;style name="Light" parent="AppTheme"&gt;</div><div class="line">    &lt;item name="text_color"&gt;@color/black_text&lt;/item&gt;</div><div class="line">    &lt;item name="text_bg_color"&gt;@color/white&lt;/item&gt;    //也可以选择器</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="三、布局中使用"><a href="#三、布局中使用" class="headerlink" title="三、布局中使用"></a>三、布局中使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">      android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">      android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">      android:text=<span class="string">"第一"</span></div><div class="line">      android:layout_margin=<span class="string">"5dp"</span></div><div class="line">      android:background=<span class="string">"?text_bg_color"</span>      <span class="comment">//这样使用</span></div><div class="line">      android:textColor=<span class="string">"?text_color"</span></div><div class="line">      android:textSize=<span class="string">"25sp"</span> /&gt;</div></pre></td></tr></table></figure>
<p>因为应用夜间模式的Textview控件很多，抽取为一个样式在引用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name="TextStyle"&gt;</div><div class="line">       &lt;item name="android:background"&gt;?text_bg_color&lt;/item&gt;</div><div class="line">       &lt;item name="android:textColor"&gt;?text_color&lt;/item&gt;</div><div class="line">   &lt;/style&gt;</div></pre></td></tr></table></figure>
<p>然后这样使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">	 &lt;TextView</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:text="第一"</div><div class="line">        style="@style/TextStyle"</div><div class="line">        android:layout_margin="5dp"</div><div class="line">        android:textSize="25sp" /&gt;</div><div class="line">``` </div><div class="line">       </div><div class="line">### 四、代码中使用</div><div class="line">在要切换夜间模式的Activity使用`setTheme`方法：</div><div class="line"></div><div class="line">```java</div><div class="line">	    /**</div><div class="line">	     * 设置为日间模式</div><div class="line">	     */</div><div class="line">	</div><div class="line">	    public void setLight() &#123;</div><div class="line">	        LLogUtils.i("设置为日间模式");</div><div class="line">	        setTheme(R.style.Light);</div><div class="line">	        CacheUtil.save(IS_NIGHT, false);</div><div class="line">	        super.recreate();</div><div class="line">	    &#125;</div><div class="line">	</div><div class="line">	    /**</div><div class="line">	     * 设置为夜间模式</div><div class="line">	     */</div><div class="line">	    public void setNight() &#123;</div><div class="line">	        LLogUtils.i("设置为夜间模式");</div><div class="line">	        setTheme(R.style.Dark);</div><div class="line">	        CacheUtil.save(IS_NIGHT, true);</div><div class="line">	        super.recreate();</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="http://7xniib.com1.z0.glb.clouddn.com/darkandnight.gif"></p>
<p>如果需要在开启Activity的时候根据以前的配置，需要重写Activity中的<code>setContentView</code>方法中调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (CacheUtil.getBoolean(IS_NIGHT)) &#123;</div><div class="line">        LLogUtils.i(<span class="string">"设置为夜间模式"</span>);</div><div class="line">        setTheme(R.style.Dark);</div><div class="line">        CacheUtil.save(IS_NIGHT, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.setContentView(layoutResID);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android如何从系统图库中选择图片]]></title>
      <url>http://yoursite.com/2015/10/29/Android%E5%A6%82%E4%BD%95%E4%BB%8E%E7%B3%BB%E7%BB%9F%E5%9B%BE%E5%BA%93%E4%B8%AD%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<h4 id="给按钮一个点击事件，重定向到图片库的代码："><a href="#给按钮一个点击事件，重定向到图片库的代码：" class="headerlink" title="给按钮一个点击事件，重定向到图片库的代码："></a>给按钮一个点击事件，重定向到图片库的代码：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent i = <span class="keyword">new</span> Intent(</div><div class="line">Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);</div><div class="line">  </div><div class="line">startActivityForResult(i, RESULT_LOAD_IMAGE);</div></pre></td></tr></table></figure>
<p>注意：这里要传一个整形的常量<b>RESULT_LOAD_IMAGE</b>到startActivityForResult()方法。</p>
<h4 id="一旦用户选择了一张图片，onActivityResult-方法将会被调用。我们需要处理这个方法得到的数据，代码如下："><a href="#一旦用户选择了一张图片，onActivityResult-方法将会被调用。我们需要处理这个方法得到的数据，代码如下：" class="headerlink" title="一旦用户选择了一张图片，onActivityResult()方法将会被调用。我们需要处理这个方法得到的数据，代码如下："></a>一旦用户选择了一张图片，onActivityResult()方法将会被调用。我们需要处理这个方法得到的数据，代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (requestCode == RESULT_LOAD_IMAGE &amp;&amp; resultCode == RESULT_OK &amp;&amp; <span class="keyword">null</span> != data) &#123;</div><div class="line">        Uri selectedImage = data.getData();</div><div class="line">        String[] filePathColumn = &#123; MediaStore.Images.Media.DATA &#125;;</div><div class="line"> </div><div class="line">        Cursor cursor = getContentResolver().query(selectedImage,</div><div class="line">                filePathColumn, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        cursor.moveToFirst();</div><div class="line"> </div><div class="line">        <span class="keyword">int</span> columnIndex = cursor.getColumnIndex(filePathColumn[<span class="number">0</span>]);</div><div class="line">        String picturePath = cursor.getString(columnIndex);    <span class="comment">//此处就获得了选中图片的路径，可以对其进行操作</span></div><div class="line">        cursor.close();</div><div class="line"> </div><div class="line">        <span class="comment">// String picturePath contains the path of selected Image</span></div><div class="line">           Log.i(picturePath)  </div><div class="line"> 	&#125;</div></pre></td></tr></table></figure>
<p>注意：onActivityResult()方法只有当图片被选中后才会调用。</p>
<p>在这个方法中，我们需要检查requestCode是否是我们之前传给startActivityForResult()方法的<b>RESULT_LOAD_IMAGE</b>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android-RecyclerView使用全解析(二)]]></title>
      <url>http://yoursite.com/2015/10/27/Android-RecyclerView%E4%BD%BF%E7%94%A8%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="多Item布局实现-MultipleItem"><a href="#多Item布局实现-MultipleItem" class="headerlink" title="多Item布局实现(MultipleItem)"></a>多Item布局实现(MultipleItem)</h4><p>如果之前你用过ListView实现过此功能，那么你一定对下面这两个方法并不陌生</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getItemViewType(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewTypeCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getViewTypeCount();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其中<b>getItemViewType</b>方法是用来获取当前项Item(position参数)是哪种类型的布局</p>
<p><b>getViewTypeCount</b>方法是用来获取当前listview总共有多少种类型的布局。</p>
<p>如果你用RecyclerView，你会发现getViewTypeCount这个方法没有了，只有一个<b>getItemViewType</b>方法，用法和listview没有任何区别，这里要注意的就是这个函数<b>onCreateViewHolder(ViewGroup parent, int viewType)</b>这里的第二个参数就是View的类型，可以根据这个类型判断去创建不同item的ViewHolder。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleItemAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> ITEM_TYPE &#123;</div><div class="line">        ITEM_TYPE_IMAGE,</div><div class="line">        ITEM_TYPE_TEXT</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LayoutInflater mLayoutInflater;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> String[] mTitles;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultipleItemAdapter</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mTitles = context.getResources().getStringArray(R.array.titles);</div><div class="line">        mContext = context;</div><div class="line">        mLayoutInflater = LayoutInflater.from(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (viewType == ITEM_TYPE.ITEM_TYPE_IMAGE.ordinal()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ImageViewHolder(mLayoutInflater.inflate(R.layout.item_image, parent, <span class="keyword">false</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TextViewHolder(mLayoutInflater.inflate(R.layout.item_text, parent, <span class="keyword">false</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (holder <span class="keyword">instanceof</span> TextViewHolder) &#123;</div><div class="line">            ((TextViewHolder) holder).mTextView.setText(mTitles[position]);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (holder <span class="keyword">instanceof</span> ImageViewHolder) &#123;</div><div class="line">            ((ImageViewHolder) holder).mTextView.setText(mTitles[position]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> position % <span class="number">2</span> == <span class="number">0</span> ? ITEM_TYPE.ITEM_TYPE_IMAGE.ordinal() : ITEM_TYPE.ITEM_TYPE_TEXT.ordinal();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mTitles == <span class="keyword">null</span> ? <span class="number">0</span> : mTitles.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TextViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        <span class="meta">@InjectView</span>(R.id.text_view)</div><div class="line">        TextView mTextView;</div><div class="line"></div><div class="line">        TextViewHolder(View view) &#123;</div><div class="line">            <span class="keyword">super</span>(view);</div><div class="line">            ButterKnife.inject(<span class="keyword">this</span>, view);</div><div class="line">            view.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    Log.d(<span class="string">"TextViewHolder"</span>, <span class="string">"onClick--&gt; position = "</span> + getPosition());</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        <span class="meta">@InjectView</span>(R.id.text_view)</div><div class="line">        TextView mTextView;</div><div class="line">        <span class="meta">@InjectView</span>(R.id.image_view)</div><div class="line">        ImageView mImageView;</div><div class="line"></div><div class="line">        ImageViewHolder(View view) &#123;</div><div class="line">            <span class="keyword">super</span>(view);</div><div class="line">            ButterKnife.inject(<span class="keyword">this</span>, view);</div><div class="line">            view.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    Log.d(<span class="string">"ImageViewHolder"</span>, <span class="string">"onClick--&gt; position = "</span> + getPosition());</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>怎么样，是不是很简单，没错，就是这么简单，但是只要会了这个多Item，那么你就可以做出很多效果了，比如HeaderView和BottomView也是可以通过这种方式来实现的。(<a href="https://github.com/Frank-Zhu/AndroidRecyclerViewDemo/blob/master/app/src/main/java/com/frankzhu/recyclerviewdemo/adapter/HeaderBottomItemAdapter.java" target="_blank" rel="external">HeaderView Adapter</a>)</p>
<h4 id="嵌套RecyclerView-不好，会出各种问题：例，底部下方会有大量空白空间等"><a href="#嵌套RecyclerView-不好，会出各种问题：例，底部下方会有大量空白空间等" class="headerlink" title="嵌套RecyclerView(不好，会出各种问题：例，底部下方会有大量空白空间等)"></a>嵌套RecyclerView(不好，会出各种问题：例，底部下方会有大量空白空间等)</h4><p>一般是不推荐使用嵌套RecycleView的，和ListView是类似的，遇到这种需要嵌套的View一般都是想别的办法来规避，比如<b>动态AddView</b>，或者通过<b>RecycleView的MultipleItemAdapter</b>来实现，通过设置不同的ItemType布局不同的View，但是有时候会闲麻烦，想直接就用嵌套的方式来做，那么和ListView实现方式不同的是，ListView的实现一般都是继承ListView然后复写onMeasure方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; <span class="number">2</span>, MeasureSpec.AT_MOST);</div><div class="line">       <span class="keyword">super</span>.onMeasure(widthMeasureSpec, expandSpec);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>但是RecycleView的实现方式不再是继承RecycleView来做，而是通过<b>修改LayoutManager</b>的方式，即通过继承LinearLayoutManager GridLayoutManager StaggeredGridLayoutManager来修改子控件的测量，下面给出主要代码：</p>
<h4 id="FullyLinearLayoutManager"><a href="#FullyLinearLayoutManager" class="headerlink" title="FullyLinearLayoutManager"></a>FullyLinearLayoutManager</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] mMeasuredDimension = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state,</span></span></div><div class="line">                          <span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthMode = View.MeasureSpec.getMode(widthSpec);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightMode = View.MeasureSpec.getMode(heightSpec);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthSize = View.MeasureSpec.getSize(widthSpec);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightSize = View.MeasureSpec.getSize(heightSpec);</div><div class="line"></div><div class="line">        Log.i(TAG, <span class="string">"onMeasure called. \nwidthMode "</span> + widthMode</div><div class="line">                + <span class="string">" \nheightMode "</span> + heightSpec</div><div class="line">                + <span class="string">" \nwidthSize "</span> + widthSize</div><div class="line">                + <span class="string">" \nheightSize "</span> + heightSize</div><div class="line">                + <span class="string">" \ngetItemCount() "</span> + getItemCount());</div><div class="line"></div><div class="line">        <span class="keyword">int</span> width = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> height = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getItemCount(); i++) &#123;</div><div class="line">            measureScrapChild(recycler, i,</div><div class="line">                    View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),</div><div class="line">                    View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),</div><div class="line">                    mMeasuredDimension);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (getOrientation() == HORIZONTAL) &#123;</div><div class="line">                width = width + mMeasuredDimension[<span class="number">0</span>];</div><div class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                    height = mMeasuredDimension[<span class="number">1</span>];</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                height = height + mMeasuredDimension[<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                    width = mMeasuredDimension[<span class="number">0</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">switch</span> (widthMode) &#123;</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:</div><div class="line">                width = widthSize;</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (heightMode) &#123;</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:</div><div class="line">                height = heightSize;</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension(width, height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureScrapChild</span><span class="params">(RecyclerView.Recycler recycler, <span class="keyword">int</span> position, <span class="keyword">int</span> widthSpec,</span></span></div><div class="line">                                   <span class="keyword">int</span> heightSpec, <span class="keyword">int</span>[] measuredDimension) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            View view = recycler.getViewForPosition(<span class="number">0</span>);<span class="comment">//fix 动态添加时报IndexOutOfBoundsException</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">                RecyclerView.LayoutParams p = (RecyclerView.LayoutParams) view.getLayoutParams();</div><div class="line"></div><div class="line">                <span class="keyword">int</span> childWidthSpec = ViewGroup.getChildMeasureSpec(widthSpec,</div><div class="line">                        getPaddingLeft() + getPaddingRight(), p.width);</div><div class="line"></div><div class="line">                <span class="keyword">int</span> childHeightSpec = ViewGroup.getChildMeasureSpec(heightSpec,</div><div class="line">                        getPaddingTop() + getPaddingBottom(), p.height);</div><div class="line"></div><div class="line">                view.measure(childWidthSpec, childHeightSpec);</div><div class="line">                measuredDimension[<span class="number">0</span>] = view.getMeasuredWidth() + p.leftMargin + p.rightMargin;</div><div class="line">                measuredDimension[<span class="number">1</span>] = view.getMeasuredHeight() + p.bottomMargin + p.topMargin;</div><div class="line">                recycler.recycleView(view);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="FullyGridLayoutManager"><a href="#FullyGridLayoutManager" class="headerlink" title="FullyGridLayoutManager"></a>FullyGridLayoutManager</h4><pre><code class="java"><span class="keyword">private</span> <span class="keyword">int</span>[] mMeasuredDimension = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state, <span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>{
        <span class="keyword">final</span> <span class="keyword">int</span> widthMode = View.MeasureSpec.getMode(widthSpec);
        <span class="keyword">final</span> <span class="keyword">int</span> heightMode = View.MeasureSpec.getMode(heightSpec);
        <span class="keyword">final</span> <span class="keyword">int</span> widthSize = View.MeasureSpec.getSize(widthSpec);
        <span class="keyword">final</span> <span class="keyword">int</span> heightSize = View.MeasureSpec.getSize(heightSpec);

        <span class="keyword">int</span> width = <span class="number">0</span>;
        <span class="keyword">int</span> height = <span class="number">0</span>;
        <span class="keyword">int</span> count = getItemCount();
        <span class="keyword">int</span> span = getSpanCount();
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) {
            measureScrapChild(recycler, i,
                    View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),
                    View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),
                    mMeasuredDimension);

            <span class="keyword">if</span> (getOrientation() == HORIZONTAL) {
                <span class="keyword">if</span> (i % span == <span class="number">0</span>) {
                    width = width + mMeasuredDimension[<span class="number">0</span>];
                }
                <span class="keyword">if</span> (i == <span class="number">0</span>) {
                    height = mMeasuredDimension[<span class="number">1</span>];
                }
            } <span class="keyword">else</span> {
                <span class="keyword">if</span> (i % span == <span class="number">0</span>) {
                    height = height + mMeasuredDimension[<span class="number">1</span>];
                }
                <span class="keyword">if</span> (i == <span class="number">0</span>) {
                    width = mMeasuredDimension[<span class="number">0</span>];
                }
            }
        }

        <span class="keyword">switch</span> (widthMode) {
            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:
                width = widthSize;
            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:
            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:
        }

        <span class="keyword">switch</span> (heightMode) {
            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:
                height = heightSize;
            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:
            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:
        }

        setMeasuredDimension(width, height);
    }

    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureScrapChild</span><span class="params">(RecyclerView.Recycler recycler, <span class="keyword">int</span> position, <span class="keyword">int</span> widthSpec,
                                   <span class="keyword">int</span> heightSpec, <span class="keyword">int</span>[] measuredDimension)</span> </span>{
        <span class="keyword">if</span> (position &lt; getItemCount()) {
            <span class="keyword">try</span> {
                View view = recycler.getViewForPosition(<span class="number">0</span>);<span class="comment">//fix 动态添加时报IndexOutOfBoundsException</span>
                <span class="keyword">if</span> (view != <span class="keyword">null</span>) {
                    RecyclerView.LayoutParams p = (RecyclerView.LayoutParams) view.getLayoutParams();
                    <span class="keyword">int</span> childWidthSpec = ViewGroup.getChildMeasureSpec(widthSpec,
                            getPaddingLeft() + getPaddingRight(), p.width);
                    <span class="keyword">int</span> childHeightSpec = ViewGroup.getChildMeasureSpec(heightSpec,
                            getPaddingTop() + getPaddingBottom(), p.height);
                    view.measure(childWidthSpec, childHeightSpec);
                    measuredDimension[<span class="number">0</span>] = view.getMeasuredWidth() + p.leftMargin + p.rightMargin;
                    measuredDimension[<span class="number">1</span>] = view.getMeasuredHeight() + p.bottomMargin + p.topMargin;
                    recycler.recycleView(view);
                }
            } <span class="keyword">catch</span> (Exception e) {
                e.printStackTrace();
            }
        }
    }
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio如何导入第三方类库]]></title>
      <url>http://yoursite.com/2015/10/17/Android-Studio%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B1%BB%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="Android-Studio导入第三方类库"><a href="#Android-Studio导入第三方类库" class="headerlink" title="Android Studio导入第三方类库"></a>Android Studio导入第三方类库</h1><h3 id="一、第一种情况是：-jar的第三方包"><a href="#一、第一种情况是：-jar的第三方包" class="headerlink" title="一、第一种情况是：*.jar的第三方包"></a>一、第一种情况是：*.jar的第三方包</h3><p>这一种情况比较简单：有两步</p>
<p><li>在项目中新建一个名字叫<b>libs</b>的文件夹</li></p>
<p><li>将jar包复制到这个文件夹下，然后在这个jar包上右键————&gt;Add as Library  搞定</li></p>
<p>最后可以点住项目 按<b> F12 ——&gt;dependedices</b> 查看 包是否导入</p>
<h3 id="二、导入第三方java类库含源代码包（重点）"><a href="#二、导入第三方java类库含源代码包（重点）" class="headerlink" title="二、导入第三方java类库含源代码包（重点）"></a>二、导入第三方java类库含源代码包（重点）</h3><p><a href="http://pan.baidu.com/s/1bndTFRL" target="_blank" rel="external">slidingmenu第三方类库</a></p>
<h4 id="1-像导入一个项目那样导入类库"><a href="#1-像导入一个项目那样导入类库" class="headerlink" title="1.像导入一个项目那样导入类库"></a>1.像导入一个项目那样导入类库</h4><p>File——&gt;New——&gt;import Module  选中要导入的类库<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/import_library_1.png"></p>
<p>这个时候工程中setting.gradle中就会多一个类库</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include <span class="string">':app'</span>, <span class="string">':slidingmenu_library'</span></div></pre></td></tr></table></figure>
<h4 id="2-这时就会在library项目中自动生成build-gradle这个文件，就对它就行各种编译版本等的修改"><a href="#2-这时就会在library项目中自动生成build-gradle这个文件，就对它就行各种编译版本等的修改" class="headerlink" title="2.这时就会在library项目中自动生成build.gradle这个文件，就对它就行各种编译版本等的修改"></a>2.这时就会在library项目中自动生成build.gradle这个文件，就对它就行各种编译版本等的修改</h4><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/import_library_3.png" width="600"></p>
<h4 id="3-对app项目添加对库的依赖"><a href="#3-对app项目添加对库的依赖" class="headerlink" title="3.对app项目添加对库的依赖"></a>3.对app项目添加对库的依赖</h4><p>点住app——&gt;F12——&gt;dependenices——&gt;+Module Library  即可<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/import_library_2.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 最火的快速开发框架AndroidAnnotations使用详解]]></title>
      <url>http://yoursite.com/2015/10/14/Android-%E6%9C%80%E7%81%AB%E7%9A%84%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6AndroidAnnotations%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="一、配置（Android-Studio）"><a href="#一、配置（Android-Studio）" class="headerlink" title="一、配置（Android Studio）"></a>一、配置（Android Studio）</h3><p><li>1.在Model的build.gradle中添加</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'android-apt'</span></div><div class="line">def AAVersion = <span class="string">'XXX'</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    apt <span class="string">"org.androidannotations:androidannotations:$AAVersion"</span></div><div class="line">    compile <span class="string">"org.androidannotations:androidannotations-api:$AAVersion"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">apt &#123;</div><div class="line">    arguments &#123;</div><div class="line">        androidManifestFile variant.outputs[<span class="number">0</span>].processResources.manifestFile</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><li>2.在Project的build.gradle中添加 （就一行）</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">      mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        <span class="comment">// replace with the current version of the Android plugin</span></div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.2.2'</span></div><div class="line">        <span class="comment">// replace with the current version of the android-apt plugin</span></div><div class="line">        classpath <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.4'</span>    <span class="comment">//就这一行</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">    mavenLocal()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>详细使用看github上的中文介绍：<a href="https://github.com/mrljdx/AndroidAnnotaions/blob/master/androidannotation_zh_CN/1.0.1_%E5%B8%B8%E7%94%A8%E6%B3%A8%E9%87%8A.markdown" target="_blank" rel="external">简单使用</a></p>
<p>最最最要注意的一点就是：</p>
<p>使用AndroidAnnotations千万要记得，编译的时候会生成一个子类，这个子类的名称就是在<br>原来的类之后加了一个下划线“<em>”，比如这个例子产生的子类名称为“MyActivity</em>”，这就需要你在注册这个Activity的时候，在<br>AndroidManifest.xml中将 MyActivity 改为 MyActivity<em> ，使用的时候也是使用MyActivity</em>来表示此类，如从另一个Activity跳转<br>到此节目就要这样用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyActivity_.class));</div></pre></td></tr></table></figure>
<p>注意，是MyActivity_.class 不是 MyActivity.class;</p>
<h4 id="EActivity"><a href="#EActivity" class="headerlink" title="@EActivity"></a>@EActivity</h4><p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EActivity</span>(R.layout.main)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：清单文件中Activity的注册(Service、Receiver、Provider的注册一样)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Activity name=<span class="string">"com.quwenleiqi.ui.MyActivity_.class"</span>/&gt;</div></pre></td></tr></table></figure>
<h4 id="EFragment"><a href="#EFragment" class="headerlink" title="@EFragment"></a>@EFragment</h4><p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EFragment</span>(R.layout.my_fragment_layout)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注册：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;fragment</div><div class="line">        android:id=<span class="string">"@+id/myFragment"</span></div><div class="line">        android:name=<span class="string">"com.company.MyFragment_"</span></div><div class="line">        android:layout_width=<span class="string">"fill_parent"</span></div><div class="line">        android:layout_height=<span class="string">"fill_parent"</span> /&gt;</div></pre></td></tr></table></figure>
<p>创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyFragment fragment = <span class="keyword">new</span> MyFragment_();</div></pre></td></tr></table></figure>
<h4 id="FragmentArg"><a href="#FragmentArg" class="headerlink" title="@FragmentArg"></a>@FragmentArg</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EFragment</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;<span class="comment">//等同于 Fragment Argument</span></div><div class="line"></div><div class="line">  <span class="meta">@FragmentArg</span>(<span class="string">"myStringArgument"</span>)</div><div class="line">  String myMessage;</div><div class="line"></div><div class="line">  <span class="meta">@FragmentArg</span></div><div class="line">  String anotherStringArgument;</div><div class="line"></div><div class="line">  <span class="meta">@FragmentArg</span>(<span class="string">"myDateExtra"</span>)</div><div class="line">  Date myDateArgumentWithDefaultValue = <span class="keyword">new</span> Date();</div><div class="line"></div><div class="line">&#125;</div><div class="line">MyFragment myFragment = MyFragment_.builder()</div><div class="line">  .myMessage(<span class="string">"Hello"</span>)</div><div class="line">  .anotherStringArgument(<span class="string">"World"</span>)</div><div class="line">  .build();</div></pre></td></tr></table></figure>
<h4 id="OptionsMenu和OptionsItem"><a href="#OptionsMenu和OptionsItem" class="headerlink" title="@OptionsMenu和OptionsItem"></a>@OptionsMenu和OptionsItem</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="meta">@OptionsMenu</span>(R.menu.my_menu)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@OptionMenuItem</span></div><div class="line">    MenuItem menuSearch;</div><div class="line"></div><div class="line">    <span class="meta">@OptionsItem</span>(R.id.menuShare)</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="comment">// You can specify the ID in the annotation, or use the naming convention</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OptionsItem</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">homeSelected</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// home was selected in the action bar</span></div><div class="line">          <span class="comment">// The "Selected" keyword is optional</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OptionsItem</span></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">menuSearch</span><span class="params">()</span> </span>&#123;</div><div class="line">          menuSearch.setVisible(<span class="keyword">false</span>);</div><div class="line">          <span class="comment">// menuSearch was selected</span></div><div class="line">          <span class="comment">// the return type may be void or boolean (false to allow normal menu processing to proceed, true to consume it here)</span></div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OptionsItem</span>(&#123; R.id.menu_search, R.id.menu_delete &#125;)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">multipleMenuItems</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// You can specify multiple menu item IDs in @OptionsItem</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OptionsItem</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">menu_add</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">      <span class="comment">// You can add a MenuItem parameter to access it</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="meta">@OptionsMenu</span>(&#123;R.menu.my_menu1, R.menu.my_menu2&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="RestService"><a href="#RestService" class="headerlink" title="@RestService"></a>@RestService</h4><p>声明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestService</span></div><div class="line">BookmarkClient restClient;</div></pre></td></tr></table></figure>
<p>请求数据的url获取数据的服务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Rest</span>(<span class="string">"http://www.bookmarks.com"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookmarkClient</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="meta">@Get</span>(<span class="string">"/bookmarks/&#123;userId&#125;?search=&#123;search&#125;"</span>)</div><div class="line">  <span class="function">Bookmarks <span class="title">getBookmarks</span><span class="params">(String search, String userId)</span></span>;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在background中执行 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">restClient.getBookmarks();</div></pre></td></tr></table></figure>
<h4 id="Background"><a href="#Background" class="headerlink" title="@Background"></a>@Background</h4><p>执行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    someBackgroundWork(<span class="string">"hello"</span>, <span class="number">42</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Background</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">someBackgroundWork</span><span class="params">(String aParam, <span class="keyword">long</span> anotherParam)</span> </span>&#123;</div><div class="line">    [...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>取消：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    someCancellableBackground(<span class="string">"hello"</span>, <span class="number">42</span>);</div><div class="line">    [...]</div><div class="line">    <span class="keyword">boolean</span> mayInterruptIfRunning = <span class="keyword">true</span>;</div><div class="line">    BackgroundExecutor.cancelAll(<span class="string">"cancellable_task"</span>, mayInterruptIfRunning);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Background</span>(id=<span class="string">"cancellable_task"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">someCancellableBackground</span><span class="params">(String aParam, <span class="keyword">long</span> anotherParam)</span> </span>&#123;</div><div class="line">    [...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非并发执行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">        someSequentialBackgroundMethod(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Background</span>(serial = <span class="string">"test"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">someSequentialBackgroundMethod</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    SystemClock.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">2000</span>)+<span class="number">1000</span>);</div><div class="line">    Log.d(<span class="string">"AA"</span>, <span class="string">"value : "</span> + i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>延迟：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Background</span>(delay=<span class="number">2000</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doInBackgroundAfterTwoSeconds</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="UiThread"><a href="#UiThread" class="headerlink" title="@UiThread"></a>@UiThread</h4><p>UI线程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    doInUiThread(<span class="string">"hello"</span>, <span class="number">42</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@UiThread</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doInUiThread</span><span class="params">(String aParam, <span class="keyword">long</span> anotherParam)</span> </span>&#123;</div><div class="line">    [...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>延迟：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="meta">@UiThread</span>(delay=<span class="number">2000</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doInUiThreadAfterTwoSeconds</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优化UI线程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@UiThread</span>(propagation = Propagation.REUSE)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">runInSameThreadIfOnUiThread</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进度值改变：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Background</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">doSomeStuffInBackground</span><span class="params">()</span> </span>&#123;</div><div class="line">    publishProgress(<span class="number">0</span>);</div><div class="line">    <span class="comment">// Do some stuff</span></div><div class="line">    publishProgress(<span class="number">10</span>);</div><div class="line">    <span class="comment">// Do some stuff</span></div><div class="line">    publishProgress(<span class="number">100</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@UiThread</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(<span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">    <span class="comment">// Update progress views</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="OnActivityResult"><a href="#OnActivityResult" class="headerlink" title="@OnActivityResult"></a>@OnActivityResult</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnActivityResult</span>(REQUEST_CODE)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onResult</span><span class="params">(<span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@OnActivityResult</span>(REQUEST_CODE)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onResult</span><span class="params">(<span class="keyword">int</span> resultCode)</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@OnActivityResult</span>(ANOTHER_REQUEST_CODE)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onResult</span><span class="params">(Intent data)</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@OnActivityResult</span>(ANOTHER_REQUEST_CODE)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onResult</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="EBean"><a href="#EBean" class="headerlink" title="@EBean"></a>@EBean</h4><p>普通类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EBean</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：这个类必须仅仅只能有一个构造函数，参数最多有一个context。</p>
<p>Activity中使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  MyOtherClass myOtherClass;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以用来声明接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span>(MyImplementation.class)   <span class="comment">//接口的实现类</span></div><div class="line">MyInterface myInterface;        <span class="comment">//接口</span></div></pre></td></tr></table></figure>
<p>在普通类中还可以注入根环境:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EBean</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@RootContext</span></div><div class="line">  Context context;</div><div class="line"></div><div class="line">  <span class="comment">// Only injected if the root context is an activity</span></div><div class="line">  <span class="meta">@RootContext</span></div><div class="line">  Activity activity;</div><div class="line"></div><div class="line">  <span class="comment">// Only injected if the root context is a service</span></div><div class="line">  <span class="meta">@RootContext</span></div><div class="line">  Service service;</div><div class="line"></div><div class="line">  <span class="comment">// Only injected if the root context is an instance of MyActivity</span></div><div class="line">  <span class="meta">@RootContext</span></div><div class="line">  MyActivity myActivity;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想在类创建时期做一些操作可以：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">	<span class="meta">@AfterInject</span></div><div class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethingAfterInjection</span><span class="params">()</span> </span>&#123;</div><div class="line">	    <span class="comment">// notificationManager and dependency are set</span></div><div class="line">	  &#125;</div><div class="line"></div><div class="line">单例类需要如下声明：</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@EBean</span>(scope = Scope.Singleton)</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span> </span>&#123;</div><div class="line">	</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>注意：在单例类里面不可以注入view和事件绑定，因为单例的生命周期比Activity和Service的要长，以免发生内存溢出。</p>
<h4 id="EView"><a href="#EView" class="headerlink" title="@EView"></a>@EView</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EView</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@App</span></div><div class="line">        MyApplication application;</div><div class="line"></div><div class="line">        <span class="meta">@StringRes</span></div><div class="line">        String someStringResource;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomButton</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注册：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;com.androidannotations.view.CustomButton_</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure>
<p>创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomButton button = CustomButton_.build(context);</div></pre></td></tr></table></figure>
<h4 id="EViewGroup"><a href="#EViewGroup" class="headerlink" title="@EViewGroup"></a>@EViewGroup</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EViewGroup</span>(R.layout.title_with_subtitle)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleWithSubtitle</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ViewById</span></div><div class="line">    <span class="keyword">protected</span> TextView title, subtitle;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TitleWithSubtitle</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTexts</span><span class="params">(String titleText, String subTitleText)</span> </span>&#123;</div><div class="line">        title.setText(titleText);</div><div class="line">        subtitle.setText(subTitleText);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注册：</p>
<figure class="highlight java"><figcaption><span><com.androidannotations.viewgroup.titlewithsubtitle_< span=""></com.androidannotations.viewgroup.titlewithsubtitle_<></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android:id=<span class="string">"@+id/firstTitle"</span></div><div class="line">android:layout_width=<span class="string">"match_parent"</span></div><div class="line">android:layout_height=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure>
<h4 id="EApplication"><a href="#EApplication" class="headerlink" title="@EApplication"></a>@EApplication</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Activity中使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@App</span></div><div class="line">  MyApplication application;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="EService"><a href="#EService" class="headerlink" title="@EService"></a>@EService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跳转service：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyService_.intent(getApplication()).start();</div></pre></td></tr></table></figure>
<p>停止service：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyService_.intent(getApplication()).stop();</div></pre></td></tr></table></figure>
<h4 id="EReceiver"><a href="#EReceiver" class="headerlink" title="@EReceiver"></a>@EReceiver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EReceiver</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Receiver"><a href="#Receiver" class="headerlink" title="@Receiver"></a>@Receiver</h4><p>可以替代声明BroadcastReceiver</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Receiver</span>(actions = <span class="string">"org.androidannotations.ACTION_1"</span>)</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAction1</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="EProvider"><a href="#EProvider" class="headerlink" title="@EProvider"></a>@EProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EProvider</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContentProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ViewById"><a href="#ViewById" class="headerlink" title="@ViewById"></a>@ViewById</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Injects R.id.myEditText，变量名称必须和布局的id名称一致</span></div><div class="line">  <span class="meta">@ViewById</span></div><div class="line">  EditText myEditText;</div><div class="line"></div><div class="line">  <span class="meta">@ViewById</span>(R.id.myTextView)</div><div class="line">  TextView textView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AfterViews"><a href="#AfterViews" class="headerlink" title="@AfterViews"></a>@AfterViews</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span>(R.layout.main)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ViewById</span></div><div class="line">    TextView myTextView;</div><div class="line"></div><div class="line">    <span class="meta">@AfterViews</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateTextWithDate</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//一定要在这里进行view的一些设置，不要在oncreate()中设置，因为oncreate()在执行时 view还没有注入</span></div><div class="line">        myTextView.setText(<span class="string">"Date: "</span> + <span class="keyword">new</span> Date());    &#125;[...]</div></pre></td></tr></table></figure>
<h4 id="StringRes"><a href="#StringRes" class="headerlink" title="@StringRes"></a>@StringRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@StringRes</span>(R.string.hello)</div><div class="line">  String myHelloString;<span class="comment">//不能设置成私有变量</span></div><div class="line"></div><div class="line">  <span class="meta">@StringRes</span></div><div class="line">  String hello;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ColorRes"><a href="#ColorRes" class="headerlink" title="@ColorRes"></a>@ColorRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@ColorRes</span>(R.color.backgroundColor)</div><div class="line">  <span class="keyword">int</span> someColor;</div><div class="line"></div><div class="line">  <span class="meta">@ColorRes</span></div><div class="line">  <span class="keyword">int</span> backgroundColor;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AnimationRes"><a href="#AnimationRes" class="headerlink" title="@AnimationRes"></a>@AnimationRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@AnimationRes</span>(R.anim.fadein)</div><div class="line">  XmlResourceParser xmlResAnim;</div><div class="line"></div><div class="line">  <span class="meta">@AnimationRes</span></div><div class="line">  Animation fadein;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DimensionRes"><a href="#DimensionRes" class="headerlink" title="@DimensionRes"></a>@DimensionRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionRes</span>(R.dimen.fontsize)</div><div class="line">  <span class="keyword">float</span> fontSizeDimension;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionRes</span></div><div class="line">  <span class="keyword">float</span> fontsize;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DImensionPixelOffsetRes"><a href="#DImensionPixelOffsetRes" class="headerlink" title="@DImensionPixelOffsetRes"></a>@DImensionPixelOffsetRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionPixelOffsetRes</span>(R.string.fontsize)</div><div class="line">  <span class="keyword">int</span> fontSizeDimension;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionPixelOffsetRes</span></div><div class="line">  <span class="keyword">int</span> fontsize;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DimensionPixelSizeRes"><a href="#DimensionPixelSizeRes" class="headerlink" title="@DimensionPixelSizeRes"></a>@DimensionPixelSizeRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionPixelSizeRes</span>(R.string.fontsize)</div><div class="line">  <span class="keyword">int</span> fontSizeDimension;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionPixelSizeRes</span></div><div class="line">  <span class="keyword">int</span> fontsize;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="其他的Res："><a href="#其他的Res：" class="headerlink" title="其他的Res："></a>其他的Res：</h4><p><li>@BooleanRes<br></li><li>@ColorStateListRes<br></li><li>@DrawableRes<br></li><li>@IntArrayRes<br></li><li>@IntegerRes<br></li><li>@LayoutRes<br></li><li>@MovieRes<br></li><li>@TextRes<br></li><li>@TextArrayRes<br></li><li>@StringArrayRes</li></p>
<h4 id="Extra"><a href="#Extra" class="headerlink" title="@Extra"></a>@Extra</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Extra</span>(<span class="string">"myStringExtra"</span>)</div><div class="line">  String myMessage;</div><div class="line"></div><div class="line">  <span class="meta">@Extra</span>(<span class="string">"myDateExtra"</span>)</div><div class="line">  Date myDateExtraWithDefaultValue = <span class="keyword">new</span> Date();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// The name of the extra will be "myMessage"，名字必须一致</span></div><div class="line">  <span class="meta">@Extra</span></div><div class="line">  String myMessage;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyActivity_.intent().myMessage(<span class="string">"hello"</span>).start() ;</div></pre></td></tr></table></figure>
<h4 id="SystemService"><a href="#SystemService" class="headerlink" title="@SystemService"></a>@SystemService</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> @EActivity</div><div class="line">public class MyActivity extends Activity &#123;//</div><div class="line">  @SystemService</div><div class="line">  NotificationManager notificationManager;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Click"><a href="#Click" class="headerlink" title="@Click"></a>@Click</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Click</span>(R.id.myButton)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myButtonWasClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">    [...]</div><div class="line">&#125;</div><div class="line"><span class="meta">@Click</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">anotherButton</span><span class="params">()</span> </span>&#123;<span class="comment">//如果不指定则函数名和id对应</span></div><div class="line">    [...]</div><div class="line">&#125;</div><div class="line"><span class="meta">@Click</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">yetAnotherButton</span><span class="params">(View clickedView)</span> </span>&#123;</div><div class="line">    [...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他点击事件：</p>
<p><li>Clicks with @Click</li></p>
<p><li>Long clicks with @LongClick</li></p>
<p><li>Touches with @Touch</li></p>
<h4 id="AdapterViewEvents"><a href="#AdapterViewEvents" class="headerlink" title="AdapterViewEvents"></a>AdapterViewEvents</h4><p><li>Item clicks with @ItemClick</li></p>
<p><li>Long item clicks with @ItemLongClick</li></p>
<p><li>Item selection with @ItemSelect</li></p>
<p>有两种方式调用：</p>
<p><li>1.</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span>(R.layout.my_list)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="meta">@ItemClick</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemClicked</span><span class="params">(MyItem clickedItem)</span> </span>&#123;<span class="comment">//MyItem是adapter的实体类，等同于adapter.getItem(position)</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ItemLongClick</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemLongClicked</span><span class="params">(MyItem clickedItem)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ItemSelect</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemSelected</span><span class="params">(<span class="keyword">boolean</span> selected, MyItem selectedItem)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><li>2.</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span>(R.layout.my_list)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="meta">@ItemClick</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemClicked</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;<span class="comment">//位置id</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ItemLongClick</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemLongClicked</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ItemSelect</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemSelected</span><span class="params">(<span class="keyword">boolean</span> selected, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="SeekBarProgressChange"><a href="#SeekBarProgressChange" class="headerlink" title="@SeekBarProgressChange"></a>@SeekBarProgressChange</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//等同于SeekBar.OnSeekBarChangeListener.onProgressChanged(SeekBar, int, boolean)</span></div><div class="line">    <span class="meta">@SeekBarProgressChange</span>(R.id.seekBar)</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">onProgressChangeOnSeekBar</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> progress, <span class="keyword">boolean</span> fromUser)</span> </span>&#123;</div><div class="line">    <span class="comment">// Something Here</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@SeekBarProgressChange</span>(R.id.seekBar)</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">onProgressChangeOnSeekBar</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">    <span class="comment">// Something Here</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@SeekBarProgressChange</span>(&#123;R.id.seekBar1, R.id.seekBar2&#125;)</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">onProgressChangeOnSeekBar</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line">    <span class="comment">// Something Here</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@SeekBarProgressChange</span>(&#123;R.id.seekBar1, R.id.seekBar2&#125;)</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">onProgressChangeOnSeekBar</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Something Here</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>@SeekBarTouchStart 和 @SeekBarTouchStop<br>接受开始和结束事件的监听</p>
<h4 id="HttpsClient"><a href="#HttpsClient" class="headerlink" title="@HttpsClient"></a>@HttpsClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@HttpsClient</span></div><div class="line">HttpClient httpsClient;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@HttpsClient</span>(trustStore=R.raw.cacerts,</div><div class="line">        trustStorePwd=<span class="string">"changeit"</span>, </div><div class="line">        hostnameVerif=<span class="keyword">true</span>)</div><div class="line">    HttpClient httpsClient;</div><div class="line"></div><div class="line">    <span class="meta">@AfterInject</span></div><div class="line">    <span class="meta">@Background</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">securedRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            HttpGet httpget = <span class="keyword">new</span> HttpGet(<span class="string">"https://www.verisign.com/"</span>);</div><div class="line">            HttpResponse response = httpsClient.execute(httpget);</div><div class="line">            doSomethingWithResponse(response);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@UiThread</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethingWithResponse</span><span class="params">(HttpResponse resp)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"HTTP status "</span> + resp.getStatusLine().getStatusCode(), Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="TextChange"><a href="#TextChange" class="headerlink" title="@TextChange"></a>@TextChange</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@TextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onTextChangesOnHelloTextView</span><span class="params">(CharSequence text, TextView hello, <span class="keyword">int</span> before, <span class="keyword">int</span> start, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@TextChange</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">helloTextViewTextChanged</span><span class="params">(TextView hello)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@TextChange</span>(&#123;R.id.editText, R.id.helloTextView&#125;)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onTextChangesOnSomeTextViews</span><span class="params">(TextView tv, CharSequence text)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@TextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onTextChangesOnHelloTextView</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="BeforeTextChange"><a href="#BeforeTextChange" class="headerlink" title="@BeforeTextChange"></a>@BeforeTextChange</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BeforeTextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">beforeTextChangedOnHelloTextView</span><span class="params">(TextView hello, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@BeforeTextChange</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">helloTextViewBeforeTextChanged</span><span class="params">(TextView hello)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@BeforeTextChange</span>(&#123;R.id.editText, R.id.helloTextView&#125;)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">beforeTextChangedOnSomeTextViews</span><span class="params">(TextView tv, CharSequence text)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@BeforeTextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">beforeTextChangedOnHelloTextView</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AfterTextChange"><a href="#AfterTextChange" class="headerlink" title="@AfterTextChange"></a>@AfterTextChange</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@AfterTextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterTextChangedOnHelloTextView</span><span class="params">(Editable text, TextView hello)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@AfterTextChange</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">helloTextViewAfterTextChanged</span><span class="params">(TextView hello)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@AfterTextChange</span>(&#123;R.id.editText, R.id.helloTextView&#125;)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterTextChangedOnSomeTextViews</span><span class="params">(TextView tv, Editable text)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@AfterTextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterTextChangedOnHelloTextView</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>书写参考：<a href="http://www.csdn123.com/html/topnews201408/29/729.htm" target="_blank" rel="external">出处</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwipeRefreshLayout + RecyclerView 实现下拉刷新和上拉加载更多]]></title>
      <url>http://yoursite.com/2015/10/13/SwipeRefreshLayout-RecyclerView-%E5%AE%9E%E7%8E%B0%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%92%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/</url>
      <content type="html"><![CDATA[<p>SwipeRefreshLayout 是谷歌公司推出的用于下拉刷新的控件，SwipeRefreshLayout已经被放到了sdk中，在Version 19.1之后SwipeRefreshLayout 被放到support v4中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">源码在SDK\sdk\extras\android\support\v4\src\java\android\support\v4\widget\SwipeRefreshLayout.java</div></pre></td></tr></table></figure>
<p><b>SwipeRefreshLayout只提供了下拉刷新，我们需要添加上拉加载更多</b></p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/swipeRefreshLayout.gif"></p>
<h5 id="SwipeRefreshLayout中要注意的API"><a href="#SwipeRefreshLayout中要注意的API" class="headerlink" title="SwipeRefreshLayout中要注意的API:"></a>SwipeRefreshLayout中要注意的API:</h5><p><li>setOnRefreshListener(OnRefreshListener listener)  设置下拉监听，当用户下拉的时候会去执行回调</li></p>
<p><li>setColorSchemeColors(int… colors) 设置 进度条的颜色变化，最多可以设置4种颜色</li></p>
<p><li>setProgressViewOffset(boolean scale, int start, int end) 调整进度条距离屏幕顶部的距离 (19) </li></p>
<p><li>setRefreshing(boolean refreshing) 设置SwipeRefreshLayout当前是否处于刷新状态，一般是在请求数据的时候设置为true，在数据被加载到View中后，设置为false。</li></p>
<h3 id="添加上拉加载：对recyclerview添加addOnscrollListener-滑动到可见的最后一个item的时候，让mSwipeRefreshLayout-setRefreshing-true-加载数据，发handler-然后消失。"><a href="#添加上拉加载：对recyclerview添加addOnscrollListener-滑动到可见的最后一个item的时候，让mSwipeRefreshLayout-setRefreshing-true-加载数据，发handler-然后消失。" class="headerlink" title="添加上拉加载：对recyclerview添加addOnscrollListener,滑动到可见的最后一个item的时候，让mSwipeRefreshLayout.setRefreshing(true);加载数据，发handler ,然后消失。"></a>添加上拉加载：对recyclerview添加addOnscrollListener,滑动到可见的最后一个item的时候，让mSwipeRefreshLayout.setRefreshing(true);加载数据，发handler ,然后消失。</h3><h5 id="布局文件：SwipeRefreshLayout要嵌套在listview、srcrollview、recyclerview等的外边"><a href="#布局文件：SwipeRefreshLayout要嵌套在listview、srcrollview、recyclerview等的外边" class="headerlink" title="布局文件：SwipeRefreshLayout要嵌套在listview、srcrollview、recyclerview等的外边"></a>布局文件：SwipeRefreshLayout要嵌套在listview、srcrollview、recyclerview等的外边</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v4.widget.SwipeRefreshLayout</div><div class="line">     android:id="@+id/swiperefreshlayout"</div><div class="line">     android:layout_height="wrap_content"</div><div class="line">     android:layout_width="match_parent"</div><div class="line">     &gt;</div><div class="line">     &lt;android.support.v7.widget.RecyclerView</div><div class="line">         android:id="@+id/recyclerview"</div><div class="line">         android:layout_height="wrap_content"</div><div class="line">         android:layout_width="match_parent"</div><div class="line">         &gt;&lt;/android.support.v7.widget.RecyclerView&gt;</div><div class="line"> &lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</div></pre></td></tr></table></figure>
<h5 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">mRecyclerView= (RecyclerView) findViewById(R.id.recyclerview);</div><div class="line">layoutManager=<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">mRecyclerView.setLayoutManager(layoutManager);</div><div class="line">mRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(<span class="keyword">this</span>, DividerItemDecoration.VERTICAL_LIST));</div><div class="line">adapter=<span class="keyword">new</span> SimpleAdapter(<span class="keyword">this</span>,mDatas);</div><div class="line">mRecyclerView.setAdapter(adapter);</div><div class="line">mSwipeRefreshLayout= (SwipeRefreshLayout) findViewById(R.id.swiperefreshlayout);</div><div class="line">mSwipeRefreshLayout.setColorSchemeResources(android.R.color.holo_blue_bright, android.R.color.holo_green_light,</div><div class="line">        android.R.color.holo_orange_light, android.R.color.holo_red_light);</div><div class="line">    <span class="comment">//此处是android自带的只支持下拉刷新</span></div><div class="line">mSwipeRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">        handler.sendEmptyMessageDelayed(MSG_COMPLETE, <span class="number">3000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">   <span class="comment">//此处我们是对recyclerview添加scrollListener ,监听滑倒最后一个可见的条目的时候，刷新加载数据</span></div><div class="line">mRecyclerView.addOnScrollListener(<span class="keyword">new</span> RecyclerView.OnScrollListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState);</div><div class="line">            <span class="comment">//SCROLL_STATE_DRAGGING  和   SCROLL_STATE_IDLE 两种效果自己看着来</span></div><div class="line">        <span class="keyword">if</span>(newState == RecyclerView.SCROLL_STATE_IDLE &amp;&amp; lastVisibleItem + <span class="number">1</span> == adapter.getItemCount())&#123;</div><div class="line">            mSwipeRefreshLayout.setRefreshing(<span class="keyword">true</span>);</div><div class="line">            handler.sendEmptyMessageDelayed(MSG_COMPLETE,<span class="number">3000</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</div><div class="line">        lastVisibleItem=layoutManager.findLastVisibleItemPosition();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>handler模拟加载数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Handler handler=<span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span> MSG_COMPLETE:</div><div class="line">                    List&lt;String&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">6</span> ; i++) &#123;</div><div class="line">                        lists.add(<span class="string">"刷新"</span>+i);</div><div class="line">                    &#125;</div><div class="line">                    mDatas.addAll(<span class="number">0</span>,lists);</div><div class="line">                    adapter.notifyDataSetChanged();</div><div class="line">                    mSwipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android RecyclerView使用全解析]]></title>
      <url>http://yoursite.com/2015/10/10/Android-RecyclerView%E4%BD%BF%E7%94%A8%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>整体上看RecyclerView架构，提供了一种插拔式的体验，高度的解耦，异常的灵活，通过设置它提供的不同LayoutManager，ItemDecoration , ItemAnimator实现令人瞠目的效果。</p>
<p><li>你想要控制其显示的方式，请通过布局管理器LayoutManager（代替listview、gridview、horgiridview、瀑布流）</li></p>
<p><li>你想要控制Item间的间隔（可绘制），请通过ItemDecoration（默认没有间隔，特别难看）</li></p>
<p><li>你想要控制Item增删的动画，请通过ItemAnimator</li></p>
<p><li>你想要控制点击、长按事件，请自己写（接口回调）</li></p>
<h3 id="二、导入"><a href="#二、导入" class="headerlink" title="二、导入"></a>二、导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:recyclerview-v7:23.0.1'</span></div></pre></td></tr></table></figure>
<h3 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h3><p>RecyclerView的使用代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">	mRecyclerView = findView(R.id.id_recyclerview);</div><div class="line">	<span class="comment">//设置布局管理器  </span></div><div class="line">	mRecyclerView.setLayoutManager(layoutManager);</div><div class="line">	<span class="comment">//设置adapter</span></div><div class="line">	mRecyclerView.setAdapter(adapter)</div><div class="line">	<span class="comment">//设置Item增加、移除动画</span></div><div class="line">	mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</div><div class="line">	<span class="comment">//添加分割线</span></div><div class="line">	mRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(</div><div class="line">	                getActivity(), DividerItemDecoration.HORIZONTAL_LIST));</div><div class="line"></div><div class="line">RecyclerView代表的意义是，我只管Recycler View，也就是说RecyclerView只管回收与复用View，其他的你可以自己去设置。可以看出其高度的解耦，给予你充分的定制自由（所以你才可以轻松的通过这个控件实现ListView,GirdView，瀑布流等效果）。</div></pre></td></tr></table></figure>
<h4 id="RecyclerView设置Adapter"><a href="#RecyclerView设置Adapter" class="headerlink" title="RecyclerView设置Adapter"></a>RecyclerView设置Adapter</h4><p>RecyclerView 自带adapter、viewHolder 继承他们</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">SimpleAdapter</span>.<span class="title">MyViewHolder</span>&gt;</span>&#123;    </div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mDatas;</div><div class="line">    <span class="keyword">public</span> Context context;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleAdapter</span><span class="params">(MainActivity mainActivity, List&lt;String&gt; mDatas)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mDatas=mDatas;</div><div class="line">        <span class="keyword">this</span>.context=mainActivity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        MyViewHolder holder = <span class="keyword">new</span> MyViewHolder(LayoutInflater.from(context).inflate(R.layout.recycle_item, parent, <span class="keyword">false</span>));</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">         holder.tv.setText(mDatas.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDatas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line"></div><div class="line">        TextView tv;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            tv= (TextView) itemView.findViewById(R.id.tv);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/recyclerview_type.png"></p>
<h4 id="替代ListView"><a href="#替代ListView" class="headerlink" title="替代ListView"></a>替代ListView</h4><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/listvioew_nodivider.png" width="300dp" height="500dp"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mRecyclerView= (RecyclerView) findViewById(R.id.recycleview);</div><div class="line">RecyclerView.LayoutManager layoutManager=<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">mRecyclerView.setLayoutManager(layoutManager);</div></pre></td></tr></table></figure>
<p>演示效果你会发现item之间没有分界线，你去找时，你又会发现recyclerview没有divider这个属性。此时有两个办法可以解决：</p>
<p><li>1.你可以给item的布局设置margin值</li></p>
<p><li>2.定制分割线</li></p>
<h5 id="ItemDecoration"><a href="#ItemDecoration" class="headerlink" title="ItemDecoration"></a>ItemDecoration</h5><p>我们可以通过该方法添加分割线： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mRecyclerView.addItemDecoration()</div></pre></td></tr></table></figure>
<p>该方法的参数为RecyclerView.ItemDecoration，该类为抽象类，官方目前并没有提供默认的实现类（我觉得最好能提供几个）。 </p>
<p>该类的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDecoration</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">            onDraw(c, parent);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawOver</span><span class="params">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">            onDrawOver(c, parent);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">            getItemOffsets(outRect, ((LayoutParams) view.getLayoutParams()).getViewLayoutPosition(),</div><div class="line">                    parent);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Deprecated</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition, RecyclerView parent)</span> </span>&#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>当我们调用mRecyclerView.addItemDecoration()方法添加decoration的时候，RecyclerView在绘制的时候，去会绘制decorator，即调用该类的onDraw和onDrawOver方法，</p>
<p><li>onDraw方法先于drawChildren</li></p>
<p><li>onDrawOver在drawChildren之后，一般我们选择复写其中一个即可。</li></p>
<p><li>getItemOffsets 可以通过outRect.set()为每个Item设置一定的偏移量，主要用于绘制Decorator。</li></p>
<p>接下来我们看一个RecyclerView.ItemDecoration的实现类，该类很好的实现了RecyclerView添加分割线（当使用LayoutManager为LinearLayoutManager时）。 </p>
<h5 id="DividerItemDecoration"><a href="#DividerItemDecoration" class="headerlink" title="DividerItemDecoration"></a>DividerItemDecoration</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</div><div class="line">            android.R.attr.listDivider</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HORIZONTAL_LIST = LinearLayoutManager.HORIZONTAL;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERTICAL_LIST = LinearLayoutManager.VERTICAL;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Drawable mDivider;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mOrientation;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DividerItemDecoration</span><span class="params">(Context context, <span class="keyword">int</span> orientation)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(ATTRS);</div><div class="line">        mDivider = a.getDrawable(<span class="number">0</span>);</div><div class="line">        a.recycle();</div><div class="line">        setOrientation(orientation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> orientation)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (orientation != HORIZONTAL_LIST &amp;&amp; orientation != VERTICAL_LIST) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"invalid orientation"</span>);</div><div class="line">        &#125;</div><div class="line">        mOrientation = orientation;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        Log.v(<span class="string">"recyclerview - itemdecoration"</span>, <span class="string">"onDraw()"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) &#123;</div><div class="line">            drawVertical(c, parent);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            drawHorizontal(c, parent);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left = parent.getPaddingLeft();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right = parent.getWidth() - parent.getPaddingRight();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            android.support.v7.widget.RecyclerView v = <span class="keyword">new</span> android.support.v7.widget.RecyclerView(parent.getContext());</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getBottom() + params.bottomMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> top = parent.getPaddingTop();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bottom = parent.getHeight() - parent.getPaddingBottom();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getRight() + params.rightMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = left + mDivider.getIntrinsicHeight();</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该实现类可以看到通过读取系统主题中的 android.R.attr.listDivider作为Item间的分割线，并且支持横向和纵向。</p>
<p>获取到listDivider以后，该属性的值是个Drawable，在getItemOffsets中，outRect去设置了绘制的范围。onDraw中实现了真正的绘制。</p>
<p>我们在原来的代码中添加一句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(<span class="keyword">this</span>,</div><div class="line">DividerItemDecoration.VERTICAL_LIST));</div></pre></td></tr></table></figure>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/listview_divider.png" width="300dp" height="500dp"></p>
<p>该分割线是系统默认的，你可以在theme.xml中找到该属性的使用情况。那么，使用系统的listDivider有什么好处呢？就是方便我们去随意的改变，该属性我们可以直接声明在：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Application theme. --&gt;</div><div class="line">  &lt;style name="AppTheme" parent="AppBaseTheme"&gt;</div><div class="line">    &lt;item name="android:listDivider"&gt;@drawable/divider_bg&lt;/item&gt;  </div><div class="line">  &lt;/style&gt;</div></pre></td></tr></table></figure>
<p>然后自己写个drawable即可，下面我们换一种分隔符：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;shape xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:shape="rectangle" &gt;</div><div class="line"></div><div class="line">    &lt;gradient</div><div class="line">        android:centerColor="#ff00ff00"</div><div class="line">        android:endColor="#ff0000ff"</div><div class="line">        android:startColor="#ffff0000"</div><div class="line">        android:type="linear" /&gt;</div><div class="line">    &lt;size android:height="4dp"/&gt;</div><div class="line"></div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/listview_custom_divider.png" width="300dp" height="500dp"></p>
<h4 id="LayoutManager"><a href="#LayoutManager" class="headerlink" title="LayoutManager"></a>LayoutManager</h4><p>上面实现了类似ListView样子的Demo，通过使用其默认的LinearLayoutManager。</p>
<p>RecyclerView.LayoutManager吧，这是一个抽象类，好在系统提供了3个实现类：</p>
<p><li>LinearLayoutManager 线性管理器，支持横向、纵向。</li></p>
<p><li>GridLayoutManager 网格布局管理器</li></p>
<p><li>StaggeredGridLayoutManager 瀑布流式布局管理器</li></p>
<p>上面我们已经初步体验了下LinearLayoutManager，接下来看GridLayoutManager。</p>
<h5 id="GridLayoutManager"><a href="#GridLayoutManager" class="headerlink" title="GridLayoutManager"></a>GridLayoutManager</h5><p>我们尝试去实现类似GridView，秒秒钟的事情：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mRecyclerView.setLayoutManager(new LinearLayoutManager(this));</span></div><div class="line">  mRecyclerView.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">4</span>));   <span class="comment">//4列</span></div></pre></td></tr></table></figure>
<p>只需要修改LayoutManager即可，还是很nice的。</p>
<p>当然了，改为GridLayoutManager以后，对于分割线，前面的DividerItemDecoration就不适用了，主要是因为它在绘制的时候，比如水平线，针对每个child的取值为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> left = parent.getPaddingLeft();</div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> right = parent.getWidth() - parent.getPaddingRight();</div></pre></td></tr></table></figure>
<p>因为每个Item一行，这样是没问题的。而GridLayoutManager时，一行有多个childItem，这样就多次绘制了，并且GridLayoutManager时，Item如果为最后一列（则右边无间隔线）或者为最后一行（底部无分割线）。</p>
<p>针对上述，我们编写了DividerGridItemDecoration。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerGridItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; android.R.attr.listDivider &#125;;</div><div class="line">    <span class="keyword">private</span> Drawable mDivider;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DividerGridItemDecoration</span><span class="params">(Context context)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(ATTRS);</div><div class="line">        mDivider = a.getDrawable(<span class="number">0</span>);</div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent, State state)</span></span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        drawHorizontal(c, parent);</div><div class="line">        drawVertical(c, parent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSpanCount</span><span class="params">(RecyclerView parent)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 列数</span></div><div class="line">        <span class="keyword">int</span> spanCount = -<span class="number">1</span>;</div><div class="line">        LayoutManager layoutManager = parent.getLayoutManager();</div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">            spanCount = ((GridLayoutManager) layoutManager).getSpanCount();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> StaggeredGridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            spanCount = ((StaggeredGridLayoutManager) layoutManager)</div><div class="line">                    .getSpanCount();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> spanCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getLeft() - params.leftMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = child.getRight() + params.rightMargin</div><div class="line">                    + mDivider.getIntrinsicWidth();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getBottom() + params.bottomMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line"></div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getTop() - params.topMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = child.getBottom() + params.bottomMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getRight() + params.rightMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = left + mDivider.getIntrinsicWidth();</div><div class="line"></div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLastColum</span><span class="params">(RecyclerView parent, <span class="keyword">int</span> pos, <span class="keyword">int</span> spanCount,</span></span></div><div class="line">            <span class="keyword">int</span> childCount)</div><div class="line">    &#123;</div><div class="line">        LayoutManager layoutManager = parent.getLayoutManager();</div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ((pos + <span class="number">1</span>) % spanCount == <span class="number">0</span>)<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> StaggeredGridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> orientation = ((StaggeredGridLayoutManager) layoutManager)</div><div class="line">                    .getOrientation();</div><div class="line">            <span class="keyword">if</span> (orientation == StaggeredGridLayoutManager.VERTICAL)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> ((pos + <span class="number">1</span>) % spanCount == <span class="number">0</span>)<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                childCount = childCount - childCount % spanCount;</div><div class="line">                <span class="keyword">if</span> (pos &gt;= childCount)<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLastRaw</span><span class="params">(RecyclerView parent, <span class="keyword">int</span> pos, <span class="keyword">int</span> spanCount,</span></span></div><div class="line">            <span class="keyword">int</span> childCount)</div><div class="line">    &#123;</div><div class="line">        LayoutManager layoutManager = parent.getLayoutManager();</div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            childCount = childCount - childCount % spanCount;</div><div class="line">            <span class="keyword">if</span> (pos &gt;= childCount)<span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> StaggeredGridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> orientation = ((StaggeredGridLayoutManager) layoutManager)</div><div class="line">                    .getOrientation();</div><div class="line">            <span class="comment">// StaggeredGridLayoutManager 且纵向滚动</span></div><div class="line">            <span class="keyword">if</span> (orientation == StaggeredGridLayoutManager.VERTICAL)</div><div class="line">            &#123;</div><div class="line">                childCount = childCount - childCount % spanCount;</div><div class="line">                <span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">                <span class="keyword">if</span> (pos &gt;= childCount)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            <span class="comment">// StaggeredGridLayoutManager 且横向滚动</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">                <span class="keyword">if</span> ((pos + <span class="number">1</span>) % spanCount == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition,</span></span></div><div class="line">            RecyclerView parent)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> spanCount = getSpanCount(parent);</div><div class="line">        <span class="keyword">int</span> childCount = parent.getAdapter().getItemCount();</div><div class="line">        <span class="keyword">if</span> (isLastRaw(parent, itemPosition, spanCount, childCount))<span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">        &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLastColum(parent, itemPosition, spanCount, childCount))<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">        &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(),</div><div class="line">                    mDivider.getIntrinsicHeight());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要在getItemOffsets方法中，去判断如果是最后一行，则不需要绘制底部；如果是最后一列，则不需要绘制右边，整个判断也考虑到了StaggeredGridLayoutManager的横向和纵向，所以稍稍有些复杂。最重要还是去理解，如何绘制什么的不重要。一般如果仅仅是希望有空隙，还是去设置item的margin方便。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/gridview.png" width="300dp" height="500dp"></p>
<h5 id="StaggeredGridLayoutMnager"><a href="#StaggeredGridLayoutMnager" class="headerlink" title="StaggeredGridLayoutMnager"></a>StaggeredGridLayoutMnager</h5><p>瀑布流式的布局，其实他可以实现GridLayoutManager一样的功能，仅仅按照下列代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mRecyclerView.setLayoutManager(new GridLayoutManager(this,4));</span></div><div class="line">   mRecyclerView.setLayoutManager(<span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">4</span>,        StaggeredGridLayoutManager.VERTICAL));</div></pre></td></tr></table></figure>
<p>这两种写法显示的效果是一致的，但是注意StaggeredGridLayoutManager构造的第二个参数传一个orientation，如果传入的是StaggeredGridLayoutManager.VERTICAL代表有多少列；那么传入的如果是StaggeredGridLayoutManager.HORIZONTAL就代表有多少行，比如本例如果改为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mRecyclerView.setLayoutManager(<span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">4</span>,</div><div class="line">        StaggeredGridLayoutManager.HORIZONTAL));</div></pre></td></tr></table></figure>
<p>可以看到，固定为4行，变成了左右滑动。有一点需要注意，如果是横向的时候，item的宽度需要注意去设置，毕竟横向的宽度没有约束了，应为控件可以横向滚动了。<br>如果你需要一样横向滚动的GridView，那么恭喜你。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/hor_gridview.gif"></p>
<h5 id="用RecyclerView实现瀑布流"><a href="#用RecyclerView实现瀑布流" class="headerlink" title="用RecyclerView实现瀑布流"></a>用RecyclerView实现瀑布流</h5><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/pull.png" width="300dp" height="500dp"></p>
<p>只要使用StaggeredGridLayoutManager我们就已经实现了，只是上面的item布局我们使用了固定的高度，下面我们仅仅在适配器的onBindViewHolder方法中为我们的item设置个随机的高度</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mHeights = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDatas.size(); i++) &#123;</div><div class="line">           mHeights.add((<span class="keyword">int</span>) (<span class="number">100</span> + Math.random() * <span class="number">300</span>));    <span class="comment">//产生100-400的随机高度</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(PullViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">       ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();</div><div class="line">       lp.height=mHeights.get(position);</div><div class="line">       holder.itemView.setLayoutParams(lp);          <span class="comment">//设置item的高度</span></div><div class="line">       holder.tv.setText(mDatas.get(position));</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="ItemAnimator"><a href="#ItemAnimator" class="headerlink" title="ItemAnimator"></a>ItemAnimator</h4><p>ItemAnimator也是一个抽象类，好在系统为我们提供了一种默认的实现类，期待系统多<br>添加些默认的实现。</p>
<p>借助默认的实现，当Item添加和移除的时候，添加动画效果很简单:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置item动画</span></div><div class="line">mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</div></pre></td></tr></table></figure>
<p>注意，这里更新数据集不是用adapter.notifyDataSetChanged()而是<br>notifyItemInserted(position)与notifyItemRemoved(position)<br>否则没有动画效果。 </p>
<p>上述为adapter中添加了两个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        mDatas.add(position, <span class="string">"Insert One"</span>);</div><div class="line">        notifyItemInserted(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeData</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            mDatas.remove(position);</div><div class="line">        notifyItemRemoved(position);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Activity中点击MenuItem触发：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span></span></div><div class="line">&#123;</div><div class="line">    getMenuInflater().inflate(R.menu.main, menu);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId())</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">case</span> R.id.id_action_add:</div><div class="line">        mAdapter.addData(<span class="number">1</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> R.id.id_action_delete:</div><div class="line">        mAdapter.removeData(<span class="number">1</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/pull_animator.gif"><br>当然了只提供了一种动画，那么我们肯定可以去自定义各种nice的动画效果。 </p>
<p>高兴的是，github上已经有很多类似的项目了，这里我们直接引用下：RecyclerViewItemAnimators，大家自己下载查看。 </p>
<p>提供了SlideInOutLeftItemAnimator,SlideInOutRightItemAnimator,<br>SlideInOutTopItemAnimator,SlideInOutBottomItemAnimator等动画效果。</p>
<h4 id="Click-and-LongClick"><a href="#Click-and-LongClick" class="headerlink" title="Click and LongClick"></a>Click and LongClick</h4><p>不过一个挺郁闷的地方就是，系统没有提供ClickListener和LongClickListener。</p>
<p>不过我们也可以自己去添加，只是会多了些代码而已。 </p>
<p>实现的方式比较多，你可以通过mRecyclerView.addOnItemTouchListener去监听然后去判断手势，<br>当然你也可以通过adapter中自己去提供回调，这里我们选择后者，前者的方式，大家有兴趣自己去实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PullAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">PullViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemClickListener</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClickListener</span><span class="params">(View view,<span class="keyword">int</span> position)</span></span>;</div><div class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">onItemLongClickListener</span><span class="params">(View view,<span class="keyword">int</span> position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ItemClickListener mItemClickListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(ItemClickListener itemClickListener)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mItemClickListener=itemClickListener;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> PullViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">        ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();</div><div class="line">        lp.height=mHeights.get(position);</div><div class="line">        holder.itemView.setLayoutParams(lp);</div><div class="line">        holder.tv.setText(mDatas.get(position));</div><div class="line">        <span class="keyword">if</span>(mItemClickListener != <span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">int</span> pos=holder.getLayoutPosition();       <span class="comment">//这个位置position注意</span></div><div class="line">                    mItemClickListener.onItemClickListener(holder.itemView,pos);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            holder.itemView.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">int</span> pos=holder.getLayoutPosition();</div><div class="line">                    <span class="keyword">return</span>  mItemClickListener.onItemLongClickListener(holder.itemView,pos);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在Activity中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">adapter.setOnItemClickListener(<span class="keyword">new</span> PullAdapter.ItemClickListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClickListener</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">              Toast.makeText(PullActivity.<span class="keyword">this</span>,<span class="string">"Click"</span>+position,Toast.LENGTH_SHORT).show();</div><div class="line">          &#125;</div><div class="line">	</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onItemLongClickListener</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">              Toast.makeText(PullActivity.<span class="keyword">this</span>,<span class="string">"LongClick"</span>+position,Toast.LENGTH_SHORT).show();</div><div class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>adapter中自己定义了个接口，然后在onBindViewHolder中去为holder.itemView去设置相应<br>的监听最后回调我们设置的监听。</p>
<p>最后别忘了给item添加一个drawable:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;selector xmlns:android="http://schemas.android.com/apk/res/android" &gt;</div><div class="line">    &lt;item android:state_pressed="true" android:drawable="@color/color_item_press"&gt;&lt;/item&gt;</div><div class="line">    &lt;item android:drawable="@color/color_item_normal"&gt;&lt;/item&gt;</div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到此我们基本介绍了RecylerView常见用法，包含了：</p>
<p><li>系统提供了几种LayoutManager的使用；</li></p>
<p><li>如何通过自定义ItemDecoration去设置分割线，或者一些你想作为分隔的drawable，注意这里 </li></p>
<p><li>巧妙的使用了系统的listDivider属性，你可以尝试添加使用divider和dividerHeight属性。</li></p>
<p><li>如何使用ItemAnimator为RecylerView去添加Item移除、添加的动画效果。</li></p>
<p><li>介绍了如何添加ItemClickListener与ItemLongClickListener。</li></p>
<p>可以看到RecyclerView可以实现：</p>
<p><li>ListView的功能</li></p>
<p><li>GridView的功能</li></p>
<p><li>横向ListView的功能，参考Android 自定义RecyclerView 实现真正的Gallery效果</li></p>
<p><li>横向ScrollView的功能</li></p>
<p><li>瀑布流效果</li></p>
<p><li>便于添加Item增加和移除动画</li></p>
<p>通过简单改变下LayoutManager，就可以产生不同的效果，那么我们可以根据手机屏幕的宽度去动态设置LayoutManager，屏幕宽度一般的，显示为ListView；宽度稍大的显示两列的GridView或者瀑布流（或者横纵屏幕切换时变化，有点意思~）；显示的列数和宽度成正比。甚至某些特殊屏幕，让其横向滑动~~再选择一个nice的动画效果，相信这种插件式的编码体验一定会让你迅速爱上RecyclerView。</p>
<p>最后说明：</p>
<p>此文章转载于：<br><a href="http://blog.csdn.net/lmj623565791/article/details/45059587" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/45059587</a></p>
<p>本文出自:<a href="
http://blog.csdn.net/lmj623565791" target="_blank" rel="external">【张鸿洋的博客】</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android沉浸式通知栏的一个开源库SystemBarTint的使用]]></title>
      <url>http://yoursite.com/2015/10/10/Android%E6%B2%89%E6%B5%B8%E5%BC%8F%E9%80%9A%E7%9F%A5%E6%A0%8F%E7%9A%84%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E5%BA%93SystemBarTint%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="一、导入："><a href="#一、导入：" class="headerlink" title="一、导入："></a>一、导入：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.readystatesoftware.systembartint:systembartint:1.0.3'</span></div></pre></td></tr></table></figure>
<h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>沉浸式是androd4.4出现的，所以android系统必须是4.4之后的系统才会有此效果</p>
<p>android5.0之后，有一些组件设置主题之后，就会有沉浸式的效果。</p>
<p>这是官方给的例子，确实是这么用</p>
<h4 id="使用一：-（设置颜色）"><a href="#使用一：-（设置颜色）" class="headerlink" title="使用一： （设置颜色）"></a>使用一： （设置颜色）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatchActionBarActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123; </div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_match_actionbar);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">			setTranslucentStatus(<span class="keyword">true</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		SystemBarTintManager tintManager = <span class="keyword">new</span> SystemBarTintManager(<span class="keyword">this</span>);</div><div class="line">		tintManager.setStatusBarTintEnabled(<span class="keyword">true</span>);</div><div class="line">		tintManager.setStatusBarTintResource(R.color.statusbar_bg);<span class="comment">//通知栏所需颜色</span></div><div class="line">           setTranslucentStatus(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@TargetApi</span>(<span class="number">19</span>) </div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTranslucentStatus</span><span class="params">(<span class="keyword">boolean</span> on)</span> </span>&#123;</div><div class="line">		Window win = getWindow();</div><div class="line">		WindowManager.LayoutParams winParams = win.getAttributes();</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;</div><div class="line">		<span class="keyword">if</span> (on) &#123;</div><div class="line">			winParams.flags |= bits;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			winParams.flags &amp;= ~bits;</div><div class="line">		&#125;</div><div class="line">		win.setAttributes(winParams);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用二：（设置图片）"><a href="#使用二：（设置图片）" class="headerlink" title="使用二：（设置图片）"></a>使用二：（设置图片）</h4><figure class="highlight java"><figcaption><span>setSystemBarTintDrawable(getResources().getDrawable(R.drawable.sr_primary));</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setSystemBarTintDrawable</span><span class="params">(Drawable tintDrawable)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">           SystemBarTintManager mTintManager = <span class="keyword">new</span> SystemBarTintManager(<span class="keyword">this</span>);</div><div class="line">           <span class="keyword">if</span> (tintDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">               mTintManager.setStatusBarTintEnabled(<span class="keyword">true</span>);</div><div class="line">               mTintManager.setTintDrawable(tintDrawable);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               mTintManager.setStatusBarTintEnabled(<span class="keyword">false</span>);</div><div class="line">               mTintManager.setTintDrawable(<span class="keyword">null</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">	</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[进入 Material Design时代（一）之design包]]></title>
      <url>http://yoursite.com/2015/10/10/%E8%BF%9B%E5%85%A5-Material-Design%E6%97%B6%E4%BB%A3%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bdesign%E5%8C%85/</url>
      <content type="html"><![CDATA[<h3 id="一、导入"><a href="#一、导入" class="headerlink" title="一、导入"></a>一、导入</h3><p>导入design包：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"> 	compile 'com.android.support:design:23.0.1'</div><div class="line">```		</div><div class="line"></div><div class="line">### 二、主要使用组件</div><div class="line"></div><div class="line">&lt;h3&gt;AppBarlayout:&lt;/h3&gt; </div><div class="line"></div><div class="line">AppBarLayout是继承LinearLayout实现的一个ViewGroup容器组件，它是为了Material Design设计的App Bar,支持手势滑动操作。</div><div class="line"></div><div class="line">默认的AppBarLayout是垂直方向的，它的作用是把AppBarLayout包裹的内容都作为AppBar。</div><div class="line"></div><div class="line">&lt;b&gt;常用效果是：将Toolbar 和Tablayout的组合部分共同构成 AppBar的效果。&lt;/b&gt;</div><div class="line"></div><div class="line">&lt;b&gt;注意：&lt;/b&gt;AppBarLayout必须作为Toolbar的父布局容器</div><div class="line"></div><div class="line">AppBarLayout是支持手势滑动效果的，不过的跟CoordinatorLayout配合使用</div><div class="line">&lt;img src="http://7xl32g.com1.z0.glb.clouddn.com/appbarlayout.png"&gt;&lt;/img&gt;</div><div class="line"></div><div class="line">&lt;h3&gt;Coordinatorlayout:&lt;/h3&gt;</div><div class="line"></div><div class="line">CoordinatorLayout是一个增强型的FrameLayout。它的作用有两个：</div><div class="line"></div><div class="line">&lt;li&gt;1.作为一个布局的根布局 </div><div class="line"></div><div class="line">&lt;li&gt;2.最后一个为子视图之间相互协调手势效果的一个协调布局</div><div class="line"></div><div class="line">布局文件：</div><div class="line"></div><div class="line">```java</div><div class="line">	&lt;android.support.design.widget.CoordinatorLayout</div><div class="line">        xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">	    xmlns:app="http://schemas.android.com/apk/res-auto"</div><div class="line">	    android:id="@+id/main_content"</div><div class="line">	    android:layout_width="match_parent"</div><div class="line">	    android:layout_height="match_parent"&gt;</div><div class="line">	</div><div class="line">	    &lt;android.support.design.widget.AppBarLayout</div><div class="line">	        android:id="@+id/appbar"</div><div class="line">	        android:layout_width="match_parent"</div><div class="line">	        android:layout_height="wrap_content"</div><div class="line">	        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"&gt;</div><div class="line">	</div><div class="line">	        &lt;android.support.v7.widget.Toolbar</div><div class="line">	            android:id="@+id/toolbar"</div><div class="line">	            android:layout_width="match_parent"</div><div class="line">	            android:layout_height="?attr/actionBarSize"</div><div class="line">	            android:background="?attr/colorPrimary"</div><div class="line">	            app:popupTheme="@style/ThemeOverlay.AppCompat.Light"</div><div class="line">	            app:layout_scrollFlags="scroll|enterAlways" /&gt;</div><div class="line">	</div><div class="line">	        &lt;android.support.design.widget.TabLayout</div><div class="line">	            android:id="@+id/tabs"</div><div class="line">	            android:layout_width="match_parent"</div><div class="line">	            android:layout_height="wrap_content" /&gt;</div><div class="line">	</div><div class="line">	    &lt;/android.support.design.widget.AppBarLayout&gt;</div><div class="line">	</div><div class="line">	    &lt;android.support.v4.view.ViewPager</div><div class="line">	        android:id="@+id/viewpager"</div><div class="line">	        android:layout_width="match_parent"</div><div class="line">	        android:layout_height="match_parent"</div><div class="line">	        app:layout_behavior="@string/appbar_scrolling_view_behavior" /&gt;</div><div class="line">	</div><div class="line">	    &lt;android.support.design.widget.FloatingActionButton</div><div class="line">	        android:id="@+id/fab"</div><div class="line">	        android:layout_width="wrap_content"</div><div class="line">	        android:layout_height="wrap_content"</div><div class="line">	        android:layout_gravity="end|bottom"</div><div class="line">	        android:layout_margin="@dimen/fab_margin"</div><div class="line">	        android:src="@drawable/ic_done" /&gt;</div><div class="line">	</div><div class="line">	&lt;/android.support.design.widget.CoordinatorLayout&gt;</div></pre></td></tr></table></figure>
<p>Acitvity:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">setSupportActionBar(toolbar);</div><div class="line">	</div><div class="line"><span class="keyword">final</span> ActionBar ab = getSupportActionBar();</div><div class="line">ab.setHomeAsUpIndicator(R.drawable.ic_menu);</div><div class="line"> ab.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">   TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class="line">   tabLayout.setupWithViewPager(viewPager);    <span class="comment">//design包自带的TabLayout自带和viewpager关联的方法</span></div></pre></td></tr></table></figure>
<p>效果：<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/演示coordinatorLayout.gif"></p>
<p>代码介绍：</p>
<h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>由于CoordinatorLayout是FrameLayout布局，我们可以通过<br><code avrasm="" class="hljs">android:layout_gravity=bottom|end</code><br>属性来控制组件在整个布局中的位置，比如上面效果中的FAB就是通过android:layout_gravity=”bottom|end”来确定 FAB的位置在底端的最右边的位置。</p>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>为了达到上面效果图的手势动画效果，我们必须做如下设置，通过app:layout_scrollFlags=”scroll|enterAlways” 属性来确定哪个组件是可滑动的</p>
<p>设置的layout_scrollFlags有如下几种选项：</p>
<p><li>scroll: 所有想滚动出屏幕的view都需要设置这个flag- 没有设置这个flag的view将被固定在屏幕顶部。</li></p>
<p><li>enterAlways: 这个flag让任意向下的滚动都会导致该view变为可见，启用快速“返回模式”。</li></p>
<p><li>enterAlwaysCollapsed: 当你的视图已经设置minHeight属性又使用此标志时，你的视图只能已最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。</li></p>
<p><li>exitUntilCollapsed: 滚动退出屏幕，最后折叠在顶端。</li></p>
<p>我们上面的布局中 给Toolbar设置了app:layout_scrollFlags属性，因此，Toolbar是可以滚动出屏幕，且向下滚动有可以出现。</p>
<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p>为了使得Toolbar可以滑动，我们必须还得有个条件，就是CoordinatorLayout布局下包裹一个可以滑动的布局，比如 RecyclerView，ViewPager,NestedScrollView(经过测试，ListView，ScrollView不支持)具有滑动效果的组件。并且给这些组件设置如下属性来告诉CoordinatorLayout，该组件是带有滑动行为的组件，然后CoordinatorLayout在接受到滑动时会通知AppBarLayout 中可滑动的Toolbar可以滑出屏幕了。</p>
<pre><code>app:layout_behavior=@string/appbar_scrolling_view_behavior
</code></pre><h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h4><p>为了使得Toolbar有滑动效果，必须做到如下三点：</p>
<p><li>CoordinatorLayout必须作为整个布局的父布局容器。</li></p>
<p><li>给需要滑动的组件设置 app:layout_scrollFlags=”scroll|enterAlways” 属性。 (ToolBar)</li></p>
<p><li>给你的可滑动的组件，也就是RecyclerView、ViewPager或者 NestedScrollView 设置如下属性：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:layout_behavior=<span class="meta">@string</span>/appbar_scrolling_view_behavior</div></pre></td></tr></table></figure>
<h3>CollapsingToolbarLayout:</h3>

<p>CollapsingToolbarLayout包裹 Toolbar 的时候提供一个可折叠的 Toolbar，一般作为AppbarLayout的子视图使用。</p>
<p>CollapsingToolbarLayout 提供以下属性和方法是用：</p>
<ol>
<li><p>Collapsing title：ToolBar的标题，当CollapsingToolbarLayout全屏没有折叠时，title显示的是大字体，在折叠的过程中，title不断变小到一定大小的效果。你可以调用setTitle(CharSequence)方法设置title。</p>
</li>
<li><p>Content scrim：ToolBar被折叠到顶部固定时候的背景，你可以调用setContentScrim(Drawable)方法改变背景或者 在属性中使用 app:contentScrim=?attr/colorPrimary来改变背景。</p>
</li>
<li><p>Status bar scrim：状态栏的背景，调用方法setStatusBarScrim(Drawable)。还没研究明白，不过这个只能在Android5.0以上系统有效果。</p>
</li>
<li><p>Parallax scrolling children：CollapsingToolbarLayout滑动时，子视图的视觉差，可以通过属性app:layout_collapseParallaxMultiplier=0.6改变。</p>
</li>
<li><p>CollapseMode ：子视图的折叠模式，在子布局中使用。有两种 “pin”：固定模式，在折叠的时候最后固定在顶端；“parallax”：视差模式，在折叠的时候会有个视差折叠的效果。我们可以在布局中使用属性app:layout_collapseMode=parallax来改变。</p>
<p>效果：<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/CollapsingToolbarLayout.gif"></p>
</li>
</ol>
<p>布局文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.CoordinatorLayout</div><div class="line">    xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:app="http://schemas.android.com/apk/res-auto"</div><div class="line">    android:id="@+id/main_content"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:fitsSystemWindows="true"&gt;</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.AppBarLayout</div><div class="line">        android:id="@+id/appbar"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="@dimen/detail_backdrop_height"</div><div class="line">        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"</div><div class="line">        android:fitsSystemWindows="true"&gt;</div><div class="line"></div><div class="line">        &lt;android.support.design.widget.CollapsingToolbarLayout</div><div class="line">            android:id="@+id/collapsing_toolbar"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="match_parent"</div><div class="line">            app:layout_scrollFlags="scroll|exitUntilCollapsed"</div><div class="line">            android:fitsSystemWindows="true"</div><div class="line">            app:contentScrim="?attr/colorPrimary"</div><div class="line">            app:expandedTitleMarginStart="48dp"</div><div class="line">            app:expandedTitleMarginEnd="64dp"&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/backdrop"</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="match_parent"</div><div class="line">                android:scaleType="centerCrop"</div><div class="line">                android:fitsSystemWindows="true"</div><div class="line">                app:layout_collapseMode="parallax" /&gt;</div><div class="line"></div><div class="line">            &lt;android.support.v7.widget.Toolbar</div><div class="line">                android:id="@+id/toolbar"</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="?attr/actionBarSize"</div><div class="line">                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"</div><div class="line">                app:layout_collapseMode="pin" /&gt;</div><div class="line"></div><div class="line">        &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v4.widget.NestedScrollView</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        app:layout_behavior="@string/appbar_scrolling_view_behavior"&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="match_parent"</div><div class="line">            android:orientation="vertical"</div><div class="line">            android:paddingTop="24dp"&gt;</div><div class="line"></div><div class="line">            &lt;android.support.v7.widget.CardView</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_margin="@dimen/card_margin"&gt;</div><div class="line"></div><div class="line">                &lt;LinearLayout</div><div class="line">                    style="@style/Widget.CardContent"</div><div class="line">                    android:layout_width="match_parent"</div><div class="line">                    android:layout_height="wrap_content"&gt;</div><div class="line"></div><div class="line">                    &lt;TextView</div><div class="line">                        android:layout_width="match_parent"</div><div class="line">                        android:layout_height="wrap_content"</div><div class="line">                        android:text="Info"</div><div class="line">                        android:textAppearance="@style/TextAppearance.AppCompat.Title" /&gt;</div><div class="line"></div><div class="line">                    &lt;TextView</div><div class="line">                        android:layout_width="match_parent"</div><div class="line">                        android:layout_height="wrap_content"</div><div class="line">                        android:text="@string/cheese_ipsum" /&gt;</div><div class="line"></div><div class="line">                &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">            &lt;/android.support.v7.widget.CardView&gt;</div><div class="line"></div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.v4.widget.NestedScrollView&gt;</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.FloatingActionButton</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        app:layout_anchor="@id/appbar"</div><div class="line">        app:layout_anchorGravity="bottom|right|end"</div><div class="line">        android:src="@drawable/ic_discuss"</div><div class="line">        android:layout_margin="@dimen/fab_margin"</div><div class="line">        android:clickable="true"/&gt;</div><div class="line"></div><div class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div></pre></td></tr></table></figure>
<p>Activity:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">setSupportActionBar(toolbar);</div><div class="line">getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">	</div><div class="line">CollapsingToolbarLayout collaspingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);</div><div class="line">collaspingToolbar.setTitle(cheeseName);</div><div class="line">   ImageView imageview = (ImageView) findViewById(R.id.backdrop);</div><div class="line">   Glide.with(<span class="keyword">this</span>).load(Cheeses.getRandomCheeseDrawable()).centerCrop().into(imageview);</div></pre></td></tr></table></figure>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>CollapsingToolbarLayout主要是提供一个可折叠的Toolbar容器，对容器中的不同视图设置layout_collapseMode折叠模式，来达到不同的折叠效果。</p>
<p>1.Toolbar 的高度layout_height必须固定，不能 “wrap_content”，否则Toolbar不会滑动，也没有折叠效果。</p>
<p>2.为了能让FloatingActionButton也能折叠且消失出现，我们必须给FAB设置锚点属性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;code class="hljs" perl=""&gt;app:layout_anchor=@id/appbar&lt;/code&gt;</div></pre></td></tr></table></figure>
<p>意思是FAB浮动按钮显示在哪个布局区域。<br>且设置当前锚点的位置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:layout_anchorGravity=”bottom|end|right”</div></pre></td></tr></table></figure>
<p>意思FAB浮动按钮在这个布局区域的具体位置。<br>两个属性共同作用才是的FAB 浮动按钮也能折叠消失，出现。</p>
<p>3.给需要有折叠效果的组件设置 layout_collapseMode属性。</p>
<p></p><h3>NavigationView:</h3><br>用于侧滑菜单中的menu布局。之前Google在V4包中推出自己的 DrawerLayout作为抽屉侧滑菜单，其实这次谷歌只是将之前的ListView布局替换成NavigationView了。简化了之前ListView写适配器的繁琐。<p></p>
<p>效果：<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/navigationView.png"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:app="http://schemas.android.com/apk/res-auto"</div><div class="line">    android:id="@+id/drawer_layout"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:fitsSystemWindows="true"&gt;</div><div class="line"></div><div class="line">    &lt;include layout="@layout/include_list_viewpager"/&gt;   //主界面布局</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.NavigationView        //侧滑菜单布局</div><div class="line">        android:id="@+id/nav_view"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        android:layout_gravity="start"</div><div class="line">        android:fitsSystemWindows="true"</div><div class="line">        app:headerLayout="@layout/nav_header"         //侧滑顶部的头布局</div><div class="line">        app:menu="@menu/drawer_view"/&gt;                //侧滑菜单项</div><div class="line"></div><div class="line">&lt;/android.support.v4.widget.DrawerLayout&gt;</div></pre></td></tr></table></figure>
<p>其中NavigationView 中的 android:layout_gravity=”start” 属性来控制抽屉菜单从哪边滑出，一般“start ”从左边滑出，“end”从右边滑出。</p>
<p>这里最主要的两个属性分别是：</p>
<p>1.app:headerLayout: 给NavigationView添加头部布局</p>
<p>2.app：menu：给NavigationView添加menu菜单布局</p>
<p>nav_header.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="192dp"</div><div class="line">    android:background="?attr/colorPrimaryDark"</div><div class="line">    android:padding="16dp"</div><div class="line">    android:theme="@style/ThemeOverlay.AppCompat.Dark"</div><div class="line">    android:orientation="vertical"</div><div class="line">    android:gravity="bottom"&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:text="Username"</div><div class="line">        android:textAppearance="@style/TextAppearance.AppCompat.Body1"/&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>drawer_view.xml (menu布局)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;menu xmlns:android="http://schemas.android.com/apk/res/android"&gt;</div><div class="line"></div><div class="line">    &lt;group android:checkableBehavior="single"&gt;</div><div class="line">        &lt;item</div><div class="line">            android:id="@+id/nav_home"</div><div class="line">            android:icon="@drawable/ic_dashboard"</div><div class="line">            android:title="Home" /&gt;</div><div class="line">        &lt;item</div><div class="line">            android:id="@+id/nav_messages"</div><div class="line">            android:icon="@drawable/ic_event"</div><div class="line">            android:title="Messages" /&gt;</div><div class="line">        &lt;item</div><div class="line">            android:id="@+id/nav_friends"</div><div class="line">            android:icon="@drawable/ic_headset"</div><div class="line">            android:title="Friends" /&gt;</div><div class="line">        &lt;item</div><div class="line">            android:id="@+id/nav_discussion"</div><div class="line">            android:icon="@drawable/ic_forum"</div><div class="line">            android:title="Discussion" /&gt;</div><div class="line">    &lt;/group&gt;</div><div class="line"></div><div class="line">    &lt;item android:title="Sub items"&gt;</div><div class="line">        &lt;menu&gt;</div><div class="line">            &lt;item</div><div class="line">                android:icon="@drawable/ic_dashboard"</div><div class="line">                android:title="Sub item 1" /&gt;</div><div class="line">            &lt;item</div><div class="line">                android:icon="@drawable/ic_forum"</div><div class="line">                android:title="Sub item 2" /&gt;</div><div class="line">        &lt;/menu&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line"></div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure>
<h4 id="java代码使用："><a href="#java代码使用：" class="headerlink" title="java代码使用："></a>java代码使用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initNavigationView</span><span class="params">()</span></span>&#123;</div><div class="line">        navigationView = (NavigationView) findViewById(R.id.navigationView);</div><div class="line">        drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        <span class="comment">//设置侧滑菜单选择监听事件</span></div><div class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</div><div class="line">                menuItem.setChecked(<span class="keyword">true</span>);</div><div class="line">                <span class="comment">//关闭抽屉侧滑菜单</span></div><div class="line">                drawerLayout.closeDrawers();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (item.getItemId() == android.R.id.home)&#123;</div><div class="line">            <span class="comment">//打开抽屉侧滑菜单</span></div><div class="line">            drawerLayout.openDrawer(GravityCompat.START);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>关于NavigationView中item的字体颜色和icon选中状态颜色是去当前主题theme中的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;--正常状态下字体颜色和icon颜色--&gt;</div><div class="line">&lt;item name="android:textColorPrimary"&gt;@android:color/darker_gray&lt;/item&gt;</div><div class="line"></div><div class="line">&lt;--选中状态icon的颜色和字体颜色--&gt;</div><div class="line"> &lt;item name="colorPrimary"&gt;@color/accent_material_light&lt;/item&gt;&lt;/code&gt;</div></pre></td></tr></table></figure>
<p>当然你可以通过如下方法或者属性来改变这一状态：</p>
<p><li>setItemBackgroundResource(int)：给menu设置背景资源，对应的属性app:itemBackground </li></p>
<p><li>setItemIconTintList(ColorStateList)：给menu的icon设置颜色，对应的属性app:itemIconTint</li></p>
<p><li>setItemTextColor(ColorStateList)：给menu的item设置字体颜色，对应的属性app:itemTextColor</li></p>
<p></p><h3>SnackBar:</h3><br>当Snackbar在显示的时候，往往出现在屏幕的底部。为了给Snackbar留出空间，浮动操作按钮需要向上移动。<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/snackbar.gif"><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                Snackbar.make(view, <span class="string">"Here's a Snackbar"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>SnackBar可用于代替Toast弹出再按一次返回的情况。</p>
<p></p><h3><a href="https://github.com/chrisbanes/cheesesquare" target="_blank" rel="external">完整代码地址</a><p></p>
</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio插件GsonFormat快速实现JavaBean]]></title>
      <url>http://yoursite.com/2015/10/09/Android-Studio%E6%8F%92%E4%BB%B6GsonFormat%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0JavaBean/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>1.Android studio File-&gt;Settings..-&gt;Plugins–&gt;Browse repositores..搜索GsonFormat</p>
<p>2.安装插件,重启android studio</p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>1.下载GsonFormat.jar ;</p>
<p>2.Android studio File-&gt;Settings..-&gt;Plugins –&gt;install plugin from disk..导入下载GsonFormat.jar</p>
<p>3.重启android studio  </p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1-新建一个bean的实体类"><a href="#1-新建一个bean的实体类" class="headerlink" title="1.新建一个bean的实体类"></a>1.新建一个bean的实体类</h3><h3 id="2-Code-–-gt-Generate-–-gt-GsonFormat-或者使用Generate的快捷键-Alt-Insert"><a href="#2-Code-–-gt-Generate-–-gt-GsonFormat-或者使用Generate的快捷键-Alt-Insert" class="headerlink" title="2.Code –&gt; Generate –&gt;GsonFormat 或者使用Generate的快捷键 Alt+Insert"></a>2.Code –&gt; Generate –&gt;GsonFormat 或者使用Generate的快捷键 Alt+Insert</h3><h3 id="3-将写好的简单json格式的粘贴上去，ok就行了"><a href="#3-将写好的简单json格式的粘贴上去，ok就行了" class="headerlink" title="3.将写好的简单json格式的粘贴上去，ok就行了"></a>3.将写好的简单json格式的粘贴上去，ok就行了</h3><p>简单的实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"name"</span>: <span class="string">"小名"</span>,</div><div class="line"><span class="string">"gender"</span>: <span class="string">"man"</span>,</div><div class="line"><span class="string">"age"</span>: <span class="number">15</span>,</div><div class="line"><span class="string">"height"</span>: <span class="string">"160cm"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>复杂的实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">“name”: “王五”, </div><div class="line">“gender”: “man”, </div><div class="line">“age”: <span class="number">15</span>, </div><div class="line">“height”: “<span class="number">140</span>cm”, </div><div class="line">“addr”: &#123; </div><div class="line">“province”: “fujian”, </div><div class="line">“city”: “quanzhou”, </div><div class="line">“code”: “<span class="number">300000</span>” </div><div class="line">&#125;, </div><div class="line">“hobby”: [ </div><div class="line">&#123; </div><div class="line">“name”: “billiards”, </div><div class="line">“code”: “<span class="number">1</span>” </div><div class="line">&#125;, </div><div class="line">&#123; </div><div class="line">“name”: “computerGame”, </div><div class="line">“code”: “<span class="number">2</span>” </div><div class="line">&#125; </div><div class="line">] </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jsoup抓取网页数据]]></title>
      <url>http://yoursite.com/2015/10/09/Jsoup%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h3 id="jsoup使用文档"><a href="#jsoup使用文档" class="headerlink" title="jsoup使用文档"></a><a href="http://www.open-open.com/jsoup/" target="_blank" rel="external">jsoup使用文档</a></h3><h3 id="Android中使用，首先导入jsoup-jar包"><a href="#Android中使用，首先导入jsoup-jar包" class="headerlink" title="Android中使用，首先导入jsoup.jar包"></a>Android中使用，首先导入jsoup.jar包</h3><pre><code>compile &apos;org.jsoup:jsoup:1.8.3&apos;
</code></pre><h3 id="主要使用方法：还是得看使用文档。"><a href="#主要使用方法：还是得看使用文档。" class="headerlink" title="主要使用方法：还是得看使用文档。"></a>主要使用方法：还是得看使用文档。</h3><h4 id="获取指定数据，无非就是通过-id、class、tag-进行查找"><a href="#获取指定数据，无非就是通过-id、class、tag-进行查找" class="headerlink" title="获取指定数据，无非就是通过 id、class、tag 进行查找"></a>获取指定数据，无非就是通过 id、class、tag 进行查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Document doc = Jsoup.connect(<span class="string">"http://www.quwenlieqi.com/funny/"</span>).get();</div><div class="line">Elements ListDiv =doc.select(<span class="string">".excerpt"</span>);</div><div class="line"><span class="keyword">for</span> (Element element :ListDiv) &#123;</div><div class="line">      Elements links = element.getElementsByClass(<span class="string">"thumbnail"</span>);</div><div class="line">      <span class="keyword">for</span>(Element link : links)&#123;</div><div class="line">           String href=  link.attr(<span class="string">"href"</span>);</div><div class="line">           System.out.println(href.toString());</div><div class="line">                   &#125;	</div><div class="line">        ｝</div></pre></td></tr></table></figure>
<p>算了，总之就是（我喜欢使用getElementByClass()）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getElementsByClass(className);</div><div class="line">getElementsByTag(<span class="string">"a"</span>);</div><div class="line">getElementsById(idName);</div></pre></td></tr></table></figure>
<p>或者用 <b>doc.select(“<em>“)，element.select(“</em>“);</b></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如果通过id的话，*为#；</div><div class="line">如果通过class的话，*为.；</div><div class="line">如果通过tag的话，*为tag名</div></pre></td></tr></table></figure>
<p>下面举几个例子：(别人的例子 粘过来的)</p>
<h3 id="1，-定位"><a href="#1，-定位" class="headerlink" title="1， 定位"></a>1， 定位</h3><p>通过div的属性值，定位到html的div（块），即所需要内容对应的块。<br>示例代码如下：</p>
<pre><code>&lt;div class=&quot;content&quot;&gt; 
</code></pre><h3 id="2，-筛选数据"><a href="#2，-筛选数据" class="headerlink" title="2， 筛选数据"></a>2， 筛选数据</h3><p>a， 通过标签头，在div中继续筛选数据。可能会找到很多的数据，这里会用到循环。见eg1。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//eg1:解析百度音乐 </span></div><div class="line">           Document doc = Jsoup.connect(<span class="string">"http://list.mp3.baidu.com/top/singer/A.html"</span>).get(); </div><div class="line">           Element singerListDiv = doc.getElementsByAttributeValue(<span class="string">"class"</span>, <span class="string">"content"</span>).first(); </div><div class="line">           Elements links = singerListDiv.getElementsByTag(<span class="string">"a"</span>); </div><div class="line">            </div><div class="line">           <span class="keyword">for</span> (Element link: links) &#123; </div><div class="line">               String linkHref = link.attr(<span class="string">"href"</span>); </div><div class="line">               String linkText = link.text().trim(); </div><div class="line">               System.out.println(linkHref);  </div><div class="line">           &#125;</div></pre></td></tr></table></figure>
<p>b， 通过标签名，在div中筛选数据，选中此标签内的所有数据。见eg2</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//eg2:解析万年历 </span></div><div class="line">       Document doc = Jsoup.connect(<span class="string">"http://www.nongli.com/item4/index.asp?dt=2012-03-03"</span>).get(); </div><div class="line">       Element infoTable = doc.getElementsByAttributeValue(<span class="string">"class"</span>, <span class="string">"table002"</span>).first(); </div><div class="line">       Elements tableLineInfos = infoTable.select(<span class="string">"tr"</span>); </div><div class="line">       <span class="keyword">for</span> (Element lineInfo : tableLineInfos) &#123; </div><div class="line">           String lineInfoContent = lineInfo.select(<span class="string">"td"</span>).last().text().trim(); </div><div class="line">           System.out.println(<span class="string">"jsoup is :"</span> + lineInfoContent); </div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>c， 限定筛选条件。如果eg5</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//eg5:查找html元素 </span></div><div class="line">       File input = <span class="keyword">new</span> File(<span class="string">"/tmp/input.html"</span>); </div><div class="line">       Document doc = Jsoup.parse(input, <span class="string">"UTF-8"</span>, <span class="string">"http://www.oschina.net/"</span>); </div><div class="line">       Elements links = doc.select(<span class="string">"a[href]"</span>); <span class="comment">// 链接 </span></div><div class="line">       Elements pngs = doc.select(<span class="string">"img[src$=.png]"</span>); <span class="comment">// 所有 png 的图片 </span></div><div class="line">       Element masthead = doc.select(<span class="string">"div.masthead"</span>).first();<span class="comment">// div with class=masthead </span></div><div class="line">       Elements resultLinks = doc.select(<span class="string">"h3.r &gt; a"</span>); <span class="comment">// direct a after h3</span></div></pre></td></tr></table></figure>
<p>NOTE: <td colspan="2" class="l3">二月15日<br>壬辰年<br>癸卯月<br>丁卯日<br></td></p>
<p>此处不能直接单独获得三组数据，获得的是总的三个数据。可通过正则表达式分解</p>
<h3 id="3，-获取数据"><a href="#3，-获取数据" class="headerlink" title="3， 获取数据"></a>3， 获取数据</h3><pre><code>element.text()即可获得相关数据
</code></pre><h3 id="4-获取属性"><a href="#4-获取属性" class="headerlink" title="4.获取属性"></a>4.获取属性</h3><pre><code>element.attr(&quot;属性名&quot;);
</code></pre><h3 id="5-还有很多没有学习，回来用到了再添加"><a href="#5-还有很多没有学习，回来用到了再添加" class="headerlink" title="5.还有很多没有学习，回来用到了再添加"></a>5.还有很多没有学习，回来用到了再添加</h3><h3 id="plus-Jsoup有灵活的语法，比如通过class-value对指定div块，可通过select-div-value-找到，更多用法请参考文档！"><a href="#plus-Jsoup有灵活的语法，比如通过class-value对指定div块，可通过select-div-value-找到，更多用法请参考文档！" class="headerlink" title="plus: Jsoup有灵活的语法，比如通过class-value对指定div块，可通过select(div.value)找到，更多用法请参考文档！ "></a>plus: Jsoup有灵活的语法，比如通过class-value对指定div块，可通过select(div.value)找到，更多用法请<a href="http://www.open-open.com/jsoup/" target="_blank" rel="external">参考文档！ </a></h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android图像处理之Bitmap类]]></title>
      <url>http://yoursite.com/2015/08/17/Android%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B9%8BBitmap%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>Bitmap是Android系统中的图像处理的最重要类之一。用它可以获取图像文件信息，进行图像剪切、旋转、缩放等操作，并可以指定格式保存图像文件。</p>
<h3 id="一、Bitmap生成"><a href="#一、Bitmap生成" class="headerlink" title="一、Bitmap生成"></a>一、Bitmap生成</h3><h4 id="1-1-BitmapFactory-decode出Bitmap"><a href="#1-1-BitmapFactory-decode出Bitmap" class="headerlink" title="1.1 BitmapFactory decode出Bitmap"></a>1.1 BitmapFactory decode出Bitmap</h4><p> Bitmap实现在android.graphics包中。但是Bitmap类的构造函数是私有的，外面并不能实例化，只能是通过JNI实例化。这必然是 某个辅助类提供了创建Bitmap的接口，而这个类的实现通过JNI接口来实例化Bitmap的，这个类就是BitmapFactory。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/BitmapFactory&Options.gif">图一、BitmapFactory主要方法及Options选项</p>
<p>利用BitmapFactory可以从一个指定文件中，利用decodeFile()解出Bitmap；也可以定义的图片资源中，利用decodeResource()解出Bitmap。</p>
<h4 id="1-2-decode时的选项"><a href="#1-2-decode时的选项" class="headerlink" title="1.2 decode时的选项"></a>1.2 decode时的选项</h4><p>在使用方法decodeFile()/decodeResource()时，都可以指定一个BitmapFacotry.Options。</p>
<p>利用Options的下列属性，可以指定decode的选项：</p>
<ul><br><li>inPreferredConfig 指定decode到内存中，手机中所采用的编码，可选值定义在Bitmap.Config中。缺省值是ARGB_8888。<br><br></li><li>inJustDecodeBounds 如果设置为true，并不会把图像的数据完全解码，亦即decodeXyz()返回值为null，但是Options的outAbc中解出了图像的基本信息。<br><br></li><li>inSampleSize 设置decode时的缩放比例。<br></li></ul>

<p>利用Options的这些值就可以高效的得到一幅缩略图。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/BitmapFactory&decodeFile.gif">图二、BitmapFactory.decodeFile()</p>
<p>先设置inJustDecodeBounds= true，调用decodeFile()得到图像的基本信息[Step#2~4]；</p>
<p>利用图像的宽度（或者高度，或综合）以及目标的宽度，得到inSampleSize值，再设置inJustDecodeBounds= false，调用decodeFile()得到完整的图像数据[Step#5~8]。</p>
<p>先获取比例，再读入数据，如果欲读入大比例缩小的图，将显著的节约内容资源。有时候还会读入大量的缩略图，这效果就更明显了。</p>
<h3 id="二、利用Bitmap和Matrix实现图像变换"><a href="#二、利用Bitmap和Matrix实现图像变换" class="headerlink" title="二、利用Bitmap和Matrix实现图像变换"></a>二、利用Bitmap和Matrix实现图像变换</h3><p> Bitmap可以和Matrix结合实现图像的剪切、旋转、缩放等操作。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/Bitmap&Scale.gif">图三、Bitmap方法</p>
<p>用源Bitmap通过变换生成新的Bitmap的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmap</span><span class="params">(Bitmap source, <span class="keyword">int</span> x, <span class="keyword">int</span> y, intwidth, <span class="keyword">int</span> height, </span></span></div><div class="line">            Matrix m, <span class="keyword">boolean</span> filter) </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmap</span><span class="params">(Bitmap source, <span class="keyword">int</span> x, <span class="keyword">int</span> y, intwidth, <span class="keyword">int</span> height)</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createScaledBitmap</span><span class="params">(Bitmap src, <span class="keyword">int</span> dstWidth, </span></div><div class="line">            <span class="keyword">int</span> dstHeight,<span class="keyword">boolean</span> filter)</div></pre></td></tr></table></figure>
<p>第一个方法是最终的实现，后两种只是对第一种方法的封装。</p>
<p>第二个方法可以从源Bitmap中指定区域(x,y, width, height)中挖出一块来实现剪切；第三个方法可以把源Bitmap缩放为dstWidth x dstHeight的Bitmap。</p>
<p>设置Matrix的Rotate（通过setRotate()）或者Scale（通过setScale()），传入第一个方法，可实现旋转或缩放。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/Bitmap&Rotate.gif">图四、Bitmap实现旋转</p>
<h3 id="三、保存图像文件"><a href="#三、保存图像文件" class="headerlink" title="三、保存图像文件"></a>三、保存图像文件</h3><p>经过图像变换之后的Bitmap里的数据可以保存到图像压缩文件里（JPG/PNG）。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/Bitmap&Save.gif">图五、保存Bitmap数据到文件</p>
<p>这个操作过程中，Bitmap.compress()方法的参数format可设置JPEG或PNG格式；quality可选择压缩质量；fOut是输出流（OutputStream），这里的FileOutputStream是OutputStream的一个子类。</p>
<p>总结一下，本文介绍Bitmap的使用方法——用Bitmap实现图像文件的读取和写入，并用Bitmap实现图像的剪切、旋转和缩放变换。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ViewPager+Fragment 懒加载]]></title>
      <url>http://yoursite.com/2015/08/11/ViewPager-Fragment-%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h3 id="在ViewPager上做文章（原理上可行，但实际上未起作用）"><a href="#在ViewPager上做文章（原理上可行，但实际上未起作用）" class="headerlink" title="在ViewPager上做文章（原理上可行，但实际上未起作用）"></a>在ViewPager上做文章（原理上可行，但实际上未起作用）</h3><p>viewpager默认多加载一个page</p>
<p>重写viewPager,将v4包里的ViewPager代码复制粘贴到新定义的LazyViewPager  </p>
<p>只需该一个默认变量值 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_OFFSCREEN_PAGES = <span class="number">0</span>;   <span class="comment">//默认为1 改为0  即默认加载多加载0个</span></div></pre></td></tr></table></figure>
<h3 id="在Fragment上做文章"><a href="#在Fragment上做文章" class="headerlink" title="在Fragment上做文章"></a>在Fragment上做文章</h3><p>做应用开发的时候，一个Activity里面可能会以viewpager（或其他容器）与多个Fragment来组合使用，而如果每个fragment都需要去加载数据，或从本地加载，或从网络加载，那么在这个activity刚创建的时候就变成需要初始化大量资源。这样的结果，我们当然不会满意。那么，能不能做到当切换到这个fragment的时候，它才去初始化呢？</p>
<p><b>答案就在Fragment里的setUserVisibleHint这个方法里</b></p>
<p>该方法用于告诉系统，这个Fragment的UI是否是可见的。所以我们只需要继承Fragment并重写该方法，即可实现在fragment可见时才进行数据加载操作，即Fragment的懒加载。</p>
<h4 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h4><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/2015011308525158.gif"></p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line">	public abstract class BaseFragment extends Fragment &#123;  </div><div class="line">	    protected boolean isVisible;  </div><div class="line"></div><div class="line">        protected boolean isFirst=true;</div><div class="line">	    /** </div><div class="line">	     * 在这里实现Fragment数据的缓加载. </div><div class="line">	     * @param isVisibleToUser </div><div class="line">	     */  </div><div class="line">	    @Override  </div><div class="line">	    public void setUserVisibleHint(boolean isVisibleToUser) &#123;  </div><div class="line">	        super.setUserVisibleHint(isVisibleToUser);  </div><div class="line">	        if(getUserVisibleHint()) &#123;  </div><div class="line">	            isVisible = true;  </div><div class="line">	            onVisible();  </div><div class="line">	        &#125; else &#123;  </div><div class="line">	            isVisible = false;  </div><div class="line">	            onInvisible();  </div><div class="line">	        &#125;  </div><div class="line">	    &#125;  </div><div class="line">	  </div><div class="line">	    protected void onVisible()&#123;  </div><div class="line">			if(isFirst)&#123;</div><div class="line">				lazyLoad();  </div><div class="line">	            isFirst=false;</div><div class="line">			&#125;</div><div class="line">	        </div><div class="line">	    &#125;  </div><div class="line">	  </div><div class="line">	    protected abstract void lazyLoad();  </div><div class="line">	  </div><div class="line">	    protected void onInvisible()&#123;&#125;  </div><div class="line">	&#125;  </div><div class="line">``</div><div class="line">在LazyFragment，我增加了三个方法，一个是onVisiable，即fragment被设置为可见时调用，一个是onInvisible，即fragment被设置为不可见时调用。另外再写了一个lazyLoad的抽象方法，该方法在onVisible里面调用。你可能会想，为什么不在getUserVisibleHint里面就直接调用呢？</div><div class="line"></div><div class="line">### 使用</div><div class="line">我这么写是为了代码的复用。因为在fragment中，我们还需要创建视图（onCreateView()方法），可能还需要在它不可见时就进行其他小量的初始化操作（比如初始化需要通过AIDL调用的远程服务）等。而setUserVisibleHint是在onCreateView之前调用的，那么在视图未初始化的时候，在lazyLoad当中就使用的话，就会有空指针的异常。而把lazyLoad抽离成一个方法，那么它的子类就可以这样做：</div><div class="line"></div><div class="line">```java</div><div class="line">	public class CustomListFragment extends BaseFragment &#123;</div><div class="line"> </div><div class="line">    private static final String FRAGMENT_INDEX = fragment_index;</div><div class="line">    private final int FIRST_FRAGMENT = 0;</div><div class="line">    private final int SECOND_FRAGMENT = 1;</div><div class="line">    private final int THIRD_FRAGMENT = 2;</div><div class="line"> </div><div class="line">    private TextView mFragmentView;</div><div class="line"> </div><div class="line">    private int mCurIndex = -1;</div><div class="line">    /** 标志位，标志已经初始化完成 */</div><div class="line">    private boolean isPrepared;</div><div class="line">    /** 是否已被加载过一次，第二次就不再去请求数据了 */</div><div class="line">    private boolean mHasLoadedOnce;</div><div class="line"> </div><div class="line">    /**</div><div class="line">     * 创建新实例</div><div class="line">     * </div><div class="line">     * @param index</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static CustomListFragment newInstance(int index) &#123;</div><div class="line">        Bundle bundle = new Bundle();</div><div class="line">        bundle.putInt(FRAGMENT_INDEX, index);</div><div class="line">        CustomListFragment fragment = new CustomListFragment();</div><div class="line">        fragment.setArguments(bundle);</div><div class="line">        return fragment;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) &#123;</div><div class="line">        if(mFragmentView == null) &#123;</div><div class="line">            mFragmentView = (TextView) inflater.inflate(R.layout.fragment, container, false);</div><div class="line">            //获得索引值</div><div class="line">            Bundle bundle = getArguments();</div><div class="line">            if (bundle != null) &#123;</div><div class="line">                mCurIndex = bundle.getInt(FRAGMENT_INDEX);</div><div class="line">            &#125;</div><div class="line">            isPrepared = true;</div><div class="line">            lazyLoad();</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        //因为共用一个Fragment视图，所以当前这个视图已被加载到Activity中，必须先清除后再加入Activity</div><div class="line">        ViewGroup parent = (ViewGroup)mFragmentView.getParent();</div><div class="line">        if(parent != null) &#123;</div><div class="line">            parent.removeView(mFragmentView);</div><div class="line">        &#125;</div><div class="line">        return mFragmentView;</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    @Override</div><div class="line">    protected void lazyLoad() &#123;</div><div class="line">        if (!isPrepared || !isVisible || mHasLoadedOnce) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"> </div><div class="line">        new AsyncTask&lt;void, boolean=""&gt;() &#123;</div><div class="line"> </div><div class="line">            @Override</div><div class="line">            protected void onPreExecute() &#123;</div><div class="line">                super.onPreExecute();</div><div class="line">                //显示加载进度对话框</div><div class="line">                UIHelper.showDialogForLoading(getActivity(), 正在加载..., true);</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            @Override</div><div class="line">            protected Boolean doInBackground(Void... params) &#123;</div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(2000);</div><div class="line">                    //在这里添加调用接口获取数据的代码</div><div class="line">                    //doSomething()</div><div class="line">                &#125; catch (Exception e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                return true;</div><div class="line">            &#125;</div><div class="line"> </div><div class="line">            @Override</div><div class="line">            protected void onPostExecute(Boolean isSuccess) &#123;</div><div class="line">                if (isSuccess) &#123;</div><div class="line">                    // 加载成功</div><div class="line">                    setView();</div><div class="line">                    mHasLoadedOnce = true;</div><div class="line">                &#125; else &#123;</div><div class="line">                    // 加载失败</div><div class="line">                &#125;</div><div class="line">                //关闭对话框</div><div class="line">                UIHelper.hideDialogForLoading();</div><div class="line">            &#125;</div><div class="line">        &#125;.execute();</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    private void setView() &#123;</div><div class="line">        // 根据索引加载不同视图</div><div class="line">        switch (mCurIndex) &#123;</div><div class="line">        case FIRST_FRAGMENT:</div><div class="line">            mFragmentView.setText(第一个);</div><div class="line">            break;</div><div class="line"> </div><div class="line">        case SECOND_FRAGMENT:</div><div class="line">            mFragmentView.setText(第二个);</div><div class="line">            break;</div><div class="line"> </div><div class="line">        case THIRD_FRAGMENT:</div><div class="line">            mFragmentView.setText(第三个);</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">  	&#125;</div></pre></td></tr></table></figure>
<p>在上面的类当中，我们增加了一个标志位isPrepared，用于标志是否初始化完成。然后在我们所需要的初始化操作完成之后调用，如上面的例子当中，在初始化view之后，设置 isPrepared为true，同时调用lazyLoad()方法。而在lazyLoad()当中，判断isPrepared和isVisible只要有一个不为true就不往下执行。也就是仅当初始化完成，并且可见的时候才继续加载，这样的避免了未初始化完成就使用而带来的问题。 </p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p><b>这样会引发一个问题，就是fragment每次来回切换都会判断是否可见，可见就加lazyload(),就会造成加载数据，我们不想加载….</b></p>
<h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p><b>在lazyFragemnt 或者在 继承lazyFragment的fragment 中添加一个 标记值 默认 mHasLoadedOnce; 加载前先判断;第一次加载之后将 mHasLoadedOnce=true;</b></p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>到这里我们只是写好了Fragment，在FragmentActivity中还需要对ViewPager设置一下，让它每次只加载一个Fragment，ViewPager.setOffscreenPageLimit(int limit)，其中参数可以设为0或者1，参数小于1时，会默认用1来作为参数，未设置之前，ViewPager会默认加载两个Fragment。所以，我们只需要调用下它，设置下加载Fragment个数即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> RadioButton mFstBtn;</div><div class="line">    <span class="keyword">private</span> RadioButton mSndBtn;</div><div class="line">    <span class="keyword">private</span> RadioButton mThdBtn;</div><div class="line">     </div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> ListFragmentPagerAdapter mPagerAdapter;</div><div class="line">    <span class="keyword">private</span> List&lt;fragment&gt; mFragments = <span class="keyword">new</span> ArrayList&lt;fragment&gt;();</div><div class="line">     </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> FIRST_FRAGMENT = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SECOND_FRAGMENT = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> THIRD_FRAGMENT = <span class="number">2</span>;</div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initButton();</div><div class="line">        initViewPager();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化按钮</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initButton</span><span class="params">()</span> </span>&#123;</div><div class="line">        mFstBtn = (RadioButton)findViewById(R.id.id_rb_fst);</div><div class="line">        mFstBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mSndBtn = (RadioButton)findViewById(R.id.id_rb_snd);</div><div class="line">        mSndBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mThdBtn = (RadioButton)findViewById(R.id.id_rb_thd);</div><div class="line">        mThdBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化ViewPager控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViewPager</span><span class="params">()</span> </span>&#123;</div><div class="line">        mViewPager = (ViewPager)findViewById(R.id.id_vp_viewpager);</div><div class="line">        <span class="comment">//关闭预加载，默认一次只加载一个Fragment</span></div><div class="line">        mViewPager.setOffscreenPageLimit(<span class="number">1</span>);</div><div class="line">        <span class="comment">//添加Fragment</span></div><div class="line">        mFragments.add(CustomListFragment.newInstance(FIRST_FRAGMENT));</div><div class="line">        mFragments.add(CustomListFragment.newInstance(SECOND_FRAGMENT));</div><div class="line">        mFragments.add(CustomListFragment.newInstance(THIRD_FRAGMENT));</div><div class="line">        <span class="comment">//适配器</span></div><div class="line">        mPagerAdapter = <span class="keyword">new</span> ListFragmentPagerAdapter(getSupportFragmentManager(), mFragments);</div><div class="line">        mViewPager.setAdapter(mPagerAdapter);</div><div class="line">        mViewPager.setOnPageChangeListener(onPageChangeListener);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">     </div><div class="line">    <span class="keyword">private</span> OnPageChangeListener onPageChangeListener = <span class="keyword">new</span> OnPageChangeListener() &#123;</div><div class="line">         </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="comment">//根据用户选中的按钮修改按钮样式</span></div><div class="line">            <span class="keyword">switch</span> (position) &#123;</div><div class="line">            <span class="keyword">case</span> FIRST_FRAGMENT:</div><div class="line">                mFstBtn.setChecked(<span class="keyword">true</span>);</div><div class="line">                mSndBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                mThdBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"> </div><div class="line">            <span class="keyword">case</span> SECOND_FRAGMENT:</div><div class="line">                mFstBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                mSndBtn.setChecked(<span class="keyword">true</span>);</div><div class="line">                mThdBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                 </div><div class="line">            <span class="keyword">case</span> THIRD_FRAGMENT:</div><div class="line">                mFstBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                mSndBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                mThdBtn.setChecked(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> arg0, <span class="keyword">float</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;&#125;</div><div class="line">         </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> arg0)</span> </span>&#123;&#125;</div><div class="line">    &#125;;</div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.id_rb_fst:</div><div class="line">            mViewPager.setCurrentItem(FIRST_FRAGMENT);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">case</span> R.id.id_rb_snd:</div><div class="line">            mViewPager.setCurrentItem(SECOND_FRAGMENT);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">             </div><div class="line">        <span class="keyword">case</span> R.id.id_rb_thd:</div><div class="line">            mViewPager.setCurrentItem(THIRD_FRAGMENT);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="小需求："><a href="#小需求：" class="headerlink" title="小需求："></a>小需求：</h4><p>在懒加载的基础上 有时还需要viewpager的缓存，也就是不需要每次都加载，viewpager默认只保持当前条目的前一个和后一个条目…</p>
<p>这是我们就需要设置缓存条目的数量</p>
<pre><code>mViewPager.setOffscreenPageLimit(limitNum);
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ScrollView滑动到顶部或底部的响应]]></title>
      <url>http://yoursite.com/2015/08/10/ScrollView%E6%BB%91%E5%8A%A8%E5%88%B0%E9%A1%B6%E9%83%A8%E6%88%96%E5%BA%95%E9%83%A8%E7%9A%84%E5%93%8D%E5%BA%94/</url>
      <content type="html"><![CDATA[<p>两种实现方式的主要不同点在于判断滑动位置的地方，第一种方式在onScrollChanged函数中判断, 第二种在OnTouchListener的onTouch中判断。其他如是否滚动到边缘的判断、响应事件接口OnBorderListener、对外暴露的接口都一样。</p>
<p>第一种方式代码可见: <a href="https://github.com/Trinea/android-common/blob/master/src/cn/trinea/android/common/view/BorderScrollView.java" target="_blank" rel="external">onScrollChanged BorderScrollView</a></p>
<p>第二种方式代码可见: <a href="https://code.google.com/p/trinea-code/source/browse/trunk/BorderScrollView/BorderScrollView.java" target="_blank" rel="external">OnTouchListener BorderScrollView</a></p>
<p>1、<b>判断是否已经滚动到顶部或底部，代码如下：</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doOnBorderListener</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (contentView != <span class="keyword">null</span> &amp;&amp; contentView.getMeasuredHeight() &lt;= getScrollY() + getHeight()) &#123;</div><div class="line">		<span class="keyword">if</span> (onBorderListener != <span class="keyword">null</span>) &#123;</div><div class="line">			onBorderListener.onBottom();</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (getScrollY() == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (onBorderListener != <span class="keyword">null</span>) &#123;</div><div class="line">			onBorderListener.onTop();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>滚动到顶部判断：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getScrollY() == <span class="number">0</span></div></pre></td></tr></table></figure>
<p>滚动到底部判断</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">View contentView = getChildAt(<span class="number">0</span>);</div><div class="line">contentView.getMeasuredHeight() &lt;= getScrollY() + getHeight();</div></pre></td></tr></table></figure>
<p>其中getChildAt表示得到ScrollView的child View，因为ScrollView只允许一个child view，所以contentView.getMeasuredHeight()表示得到子View的高度, getScrollY()表示得到y轴的滚动距离，getHeight()为scrollView的高度。当getScrollY()达到最大时加上scrollView的高度就的就等于它内容的高度了啊~</p>
<p>2、<b>定义到达顶部和底部响应事件接口OnBorderListener，包含onTop和onBottom函数</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * OnBorderListener, Called when scroll to top or bottom</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnBorderListener</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called when scroll to bottom</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBottom</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called when scroll to top</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTop</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个接口允许用户自定义到达底部和顶部的响应事件</p>
<h4 id="第一种方式-在onScrollChanged函数中判断，主要代码如下："><a href="#第一种方式-在onScrollChanged函数中判断，主要代码如下：" class="headerlink" title="第一种方式: 在onScrollChanged函数中判断，主要代码如下："></a>第一种方式: 在onScrollChanged函数中判断，主要代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onScrollChanged</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> oldx, <span class="keyword">int</span> oldy)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onScrollChanged(x, y, oldx, oldy);</div><div class="line">	doOnBorderListener();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ScrollView的onScrollChanged函数中判断是否到达顶部和底部，并进行相应事件调用，onScrollChanged函数在ScrollView中内容开始滚动时出发被调用。</p>
<h4 id="第二种方式-在OnTouchListener的onTouch中判断，主要代码如下："><a href="#第二种方式-在OnTouchListener的onTouch中判断，主要代码如下：" class="headerlink" title="第二种方式: 在OnTouchListener的onTouch中判断，主要代码如下："></a>第二种方式: 在OnTouchListener的onTouch中判断，主要代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.onBorderTouchListener = <span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">			<span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">				doOnBorderListener();</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>表示在touch结束后，手指拿起时执行doOnBorderListener，进行判断和响应。</p>
<h4 id="两种方式的比较："><a href="#两种方式的比较：" class="headerlink" title="两种方式的比较："></a>两种方式的比较：</h4><p><b>第一种方式精确度高，但doOnBorderListener可能执行多次</b>，因为ScrollView滑动中，onScrollChanged总是在不停被调用，需要用户自己做并发控制，也可以参考<a href="https://github.com/Trinea/android-common/blob/master/src/cn/trinea/android/common/view/DropDownListView.java#L541" target="_blank" rel="external">DropDownListView</a>的写法让用户在自定义Listener执行结束后手动调用onBottomComplete函数。</p>
<p><b>第二种方式不会造成doOnBorderListener多次执行，但却可能一次都没有调用。</b>比如你快速滑动，还未到达底部手指已经松开，由于惯性滚动到底部，可能并不会执行doOnBorderListener。因为onTouch的ACTION_UP事件在手指松开已经接收到这时候却还没有到达底部。<br>两种方式各有优劣，大家可酌情选择。我要求准确响应，所以选择了第一种，自己再做下控制确保不会多次执行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于瀑布流解决OOM问题]]></title>
      <url>http://yoursite.com/2015/08/10/%E5%85%B3%E4%BA%8E%E7%80%91%E5%B8%83%E6%B5%81%E8%A7%A3%E5%86%B3OOM%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>最近在做一款全图片的壁纸的app应用，既然是全图片那么，必不可免的会出现oom异常，非常的头疼麻烦~~~,其他的瀑布流开源项目使用总是出现这样或那样的问题….说实话，下面这么长的代码我都不想看，又乱</p>
<h3 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h3><p>  <a href="http://pan.baidu.com/s/1i3rjMDJ" target="_blank" rel="external">资源借鉴</a>      //百度网盘里面有我借鉴的资源，可以下载来看一下</p>
<h3 id="自定义ScrollView解决OOM"><a href="#自定义ScrollView解决OOM" class="headerlink" title="自定义ScrollView解决OOM"></a>自定义ScrollView解决OOM</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"> * 自定义的ScrollView，在其中动态地对图片进行添加。</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> guolin</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyScrollView2</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 每页要加载的图片数量</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 记录当前已加载到第几页</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> page;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 每一列的宽度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> columnWidth;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前第一列的高度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> firstColumnHeight;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前第二列的高度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> secondColumnHeight;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否已加载过一次layout，这里onLayout中的初始化只需加载一次</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loadOnce;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 第一列的布局</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> LinearLayout firstColumn;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 第二列的布局</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> LinearLayout secondColumn;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * MyScrollView下的直接子布局。</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> View scrollLayout;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * MyScrollView布局的高度。</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> scrollViewHeight;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 记录上垂直方距向的滚动离。</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> lastScrollY = -<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 记录所有界面上的图片，用以可以随时控制对图片的释放。</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> List&lt;ImageView&gt; imageViewList = <span class="keyword">new</span> ArrayList&lt;ImageView&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在Handler中进行图片可见性检查的判断，以及加载更多图片的操作。</div><div class="line">     */</div><div class="line">    <span class="comment">/*private Handler handler = new Handler() &#123;</span></div><div class="line"></div><div class="line">        public void handleMessage(android.os.Message msg) &#123;</div><div class="line">            MyScrollView2 myScrollView = (MyScrollView2) msg.obj;</div><div class="line">            int scrollY = myScrollView.getScrollY();</div><div class="line">            // 如果当前的滚动位置和上次相同，表示已停止滚动</div><div class="line">            if (scrollY == lastScrollY) &#123;</div><div class="line">                // 当滚动的最底部，并且当前没有正在下载的任务时，开始加载下一页的图片</div><div class="line">                if (scrollViewHeight + scrollY &gt;= scrollLayout.getHeight()) &#123;</div><div class="line">                    myScrollView.loadMoreImages();</div><div class="line">                &#125;</div><div class="line">                myScrollView.checkVisibility();</div><div class="line">            &#125; else &#123;</div><div class="line">                lastScrollY = scrollY;</div><div class="line">                Message message = new Message();</div><div class="line">                message.obj = myScrollView;</div><div class="line">                // 5毫秒后再次对滚动位置进行判断</div><div class="line">                handler.sendMessageDelayed(message, 5);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    &#125;;*/</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * MyScrollView的构造函数。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@param</span> attrs</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyScrollView2</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">       handler.sendEmptyMessageDelayed(<span class="number">11</span>,<span class="number">500</span>);</div><div class="line"><span class="comment">//        setOnTouchListener(this);</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Handler handler=<span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            checkVisibility();</div><div class="line">            handler.sendEmptyMessageDelayed(<span class="number">11</span>,<span class="number">500</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onScrollChanged</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> oldl, <span class="keyword">int</span> oldt)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onScrollChanged(l, t, oldl, oldt);</div><div class="line">        doOnBorderListener();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isZhixing;  <span class="comment">//到底部是会一直夹在数据 加个标记 就只会加载一次</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doOnBorderListener</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (scrollViewHeight + getScrollY() &gt;= scrollLayout.getHeight()) &#123;</div><div class="line">            <span class="keyword">if</span>(!isZhixing)&#123;</div><div class="line">                LLogUtils.d(<span class="string">"============loadCount==="</span> + loadCount);</div><div class="line">                isZhixing=<span class="keyword">true</span>;</div><div class="line">                initData(loadCount);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getScrollY() == <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mUrl;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        mUrl = url;</div><div class="line">        initData(loadCount);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    List&lt;GroupPicture&gt; imageDatas = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">(<span class="keyword">int</span> loadCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> firstIndex = (loadCount - <span class="number">1</span>) * <span class="number">20</span>;</div><div class="line">        <span class="keyword">int</span> endIndex = <span class="number">20</span>;</div><div class="line">        String selectUrl = mUrl + <span class="string">"&amp;limit_a="</span> + firstIndex + <span class="string">"&amp;limit_b="</span> + endIndex;</div><div class="line">        LApplication.getHttpUtils().send(HttpRequest.HttpMethod.GET, selectUrl, <span class="keyword">new</span> RequestCallBack&lt;String&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(ResponseInfo&lt;String&gt; response)</span> </span>&#123;</div><div class="line">                String result = response.result;</div><div class="line">                LogUtils.d(<span class="string">"result"</span> + result);</div><div class="line">                Response&lt;GroupPicture&gt; data = GsonUtil.get(result, <span class="keyword">new</span> TypeToken&lt;Response&lt;GroupPicture&gt;&gt;() &#123;</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">if</span> (data.getStatus() == Response.FAILED) &#123;</div><div class="line"><span class="comment">//                    ToastUtil.show(data.getMsg());</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    List&lt;GroupPicture&gt; dataList = data.getList();</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (dataList == <span class="keyword">null</span> || dataList.size() == <span class="number">0</span>) &#123;</div><div class="line">                        ToastUtil.show(<span class="string">"暂未更多资源，敬请期待..."</span>);</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                        imageDatas.addAll(dataList);</div><div class="line"></div><div class="line">                    LLogUtils.d(<span class="string">"imageDatas==============="</span>+imageDatas.size());</div><div class="line">                        loadMoreImages();</div><div class="line"><span class="comment">//                    handler.sendMessageDelayed(handler.obtainMessage(0, MyScrollView2.this), 5);</span></div><div class="line"></div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(HttpException arg0, String arg1)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进行一些关键性的初始化操作，获取MyScrollView的高度，以及得到第一列的宽度值。并在这里开始加载第一页的图片。</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onLayout(changed, l, t, r, b);</div><div class="line">        <span class="keyword">if</span> (changed &amp;&amp; !loadOnce) &#123;</div><div class="line">            scrollViewHeight = getHeight();</div><div class="line">            scrollLayout = getChildAt(<span class="number">0</span>);</div><div class="line">            firstColumn = (LinearLayout) findViewById(R.id.first_column);</div><div class="line">            secondColumn = (LinearLayout) findViewById(R.id.second_column);</div><div class="line">            columnWidth = firstColumn.getWidth();</div><div class="line">            loadOnce = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 监听用户的触屏事件，如果用户手指离开屏幕则开始进行滚动检测。</div><div class="line">     */</div><div class="line">   <span class="comment">/* @Override</span></div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        if (event.getAction() == MotionEvent.ACTION_UP) &#123;</div><div class="line">            Message message = new Message();</div><div class="line">            message.obj = this;</div><div class="line">            handler.sendMessageDelayed(message, 5);</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;*/</div><div class="line"></div><div class="line">    <span class="keyword">int</span> loadCount = <span class="number">1</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始加载下一页的图片，每张图片都会开启一个异步线程去下载。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadMoreImages</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> startIndex = page * PAGE_SIZE;</div><div class="line">        <span class="keyword">int</span> endIndex = page * PAGE_SIZE + PAGE_SIZE;</div><div class="line">        <span class="keyword">if</span> (startIndex &lt; imageDatas.size()) &#123;</div><div class="line">            <span class="keyword">if</span> (loadCount &gt;= <span class="number">2</span>) &#123;</div><div class="line">                Toast.makeText(getContext(), <span class="string">"正在加载..."</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">            loadCount++;</div><div class="line">            <span class="keyword">if</span> (endIndex &gt; imageDatas.size()) &#123;</div><div class="line">                endIndex = imageDatas.size();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = startIndex; i &lt; endIndex; i++) &#123;</div><div class="line">                ImageView imageView = <span class="keyword">new</span> ImageView(getContext());</div><div class="line"></div><div class="line">                <span class="keyword">final</span> GroupPicture bean = imageDatas.get(i);</div><div class="line">                LApplication.getBitmapUtils().configDefaultShowOriginal(<span class="keyword">true</span>);</div><div class="line">                LApplication.getBitmapUtils().display(imageView, bean.getPictureUrl(), <span class="keyword">new</span> BitmapLoadCallBack&lt;ImageView&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadCompleted</span><span class="params">(ImageView imageView, String s, Bitmap bitmap, BitmapDisplayConfig bitmapDisplayConfig, BitmapLoadFrom bitmapLoadFrom)</span> </span>&#123;</div><div class="line">                        LinearLayout.LayoutParams params = <span class="keyword">new</span> LinearLayout.LayoutParams(</div><div class="line">                                ScreenUtil.getWidth() / <span class="number">2</span>, ScreenUtil.getWidth() / <span class="number">2</span>);</div><div class="line">                        params.setMargins(ScreenUtil.dp2px(<span class="number">1</span>), <span class="number">0</span>, <span class="number">0</span>, ScreenUtil.dp2px(<span class="number">1</span>));</div><div class="line">                        imageView.setTag(R.string.id, <span class="keyword">true</span>);</div><div class="line">                        imageView.setLayoutParams(params);</div><div class="line">                        imageView.setImageBitmap(bitmap);</div><div class="line">                        imageView.setScaleType(ScaleType.CENTER_CROP);</div><div class="line"></div><div class="line">                        imageView.setTag(R.string.image_url, bean);</div><div class="line">                        imageViewList.add(imageView);</div><div class="line">                        imageView.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                                Intent intent = <span class="keyword">new</span> Intent(getContext(), ImageShowActivity.class);</div><div class="line">                                String groupId = bean.getGroupId();</div><div class="line">                                intent.putExtra(<span class="string">"groupId"</span>, groupId);</div><div class="line">                                getContext().startActivity(intent);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line"></div><div class="line">                        findColumnToAdd(imageView, ScreenUtil.getWidth() / <span class="number">2</span>).addView(imageView);</div><div class="line"></div><div class="line">                        isZhixing=<span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(ImageView imageView, String s, Drawable drawable)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            page++;</div><div class="line">        &#125;</div><div class="line">        checkVisibility();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 遍历imageViewList中的每张图片，对图片的可见性进行检查，如果图片已经离开屏幕可见范围，则将图片替换成一张空图。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkVisibility</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imageViewList.size(); i++) &#123;</div><div class="line">            ImageView imageView = imageViewList.get(i);</div><div class="line">            <span class="keyword">boolean</span> isSet = (<span class="keyword">boolean</span>) imageView.getTag(R.string.id);</div><div class="line">            <span class="keyword">int</span> borderTop = (Integer) imageView.getTag(R.string.border_top);</div><div class="line">            <span class="keyword">int</span> borderBottom = (Integer) imageView</div><div class="line">                    .getTag(R.string.border_bottom);</div><div class="line">               <span class="comment">//这个地方 getScrollY()-ScreenUtil.getWidth() 和getScrollY() + scrollViewHeight+ScreenUtil.getWidth() 多加个ScreenUtil.getWidth() 是为了上下提前显示一张图片</span></div><div class="line">            <span class="keyword">if</span> (borderBottom &gt; getScrollY()-ScreenUtil.getWidth()</div><div class="line">                   &amp;&amp; borderTop &lt; getScrollY() + scrollViewHeight+ScreenUtil.getWidth()) &#123;<span class="comment">//show</span></div><div class="line">                <span class="keyword">final</span> GroupPicture bean = (GroupPicture) imageView.getTag(R.string.image_url);</div><div class="line">                imageView.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                        Intent intent = <span class="keyword">new</span> Intent(getContext(), ImageShowActivity.class);</div><div class="line">                        String groupId = bean.getGroupId();</div><div class="line">                        intent.putExtra(<span class="string">"groupId"</span>, groupId);</div><div class="line">                        getContext().startActivity(intent);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                 <span class="keyword">if</span>(!isSet) &#123;</div><div class="line">                     LApplication.getBitmapUtils().display(imageView, bean.getPictureUrl());</div><div class="line">                     imageView.setTag(R.string.id, <span class="keyword">true</span>);</div><div class="line">                 &#125;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                imageView.setImageResource(R.drawable.empty_photo);</div><div class="line">                imageView.setOnClickListener(<span class="keyword">null</span>);</div><div class="line">                imageView.setTag(R.string.id, <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> LinearLayout <span class="title">findColumnToAdd</span><span class="params">(ImageView imageView, <span class="keyword">int</span> imageHeight)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (firstColumnHeight &lt;= secondColumnHeight) &#123;</div><div class="line">            imageView.setTag(R.string.border_top, firstColumnHeight);</div><div class="line">            firstColumnHeight += imageHeight;</div><div class="line">            imageView.setTag(R.string.border_bottom, firstColumnHeight);</div><div class="line">            <span class="keyword">return</span> firstColumn;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            imageView.setTag(R.string.border_top, secondColumnHeight);</div><div class="line">            secondColumnHeight += imageHeight;</div><div class="line">            imageView</div><div class="line">                    .setTag(R.string.border_bottom, secondColumnHeight);</div><div class="line">            <span class="keyword">return</span> secondColumn;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此自定义ScrollView没有使用常规的实现解耦分离、这点没有做好~~</p>
<p>使用方法：或者将这个布局文件加到其他布局文件中 或者作为根布局文件<br>布局文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line">	&lt;com.qiao.custom.MyScrollView2</div><div class="line">	    android:id="@+id/select_scroll"</div><div class="line">	    xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">	    android:layout_width="match_parent"</div><div class="line">	    android:layout_height="match_parent"&gt;</div><div class="line">	</div><div class="line">	    &lt;LinearLayout</div><div class="line">	        android:layout_width="match_parent"</div><div class="line">	        android:layout_height="wrap_content"</div><div class="line">	        android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">            //在顶部加了个自定义的viewPager 轮播图	 看需求 不需要删除 不影响</div><div class="line">		        &lt;com.klo.zz.bizhi.widget.CustomeViewPager</div><div class="line">	            android:id="@+id/lunbo_pager"</div><div class="line">	            android:layout_width="match_parent"</div><div class="line">	            android:layout_height="wrap_content"/&gt;</div><div class="line">	</div><div class="line">	        &lt;LinearLayout</div><div class="line">	            android:layout_width="match_parent"</div><div class="line">	            android:layout_height="wrap_content"</div><div class="line">	            android:layout_marginTop="1dp"</div><div class="line">	            android:orientation="horizontal"&gt;</div><div class="line">	</div><div class="line">	            &lt;LinearLayout</div><div class="line">	                android:id="@+id/first_column"</div><div class="line">	                android:layout_width="0dp"</div><div class="line">	                android:layout_height="wrap_content"</div><div class="line">	                android:layout_weight="1"</div><div class="line">	                android:orientation="vertical"&gt;&lt;/LinearLayout&gt;</div><div class="line">	</div><div class="line">	            &lt;LinearLayout</div><div class="line">	                android:id="@+id/second_column"</div><div class="line">	                android:layout_width="0dp"</div><div class="line">	                android:layout_height="wrap_content"</div><div class="line">	                android:layout_weight="1"</div><div class="line">	                android:orientation="vertical"&gt;&lt;/LinearLayout&gt;</div><div class="line">	        &lt;/LinearLayout&gt;</div><div class="line">	    &lt;/LinearLayout&gt;</div><div class="line">	&lt;/com.qiao.custom.MyScroll2&gt;</div></pre></td></tr></table></figure>
<p>在String.xml中添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;string name="border_top"&gt;Border Top&lt;/string&gt;</div><div class="line">&lt;string name="border_bottom"&gt;Border Bottom&lt;/string&gt;</div><div class="line">&lt;string name="image_url"&gt;Image Url&lt;/string&gt;</div><div class="line">&lt;string name="bitmap"&gt;bitmap&lt;/string&gt;</div><div class="line">&lt;string name="id"&gt;99&lt;/string&gt;</div></pre></td></tr></table></figure>
<p>在类里面 findViewById()找到 myScrollView 然后 setUrl();</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Android Studio的Gradle文件配置的一些知识]]></title>
      <url>http://yoursite.com/2015/08/10/%E5%85%B3%E4%BA%8EAndroid-Studio%E7%9A%84Gradle%E7%9A%84%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="一、采用签名不再是debug的签名"><a href="#一、采用签名不再是debug的签名" class="headerlink" title="一、采用签名不再是debug的签名"></a>一、采用签名不再是debug的签名</h3><p>  直接在编辑环境中运行app默认是debug签名的，我们想更改签名不是debug（例如，微信sdk接入分享的使用要求apk文件不能是debug签名，否则不生效）。</p>
<p>  我们需要在项目的build.gradle中android{} 根目录中添加：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">	android&#123;                        <span class="comment">//在他的目录下添加</span></div><div class="line">	 </div><div class="line">		 signingConfigs&#123;</div><div class="line">		        debug&#123;</div><div class="line">		            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"haha.keystore"</span>)</span>            <span class="comment">//签名文件的名字 这是在根目录下</span></span></div><div class="line">		            storePassword "haha123456"                 <span class="comment">//密码</span></div><div class="line">		            keyAlias "zzu"                            <span class="comment">//组织（这个是刚开始生成签名文件时填的）</span></div><div class="line">		            keyPassword "haha123456"                   <span class="comment">//key密码</span></div><div class="line">		        &#125;</div><div class="line">		    &#125;</div><div class="line">	 &#125;</div><div class="line">```	 </div><div class="line">	 </div><div class="line">同时还要经签名文件 haha.keystore放到项目app的根目录下</div><div class="line"></div><div class="line">或者在项目的build.gradle中android&#123;&#125;根目录中添加：</div><div class="line"></div><div class="line">```java</div><div class="line">    Properties properties = <span class="keyword">new</span> Properties()</div><div class="line">    properties.load(project.rootProject.file(<span class="string">'local.properties'</span>).newDataInputStream())</div><div class="line"></div><div class="line">	signingConfigs &#123;</div><div class="line">	        haha &#123;                                              <span class="comment">//haha 这个名字是随意命名的</span></div><div class="line">	            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"../keystore/haha.keystore"</span>)</span>     <span class="comment">// 签名文件的路径   这是在根目录下新建了keystore文件夹</span></span></div><div class="line">	            storePassword properties.<span class="title">getProperty</span><span class="params">(<span class="string">"Password"</span>)</span></div><div class="line">	            keyAlias properties.<span class="title">getProperty</span><span class="params">(<span class="string">"keyAlias"</span>)</span></div><div class="line">	            keyPassword properties.<span class="title">getProperty</span><span class="params">(<span class="string">"Password"</span>)</span></div><div class="line">	        &#125;</div><div class="line"></div><div class="line"></div><div class="line">	 buildTypes &#123;</div><div class="line">	        release &#123;</div><div class="line">	            signingConfig signingConfigs.haha      <span class="comment">//配置</span></div><div class="line">	            minifyEnabled <span class="keyword">false</span>    <span class="comment">//时候开启混淆</span></div><div class="line">	            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'   <span class="comment">//混淆文件</span></span></div><div class="line">	        &#125;</div><div class="line">	</div><div class="line">	        debug &#123;</div><div class="line">	            signingConfig signingConfigs.haha</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
<p>然后在local.properties 中添加 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">keyAlias=haha</div><div class="line">Password=haha123</div></pre></td></tr></table></figure>
<h3 id="二、直接生成以什么命名格式的apk文件"><a href="#二、直接生成以什么命名格式的apk文件" class="headerlink" title="二、直接生成以什么命名格式的apk文件"></a>二、直接生成以什么命名格式的apk文件</h3><p>同样是在项目的build.gradle中android{}根目录中添加：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">applicationVariants.all &#123;</div><div class="line">       variant -&gt;</div><div class="line">           variant.outputs.each &#123;</div><div class="line">               output -&gt;</div><div class="line">                   def oldFile = output.<span class="function">outputFile</span></div><div class="line">                   <span class="title">if</span> <span class="params">(variant.buildType.name.equals(<span class="string">'release'</span>)</span>) &#123;</div><div class="line">	</div><div class="line">                            <span class="comment">//生成的就是  bizhi-版本号-版本名_singed.apk</span></div><div class="line">                       def releaseApkName=<span class="string">'bizhi-'</span>+defaultConfig.versionCode+<span class="string">"-"</span>+defaultConfig.versionName+<span class="string">"-signed.apk"</span></div><div class="line">                       output.outputFile=<span class="keyword">new</span> File(oldFile.parent,releaseApkName)</div><div class="line">                   &#125;</div><div class="line">           &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="三、Gradle多渠道打包"><a href="#三、Gradle多渠道打包" class="headerlink" title="三、Gradle多渠道打包"></a>三、Gradle多渠道打包</h3><p>以有多渠道打包为例，</p>
<p>在AndroidManifest.xml里面会有这么一段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=<span class="string">"UMENG_CHANNEL"</span></div><div class="line">    android:value=<span class="string">"Channel_ID"</span> /&gt;</div></pre></td></tr></table></figure>
<p>里面的Channel_ID就是渠道标示。我们的目标就是在编译的时候这个值能够自动变化。</p>
<p><li>第一步 在AndroidManifest.xml里配置PlaceHolder</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=<span class="string">"UMENG_CHANNEL"</span></div><div class="line">    android:value=<span class="string">"$&#123;UMENG_CHANNEL_VALUE&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<p><li>第二步 在build.gradle设置productFlavors</li></p>
<pre><code class="java">android {  
    productFlavors {
        xiaomi {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"xiaomi"</span>]
        }
        _360 {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"_360"</span>]
        }
        baidu {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"baidu"</span>]
        }
        wandoujia {
            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"wandoujia"</span>]
        }
    }  
}
</code></pre>
<p>或者批量修改</p>
<p>全选复制放进笔记</p>
<pre><code class="java">android {  
    productFlavors {
        xiaomi {}
        _360 {}
        baidu {}
        wandoujia {}
    }  

    productFlavors.all { 
        flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name] 
    }
}
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于ViewPager的一些知识]]></title>
      <url>http://yoursite.com/2015/07/30/%E5%85%B3%E4%BA%8EViewPager%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="需求一："><a href="#需求一：" class="headerlink" title="需求一："></a>需求一：</h3><p> ViewPager滑动到第一张继续向右滑、滑倒最后一张继续向左滑，之后的逻辑操作（例：弹出提示、打开另一个Activity等）</p>
<p> 这两种方法都有缺陷：弹出提示建议 方法二，打开新的Activity建议方法一</p>
<p>方法一：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> currentPageScrollStatus;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showData</span><span class="params">()</span> </span>&#123;</div><div class="line">    imageAdapter = <span class="keyword">new</span> ImageAdapter();</div><div class="line">    imagePager.setAdapter(imageAdapter);</div><div class="line">	</div><div class="line">    imagePager.setOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">//如果offsetPixels是0页面也被滑动了，代表在第一页还要往左划</span></div><div class="line">                <span class="keyword">if</span> (positionOffsetPixels == <span class="number">0</span> &amp;&amp; currentPageScrollStatus == <span class="number">1</span>) &#123;</div><div class="line">                    ToastUtil.show(<span class="string">"已经是第一张了"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == imageAdapter.getCount()-<span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">//已经在最后一页还想往右划</span></div><div class="line">                <span class="keyword">if</span> (positionOffsetPixels == <span class="number">0</span> &amp;&amp; currentPageScrollStatus == <span class="number">1</span>) &#123;</div><div class="line">                    ToastUtil.show(<span class="string">"已经是最后一张了"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">	</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="comment">//切换page设置当前position值</span></div><div class="line">            setCurrentPos(position);</div><div class="line">        &#125;</div><div class="line">	</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line">    </div><div class="line">            currentPageScrollStatus=state;</div><div class="line">        &#125;</div><div class="line">	</div><div class="line">       </div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">	    int currItem;</div><div class="line">        </div><div class="line">	    private void showData() &#123;</div><div class="line">	        imageAdapter = new ImageAdapter();</div><div class="line">	        imagePager.setAdapter(imageAdapter);</div><div class="line">	</div><div class="line">	        imagePager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</div><div class="line">                int lastState=-1;</div><div class="line">	            @Override</div><div class="line">	            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;</div><div class="line">	               currItem=position;</div><div class="line">	            &#125;</div><div class="line">	</div><div class="line">	            @Override</div><div class="line">	            public void onPageSelected(int position) &#123;</div><div class="line">	               </div><div class="line">	            &#125;</div><div class="line">	</div><div class="line">	            @Override</div><div class="line">	            public void onPageScrollStateChanged(int state) &#123;</div><div class="line">	                if(currItem == imageAdapter.getCount()-1 &amp;&amp; state == 0 &amp;&amp; lastState == 1)&#123;</div><div class="line">	                    ToastUtil.show("已经是最后一张了");</div><div class="line">	                &#125;if(currItem == 0 &amp;&amp; state == 0 &amp;&amp; lastState == 1)&#123;</div><div class="line">	                    ToastUtil.show("已经是第一张了");</div><div class="line">	                &#125;</div><div class="line">                    lastState = state;</div><div class="line">	            &#125;</div><div class="line">	           </div><div class="line">	        &#125;);</div><div class="line">	    &#125;</div><div class="line">```	    </div><div class="line">#### 方法二解决缺陷：声明一个lastState值</div><div class="line"></div><div class="line"></div><div class="line">### 需求二：</div><div class="line"> 点击ViewPager的Item跳转到不同的，做不同的逻辑操作等</div><div class="line"> </div><div class="line"> 不是viewpager.setOnItemClickListener</div><div class="line"></div><div class="line"> 而是在PagerAdapter 的instantiateItem()方法中根据postion 做相应的逻辑操作</div><div class="line"></div><div class="line">```java</div><div class="line">	public Object instantiateItem(ViewGroup container, final int position) &#123;</div><div class="line">	        final int location = position % mViewList.size();      //这是为了做无限轮播</div><div class="line">	        View view = mViewList.get(location);</div><div class="line">	        container.addView(view);</div><div class="line">	        view.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">	            @Override</div><div class="line">	            public void onClick(View v) &#123;</div><div class="line">	               Intent intent=new Intent(mContext, ImageShowActivity.class);</div><div class="line">	                intent.putExtra("groupId",mIdList.get(location));</div><div class="line">	                mContext.startActivity(intent);</div><div class="line">	            &#125;</div><div class="line">	        &#125;);</div><div class="line">	        return view;</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义矩形、圆形等边框及相关知识]]></title>
      <url>http://yoursite.com/2015/07/30/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9F%A9%E5%BD%A2%E3%80%81%E5%9C%86%E5%BD%A2%E7%AD%89%E8%BE%B9%E6%A1%86%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="需求一："><a href="#需求一：" class="headerlink" title="需求一："></a>需求一：</h3><p> 做一个一半矩形、一半圆形的边框，而且左边没有边框、其他上、右、下要有1像素的边框。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;layer-list xmlns:android="http://schemas.android.com/apk/res/android"&gt;</div><div class="line">    &lt;item android:left="-2dp"&gt;                    //重点：使左边没有描边</div><div class="line">        &lt;shape android:shape="rectangle"&gt;         //矩形      </div><div class="line"></div><div class="line">            &lt;corners</div><div class="line">                android:topLeftRadius="0dp"       //左上圆角半径 0</div><div class="line">                android:topRightRadius="15dp"     //右上圆角半径 15 </div><div class="line">                android:bottomLeftRadius="0dp"      左下圆角半径 0</div><div class="line">                android:bottomRightRadius="15dp" /&gt;   //右下圆角半径 15</div><div class="line"></div><div class="line"></div><div class="line">            &lt;gradient                            //矩形边框内填充颜色（渐变色）</div><div class="line">                android:startColor="#55000000"</div><div class="line">                android:endColor="#55000000"</div><div class="line">                android:angle="270" /&gt;</div><div class="line"></div><div class="line"></div><div class="line">            &lt;stroke                              //描边 这样四周有1dp 的边框</div><div class="line">                android:width="1dp"</div><div class="line">                android:color="#55ffffff" /&gt;</div><div class="line">        &lt;/shape&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">&lt;/layer-list&gt;</div></pre></td></tr></table></figure>
<h3 id="后期需求："><a href="#后期需求：" class="headerlink" title="后期需求："></a>后期需求：</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android将给定图片维持宽高比例缩放后，截取正中间的正方形部分]]></title>
      <url>http://yoursite.com/2015/07/25/android%E5%B0%86%E7%BB%99%E5%AE%9A%E5%9B%BE%E7%89%87%E7%BB%B4%E6%8C%81%E5%AE%BD%E9%AB%98%E6%AF%94%E4%BE%8B%E7%BC%A9%E6%94%BE%E5%90%8E%EF%BC%8C%E6%88%AA%E5%8F%96%E6%AD%A3%E4%B8%AD%E9%97%B4%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E9%83%A8%E5%88%86/</url>
      <content type="html"><![CDATA[<h3 id="一、本地图片"><a href="#一、本地图片" class="headerlink" title="一、本地图片"></a>一、本地图片</h3><p>本地图片只需将图片转换为bitmap对象即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 将给定图片维持宽高比缩放后，截取正中间的正方形部分。</div><div class="line">    * <span class="doctag">@param</span> bitmap      原图</div><div class="line">    * <span class="doctag">@param</span> edgeLength  希望得到的正方形部分的边长</div><div class="line">    * <span class="doctag">@return</span>  缩放截取正中部分后的位图。</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">centerSquareScaleBitmap</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> edgeLength)</span></span></div><div class="line">  &#123;</div><div class="line">   <span class="keyword">if</span>(<span class="keyword">null</span> == bitmap || edgeLength &lt;= <span class="number">0</span>)</div><div class="line">   &#123;</div><div class="line">    <span class="keyword">return</span>  <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   Bitmap result = bitmap;</div><div class="line">   <span class="keyword">int</span> widthOrg = bitmap.getWidth();</div><div class="line">   <span class="keyword">int</span> heightOrg = bitmap.getHeight();</div><div class="line">   </div><div class="line">   <span class="keyword">if</span>(widthOrg &gt; edgeLength &amp;&amp; heightOrg &gt; edgeLength)</div><div class="line">   &#123;</div><div class="line">    <span class="comment">//压缩到一个最小长度是edgeLength的bitmap</span></div><div class="line">    <span class="keyword">int</span> longerEdge = (<span class="keyword">int</span>)(edgeLength * Math.max(widthOrg, heightOrg) / Math.min(widthOrg, heightOrg));</div><div class="line">    <span class="keyword">int</span> scaledWidth = widthOrg &gt; heightOrg ? longerEdge : edgeLength;</div><div class="line">    <span class="keyword">int</span> scaledHeight = widthOrg &gt; heightOrg ? edgeLength : longerEdge;</div><div class="line">    Bitmap scaledBitmap;</div><div class="line">    </div><div class="line">          <span class="keyword">try</span>&#123;</div><div class="line">           scaledBitmap = Bitmap.createScaledBitmap(bitmap, scaledWidth, scaledHeight, <span class="keyword">true</span>);</div><div class="line">          &#125; </div><div class="line">          <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">       <span class="comment">//从图中截取正中间的正方形部分。</span></div><div class="line">       <span class="keyword">int</span> xTopLeft = (scaledWidth - edgeLength) / <span class="number">2</span>;</div><div class="line">       <span class="keyword">int</span> yTopLeft = (scaledHeight - edgeLength) / <span class="number">2</span>;</div><div class="line">       </div><div class="line">       <span class="keyword">try</span>&#123;</div><div class="line">        result = Bitmap.createBitmap(scaledBitmap, xTopLeft, yTopLeft, edgeLength, edgeLength);</div><div class="line">        scaledBitmap.recycle();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       &#125;         </div><div class="line">   &#125;</div><div class="line">        </div><div class="line">   <span class="keyword">return</span> result;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="二、网络图片"><a href="#二、网络图片" class="headerlink" title="二、网络图片"></a>二、网络图片</h3><p>使用xUtils框架中的Bitmaputils的display方法可以有效地将网络上的图片成功的显示在ImageView布局上。</p>
<p>其中new BitmapCallBack接口中的onLoadCompleted方法，表示load成功，可以得到Bitmap对象，截取我们就是要对bitmap进行操作。</p>
<p>然后调用上述的截取方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">LApplication.getBitmapUtils().display(imageView, selectPicture.getPictureUrl(), <span class="keyword">new</span> BitmapLoadCallBack&lt;View&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadCompleted</span><span class="params">(ImageView imageView, String s, Bitmap bitmap, BitmapDisplayConfig bitmapDisplayConfig, BitmapLoadFrom bitmapLoadFrom)</span> </span>&#123;</div><div class="line">            Bitmap showBitmap = centerSquareScaleBitmap(bitmap, ScreenUtil.getWidth() / <span class="number">2</span>);  <span class="comment">//截取新的bitmap</span></div><div class="line">            imageView.setBitmap(showBitmap);     <span class="comment">//设显示所占的宽高</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(View view, String s, Drawable drawable)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="做了那么多，其实有时候还不如这样做，看情况而定吧-这个不行在用上面的："><a href="#做了那么多，其实有时候还不如这样做，看情况而定吧-这个不行在用上面的：" class="headerlink" title="做了那么多，其实有时候还不如这样做，看情况而定吧 这个不行在用上面的："></a>做了那么多，其实有时候还不如这样做，看情况而定吧 这个不行在用上面的：</h3><figure class="highlight java"><figcaption><span>imageView.setScaleType(ScaleType.CENTER_CROP);</span><a href="//就这一句话">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">LApplication.getBitmapUtils().display(imageView, selectPicture.getPictureUrl(), <span class="keyword">new</span> BitmapLoadCallBack&lt;View&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadCompleted</span><span class="params">(ImageView imageView, String s, Bitmap bitmap, BitmapDisplayConfig bitmapDisplayConfig, BitmapLoadFrom bitmapLoadFrom)</span> </span>&#123;</div><div class="line">               imageView.setBitmap(bitmap);     </div><div class="line">           &#125;</div><div class="line">	</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(View view, String s, Drawable drawable)</span> </span>&#123;</div><div class="line">	</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<h3 id="关于ScaleType-的图片说明"><a href="#关于ScaleType-的图片说明" class="headerlink" title="关于ScaleType 的图片说明"></a>关于ScaleType 的图片说明</h3><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/smallPicture.png">小图<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/bigPicture.png">大图</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开发Android壁纸:设置壁纸、设置锁屏心得]]></title>
      <url>http://yoursite.com/2015/07/23/%E5%BC%80%E5%8F%91Android%E5%A3%81%E7%BA%B8-%E8%AE%BE%E7%BD%AE%E5%A3%81%E7%BA%B8%E3%80%81%E8%AE%BE%E7%BD%AE%E9%94%81%E5%B1%8F%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<p>直接获取网络上的图片，然后设置壁纸、锁屏可以，不过我这里是先将网络上的图片下载下来，存到sd卡上，然后设置sd卡上的图片为壁纸。</p>
<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><pre><code>这个我还没添加到github上，添加之后更改本位置的内容
</code></pre><h2 id="设置壁纸"><a href="#设置壁纸" class="headerlink" title="设置壁纸"></a>设置壁纸</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallpaper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Activity mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wallpaper</span><span class="params">(ImageShowActivity imageShowActivity)</span> </span>&#123;</div><div class="line">        mContext = imageShowActivity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWallPaper</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = url.lastIndexOf(<span class="string">"/"</span>);</div><div class="line">        String pirtureName = url.substring(index + <span class="number">1</span>);</div><div class="line">        String path = AppConfig.DOWN_PATH;</div><div class="line">        File file = <span class="keyword">new</span> File(path);</div><div class="line">        <span class="keyword">if</span> (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</div><div class="line">            file.mkdir();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> String target = path + <span class="string">"/"</span> + pirtureName;</div><div class="line">        File targetFile = <span class="keyword">new</span> File(target);</div><div class="line">        <span class="keyword">if</span> (targetFile.exists()) &#123;</div><div class="line">            set(target);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            LApplication.getHttpUtils().download(url, target, <span class="keyword">new</span> RequestCallBack&lt;File&gt;() &#123;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoading</span><span class="params">(<span class="keyword">long</span> total, <span class="keyword">long</span> current, <span class="keyword">boolean</span> isUploading)</span> </span>&#123;</div><div class="line">                    <span class="keyword">super</span>.onLoading(total, current, isUploading);</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(ResponseInfo&lt;File&gt; arg0)</span> </span>&#123;</div><div class="line">                    set(target);   <span class="comment">//设置壁纸</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(HttpException arg0, String arg1)</span> </span>&#123;</div><div class="line">                    ToastUtil.show(<span class="string">"网络异常"</span>);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">     * 设置壁纸</div><div class="line">     * <span class="doctag">@param</span> target 图片路径</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String target)</span> </span>&#123;</div><div class="line">        Bitmap bitmap = BitmapFactory.decodeFile(target);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            WallpaperManager wallpaperManager = android.app.WallpaperManager.getInstance(mContext);</div><div class="line">            wallpaperManager.setBitmap(bitmap);</div><div class="line">            ToastUtil.show(<span class="string">"设置成功"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            String msg = <span class="string">"设置桌面背景发生异常:"</span> + e.getLocalizedMessage();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>别忘记在ApplicationManifest.xml 中加上权限的设置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name = <span class="string">"android.permission.SET_WALLPAPER"</span>/&gt;</div></pre></td></tr></table></figure>
<p>壁纸设置方法有三种：  <b>（尼玛，这三种设置壁纸的方法，都不管我们的死活，直接设置随着屏幕滚动，图片都模糊了）</b></p>
<p>第一 通过WallpaperManager方法中的 setBitmap（）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">WallpaperManager wallpaperManager = WallpaperManager.getInstance(<span class="keyword">this</span>);</div><div class="line"> Resources res = getResources();</div><div class="line"> Bitmap bitmap=BitmapFactory.decodeResource(res,R.drawable.h); </div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line"> wallpaperManager.setBitmap(bitmap);</div><div class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二 使用WallpaperManager的setResource(int ResourceID)方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">WallpaperManager wallpaperManager = WallpaperManager.getInstance(<span class="keyword">this</span>);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		wallpaperManager.setResource(ResourceID);</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"设置成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三 通过ContextWrapper 类中提供的setWallpaper（）方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Resources localResources = getBaseContext().getResources();</div><div class="line">InputStream localInputStream2 = localResources.openRawResource(ResourceID);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			setWallpaper(localInputStream2);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h4 id="注意：设置单屏壁纸，不随着屏幕滑动而滑动"><a href="#注意：设置单屏壁纸，不随着屏幕滑动而滑动" class="headerlink" title="注意：设置单屏壁纸，不随着屏幕滑动而滑动"></a>注意：设置单屏壁纸，不随着屏幕滑动而滑动</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">	 public void set(String target) &#123;</div><div class="line">	        Bitmap bitmap = BitmapFactory.decodeFile(target);</div><div class="line">	        try &#123;</div><div class="line">	            WallpaperManager wallpaperManager = android.app.WallpaperManager.getInstance(mContext);</div><div class="line">	            int desiredMinimumWidth = mContext.getWindowManager().getDefaultDisplay().getWidth();  //获取屏幕的宽</div><div class="line">	            int desiredMinimumHeight = mContext.getWindowManager().getDefaultDisplay().getHeight(); //获取屏幕的高</div><div class="line">                 //bitmap这个参数再加工一次，缩放到desireMinimumWidth,desireMinmunHeight宽度和高度后再设置</div><div class="line">	            Bitmap sbitmap = sBitmap(bitmap,desiredMinimumWidth,desiredMinimumHeight);</div><div class="line">                //很重要，有的手机少了这句话不行........</div><div class="line">                wallpaperManager.suggestDesiredDimensions(screenWidth, screenHeight);//设置期望壁纸的尺寸</div><div class="line">	            wallpaperManager.setBitmap(sbitmap);</div><div class="line">	            ToastUtil.show("设置成功");</div><div class="line">	        &#125; catch (IOException e) &#123;</div><div class="line">	            String msg = "设置桌面背景发生异常:" + e.getLocalizedMessage();</div><div class="line">	            ToastUtil.show(msg);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	    public  Bitmap sBitmap(Bitmap b, int w, int h) &#123;</div><div class="line">	        int width = b.getWidth();</div><div class="line">	        int height = b.getHeight();</div><div class="line">	        float scaleWidth = ((float) w) / width;</div><div class="line">	        float scaleHeight = ((float) h) / height;</div><div class="line">	        Matrix matrix = new Matrix();</div><div class="line">	        matrix.postScale(scaleWidth, scaleHeight);//缩放</div><div class="line">	        return Bitmap.createBitmap(b, 0, 0, width, height, matrix, true);</div><div class="line">	    &#125;</div><div class="line">```	   </div><div class="line"></div><div class="line">### 设置锁屏(此处的设置锁屏无法禁用home键，而且不好看，马上推出好看的....)</div><div class="line"></div><div class="line">&lt;h1&gt;&lt;a href="https://github.com/iosline/lockScreen"&gt;好看的锁屏：源码下载&lt;/a&gt;&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;b&gt;设置锁屏壁纸的原理：</div><div class="line"></div><div class="line">  1.监测开机广播，开启锁屏服务，开启锁屏的Activity</div><div class="line"></div><div class="line">  2.设置锁屏壁纸其实就是，监测手机解锁屏幕，然后start一个Activity,该Activity设置壁纸，设置滑动按钮，滑倒指定位置，将当前Activity finish掉即可。</div><div class="line"></div><div class="line">  3.需要注意 home键    Home键在3.1之后就不能屏蔽掉了 所以我们采用广播的方式：在当前Activity注册监听home键的广播,然后重新启动该Activity&lt;/b&gt;</div><div class="line"></div><div class="line">#### 代码如下：</div><div class="line"></div><div class="line">设置锁屏：</div><div class="line"></div><div class="line">```java</div><div class="line">	public class LockManager &#123;</div><div class="line">	</div><div class="line">	    private Activity mContext;</div><div class="line">	</div><div class="line">	    public LockManager(ImageShowActivity imageShowActivity) &#123;</div><div class="line">	        mContext = imageShowActivity;</div><div class="line">	    &#125;</div><div class="line">	</div><div class="line">	    public void setLock(String url) &#123;</div><div class="line">	        int index = url.lastIndexOf("/");</div><div class="line">	        String pirtureName = url.substring(index + 1);</div><div class="line">	        String path = AppConfig.DOWN_PATH;</div><div class="line">	        File file = new File(path);</div><div class="line">	        if (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</div><div class="line">	            file.mkdir();</div><div class="line">	        &#125;</div><div class="line">	        final String target = path + "/" + pirtureName;</div><div class="line">	        File targetFile = new File(target);</div><div class="line">	        if (targetFile.exists()) &#123;</div><div class="line">	            set(target);</div><div class="line">	        &#125; else &#123;</div><div class="line">	            LApplication.getHttpUtils().download(url, target, new RequestCallBack&lt;File&gt;() &#123;</div><div class="line">	</div><div class="line">	                @Override</div><div class="line">	                public void onLoading(long total, long current, boolean isUploading) &#123;</div><div class="line">	                    super.onLoading(total, current, isUploading);</div><div class="line">	</div><div class="line">	                &#125;</div><div class="line">	</div><div class="line">	                @Override</div><div class="line">	                public void onSuccess(ResponseInfo&lt;File&gt; arg0) &#123;</div><div class="line">	                    set(target);</div><div class="line">	                &#125;</div><div class="line">	</div><div class="line">	                @Override</div><div class="line">	                public void onFailure(HttpException arg0, String arg1) &#123;</div><div class="line">	                    ToastUtil.show("网络异常");</div><div class="line">	</div><div class="line">	                &#125;</div><div class="line">	            &#125;);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	</div><div class="line">	    private void set(String target) &#123;</div><div class="line">	        Intent i = new Intent(mContext, LockScreenActivity.class);</div><div class="line">	        i.putExtra("targetPath", target);     //将图片路径传过去，设置新的壁纸</div><div class="line">	        CacheUtil.save("targetLock",target);  //将图片路径存起来，这样做是为了 开机自动从存储系统里获取图片路径</div><div class="line">	        mContext.startActivity(i);</div><div class="line">	    &#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>在AndroidManifest.xml清单文件中配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!-- ############ 锁屏界面、服务、监听器############ --&gt;</div><div class="line">  &lt;activity android:name=".lock.LockScreenActivity" /&gt;</div><div class="line"></div><div class="line">  &lt;service</div><div class="line">      android:name=".lock.LockScreenService"</div><div class="line">      android:process="system" /&gt;</div><div class="line"></div><div class="line">  &lt;receiver</div><div class="line">      android:name=".lock.LockScreenReceiver"</div><div class="line">      android:process=":remote"&gt;</div><div class="line">      &lt;intent-filter android:priority="1000"&gt;</div><div class="line">          &lt;action android:name="android.intent.action.BOOT_COMPLETED" /&gt;</div><div class="line">          &lt;action android:name="android.intent.action.USER_PRESENT" /&gt;</div><div class="line"></div><div class="line">          &lt;category android:name="android.intent.category.HOME" /&gt;</div><div class="line">      &lt;/intent-filter&gt;</div><div class="line">  &lt;/receiver&gt;</div></pre></td></tr></table></figure>
<p>监测开机的广播 广播接收者   (注意：开机启动，启动锁屏的service,然后service里面启动LockScreenActivity)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line"> * 开机广播，启动activity</div><div class="line"> * <span class="doctag">@author</span> jyk</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockScreenReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"LockScreenReceiver"</span>;</div><div class="line">	<span class="comment">//private KeyguardManager keyguardManager = null;</span></div><div class="line">	<span class="comment">//private KeyguardManager.KeyguardLock keyguardLock = null;</span></div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED))&#123;</div><div class="line">			Intent mIntent = <span class="keyword">new</span> Intent(context, LockScreenService.class);</div><div class="line">			mIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line"></div><div class="line">			<span class="comment">//keyguardManager = (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);</span></div><div class="line">			<span class="comment">//keyguardLock = keyguardManager.newKeyguardLock("");</span></div><div class="line">			<span class="comment">//keyguardLock.disableKeyguard(); </span></div><div class="line">			</div><div class="line">			context.startActivity(mIntent);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>锁屏的服务 同时注册屏幕锁住与解锁的广播</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockScreenService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"LockScreenService"</span>;</div><div class="line">	<span class="keyword">private</span> Intent lockIntent;</div><div class="line">	<span class="keyword">private</span> KeyguardManager keyguardManager = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">private</span> KeyguardManager.KeyguardLock keyguardLock = <span class="keyword">null</span>;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent arg0)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate();</div><div class="line">		lockIntent = <span class="keyword">new</span> Intent(LockScreenService.<span class="keyword">this</span>, LockScreenActivity.class);</div><div class="line">		lockIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">		</div><div class="line">		<span class="comment">//注册广播</span></div><div class="line">		IntentFilter mScreenOffFilter = <span class="keyword">new</span> IntentFilter(Intent.ACTION_SCREEN_OFF);</div><div class="line">		LockScreenService.<span class="keyword">this</span>.registerReceiver(mScreenOffReceiver, mScreenOffFilter);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onDestroy();</div><div class="line">           keyguardLock.reenableKeyguard();</div><div class="line">		LockScreenService.<span class="keyword">this</span>.unregisterReceiver(mScreenOffReceiver);</div><div class="line">		<span class="comment">//重新启动activity</span></div><div class="line">		startService(<span class="keyword">new</span> Intent(LockScreenService.<span class="keyword">this</span>, LockScreenService.class));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> Service.START_STICKY;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 屏幕变亮的广播，这里要隐藏系统的锁屏界面</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> BroadcastReceiver mScreenOffReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">			Log.i(TAG, intent.getAction());</div><div class="line">			<span class="keyword">if</span>(intent.getAction().equals(Intent.ACTION_SCREEN_OFF)</div><div class="line">					|| intent.getAction().equals(Intent.ACTION_SCREEN_ON))&#123;</div><div class="line">				</div><div class="line">				keyguardManager = (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);</div><div class="line">				keyguardLock = keyguardManager.newKeyguardLock(<span class="string">""</span>);</div><div class="line">				keyguardLock.disableKeyguard(); <span class="comment">//这里就是取消系统默认的锁屏</span></div><div class="line">				</div><div class="line">				startActivity(lockIntent); <span class="comment">//注意这里跳转的意图</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注意：取消系统默认的锁屏代码出现一次就够了-出现两次就会失效……"><a href="#注意：取消系统默认的锁屏代码出现一次就够了-出现两次就会失效……" class="headerlink" title="注意：取消系统默认的锁屏代码出现一次就够了  出现两次就会失效……"></a>注意：取消系统默认的锁屏代码出现一次就够了  出现两次就会失效……</h3><p>锁屏的LockScreenActivity</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockScreenActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = <span class="string">"LockScreenActivity"</span>;</div><div class="line">    <span class="keyword">private</span> SliderRelativeLayout sliderRelativeLayout;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> MSG_LOCK_SUCESS = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE); <span class="comment">//不要title</span></div><div class="line">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,</div><div class="line">                WindowManager.LayoutParams.FLAG_FULLSCREEN); <span class="comment">//全屏显示</span></div><div class="line">        setContentView(R.layout.activity_lock_screen);</div><div class="line">        LApplication.init(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="comment">//注册广播</span></div><div class="line">        registerReceiver(mHomeKeyEventReceiver, <span class="keyword">new</span> IntentFilter(</div><div class="line">                Intent.ACTION_CLOSE_SYSTEM_DIALOGS));</div><div class="line"></div><div class="line">        String targetPath = getIntent().getStringExtra(<span class="string">"targetPath"</span>);</div><div class="line">        <span class="keyword">if</span>(targetPath == <span class="keyword">null</span>)&#123;</div><div class="line">            targetPath= CacheUtil.getString(<span class="string">"targetLock"</span>);</div><div class="line">        &#125;</div><div class="line">        Drawable bg = Drawable.createFromPath(targetPath);</div><div class="line">        RelativeLayout lockBg = (RelativeLayout) findViewById(R.id.lock_bg);</div><div class="line">        lockBg.setBackgroundDrawable(bg);</div><div class="line"></div><div class="line">        StringData();</div><div class="line">        sliderRelativeLayout = (SliderRelativeLayout) findViewById(R.id.sliderLayout);</div><div class="line">        sliderRelativeLayout.setMainHandler(handler);</div><div class="line">        sliderRelativeLayout.getBackground().setAlpha(<span class="number">180</span>); <span class="comment">//设置背景的透明度</span></div><div class="line"></div><div class="line">        startService(<span class="keyword">new</span> Intent(LockScreenActivity.<span class="keyword">this</span>, LockScreenService.class)); <span class="comment">//这里要显示的调用服务</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StringData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Calendar c = Calendar.getInstance();</div><div class="line">        c.setTimeZone(TimeZone.getTimeZone(<span class="string">"GMT+8:00"</span>));</div><div class="line">        String mYear = String.valueOf(c.get(Calendar.YEAR)); <span class="comment">// 获取当前年份</span></div><div class="line">        String mMonth = String.valueOf(c.get(Calendar.MONTH) + <span class="number">1</span>);<span class="comment">// 获取当前月份</span></div><div class="line">        String mDay = String.valueOf(c.get(Calendar.DAY_OF_MONTH));<span class="comment">// 获取当前月份的日期号码</span></div><div class="line">        String mWay = String.valueOf(c.get(Calendar.DAY_OF_WEEK));</div><div class="line">        <span class="keyword">if</span> (<span class="string">"1"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"日"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"2"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"一"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"3"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"二"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"4"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"三"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"5"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"四"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"6"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"五"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"7"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"六"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ((TextView) findViewById(R.id.time_day)).setText(mMonth + <span class="string">"月"</span> + mDay + <span class="string">"日"</span>);</div><div class="line">        ((TextView) findViewById(R.id.time_week)).setText(<span class="string">"星期"</span> + mWay);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (MSG_LOCK_SUCESS == msg.what) &#123;</div><div class="line">                <span class="comment">//Toast.makeText(getApplicationContext(), R.string.lockSuccess, 1).show();</span></div><div class="line"><span class="comment">//				virbate();</span></div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (msg.what == <span class="number">100</span>) &#123;</div><div class="line">                ((TextView) findViewById(R.id.time_hour)).setText((String) msg.obj);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(msg.what == <span class="number">99</span>)&#123;</div><div class="line">                Intent intent=<span class="keyword">new</span> Intent(LockScreenActivity.<span class="keyword">this</span>,LockScreenActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm"</span>);</div><div class="line">                String str = sdf.format(<span class="keyword">new</span> Date());</div><div class="line">                handler.sendMessage(handler.obtainMessage(<span class="number">100</span>, str));</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 震动</div><div class="line">     */</div><div class="line">    <span class="comment">/*private void virbate()&#123;</span></div><div class="line">		Vibrator vibrator = (Vibrator) this.getSystemService(Context.VIBRATOR_SERVICE);</div><div class="line">		vibrator.vibrate(200);</div><div class="line">	&#125;*/</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 屏蔽掉Home键   自从3.1之后 就不能屏蔽了</div><div class="line">     */</div><div class="line">	<span class="comment">/*@Override</span></div><div class="line">	public void onAttachedToWindow() &#123;</div><div class="line">		this.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);</div><div class="line">		super.onAttachedToWindow();</div><div class="line">	&#125;*/</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 屏蔽掉返回键</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (event.getKeyCode() == KeyEvent.KEYCODE_BACK) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 监听是否点击了home键将客户端推到后台</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> BroadcastReceiver mHomeKeyEventReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">        String SYSTEM_REASON = <span class="string">"reason"</span>;</div><div class="line">        String SYSTEM_HOME_KEY = <span class="string">"homekey"</span>;</div><div class="line">        String SYSTEM_HOME_KEY_LONG = <span class="string">"recentapps"</span>;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            String action = intent.getAction();</div><div class="line">            <span class="keyword">if</span> (action.equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) &#123;</div><div class="line">                String reason = intent.getStringExtra(SYSTEM_REASON);</div><div class="line">                <span class="keyword">if</span> (TextUtils.equals(reason, SYSTEM_HOME_KEY)) &#123;</div><div class="line">                    <span class="comment">//表示按了home键,程序到了后台</span></div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"home"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                    handler.sendEmptyMessageDelayed(<span class="number">99</span>,<span class="number">3</span>);</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(TextUtils.equals(reason, SYSTEM_HOME_KEY_LONG))&#123;</div><div class="line">                    <span class="comment">//表示长按home键,显示最近使用的程序列表</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">   </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        unregisterReceiver(mHomeKeyEventReceiver);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LockScreenActivity 锁屏Activity的布局文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">&lt;RelativeLayout xmlns:tools="http://schemas.android.com/tools"</div><div class="line">    xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:id="@+id/lock_bg"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    tools:context=".LockScreenActivity" &gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_marginTop="100dp"</div><div class="line">        android:orientation="vertical"</div><div class="line">        android:gravity="center_horizontal"</div><div class="line">        android:background="@drawable/shape_locktime_bg"</div><div class="line">        android:padding="20dp" &gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id="@+id/time_hour"</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:text="11:30"</div><div class="line">            android:textColor="@android:color/white"</div><div class="line">            android:textSize="50sp" /&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:orientation="horizontal" &gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id="@+id/time_day"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:text="07月07日"</div><div class="line">                android:textColor="@android:color/white"</div><div class="line">                android:textSize="30sp" /&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id="@+id/time_week"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:text="星期日"</div><div class="line">                android:textColor="@android:color/white"</div><div class="line">                android:textSize="30sp" /&gt;</div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;com.klo.zz.bizhi.lock.SliderRelativeLayout</div><div class="line">        android:id="@+id/sliderLayout"</div><div class="line">        android:layout_width="fill_parent"</div><div class="line">        android:layout_height="50dp"</div><div class="line">        android:layout_alignParentBottom="true"</div><div class="line">        android:layout_marginBottom="100dp"</div><div class="line">        android:background="@drawable/shape_locktime_bg"</div><div class="line">         &gt;</div><div class="line"></div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:id="@+id/relativeLayout1"</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_alignParentLeft="true"</div><div class="line">            android:layout_centerHorizontal="true"</div><div class="line">            android:layout_centerVertical="true" &gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/leftRing"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:src="@mipmap/arrow_right" /&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_centerHorizontal="true"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:textColor="#FF0000" /&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_alignParentRight="true"</div><div class="line">            android:layout_centerHorizontal="true"</div><div class="line">            android:layout_centerVertical="true" &gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/rightRing"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:src="@mipmap/arrow_right" /&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_centerHorizontal="true"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:textColor="#FF0000" /&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width="222dp"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_marginLeft="50dp" &gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/loveView"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="match_parent"</div><div class="line">                android:layout_alignParentLeft="true"</div><div class="line">                android:layout_alignParentTop="true"</div><div class="line">                android:src="@mipmap/open_lock" /&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line">    &lt;/com.klo.zz.bizhi.lock.SliderRelativeLayout&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>滑动解锁屏幕的自定义view</p>
<p>SliderRelativeLayout 这个是从从网上找的，就不列出代码了。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>   不想写…….</p>
<h3 id="源码敬请期待………"><a href="#源码敬请期待………" class="headerlink" title="源码敬请期待………"></a>源码敬请期待………</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android自定义下拉刷新、上拉加载更多及PullToRefresh框架的用法]]></title>
      <url>http://yoursite.com/2015/07/23/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E3%80%81%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A%E5%8F%8APullToRegresh%E6%A1%86%E6%9E%B6%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="一、首先Android-Studio-如何集成PullToRefresh框架"><a href="#一、首先Android-Studio-如何集成PullToRefresh框架" class="headerlink" title="一、首先Android Studio 如何集成PullToRefresh框架"></a>一、首先Android Studio 如何集成PullToRefresh框架</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">   </div><div class="line">    compile <span class="string">'com.loopeer.android.thirdparty.pulltorefresh:Android-PullToRefresh:2.1.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在项目的build.gradle里面添加上述代码，sysc now 同步即可完成集成。</p>
<p>Eclipse的集成不讲，太简单了。</p>
<h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>里面很好的封装了PullToRefreshScrollView、PullToRefreshListView、PullToRefreshGridView.</p>
<p>和listview、gridview、scrollview 的用法一致。</p>
<p>首先在布局文件中</p>
<figure class="highlight"><figcaption><span><com.handmark.pulltorefresh.library.pulltorefreshscrollview< span=""></com.handmark.pulltorefresh.library.pulltorefreshscrollview<></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">        android:id="@+id/select_scroll"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"&gt;</div><div class="line">&lt;/com.handmark.pulltorefresh.library.PullToRefreshScrollView&gt;</div></pre></td></tr></table></figure>
<p>在代码中 这一个接口 支持下拉刷新和上拉加载更多   <b>OnRefreshListener2</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">selectScroll= (PullToRefreshScrollView) view.findViewById(R.id.select_scroll);</div><div class="line">selectScroll.setMode(PullToRefreshBase.Mode.BOTH);      <span class="comment">//支持下拉刷新和上拉加载更多，否则只支持下拉刷新</span></div><div class="line">      selectScroll.setOnRefreshListener(<span class="keyword">new</span> PullToRefreshBase.OnRefreshListener2&lt;ScrollView&gt;() &#123;</div><div class="line">          <span class="keyword">int</span> loadCount = <span class="number">2</span>;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPullDownToRefresh</span><span class="params">(PullToRefreshBase&lt;ScrollView&gt; pullToRefreshBase)</span> </span>&#123;</div><div class="line">              String label = DateUtils.formatDateTime(</div><div class="line">                      getActivity(),</div><div class="line">                      System.currentTimeMillis(),</div><div class="line">                      DateUtils.FORMAT_SHOW_TIME</div><div class="line">                              | DateUtils.FORMAT_SHOW_DATE</div><div class="line">                              | DateUtils.FORMAT_ABBREV_ALL);</div><div class="line">              <span class="comment">// 显示最后更新的时间</span></div><div class="line">              pullToRefreshBase.getLoadingLayoutProxy()</div><div class="line">                      .setLastUpdatedLabel(label);</div><div class="line">              selectList.clear();</div><div class="line">              initSelectData(<span class="number">1</span>);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPullUpToRefresh</span><span class="params">(PullToRefreshBase&lt;ScrollView&gt; pullToRefreshBase)</span> </span>&#123;</div><div class="line">              initSelectData(loadCount);</div><div class="line">              loadCount++;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>别忘了 在加载完数据添加一句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">selectScroll.onRefreshComplete();    <span class="comment">//表示刷新或加载完毕</span></div></pre></td></tr></table></figure>
<p>还有一个接口只支持下拉刷新     <b>OnRefreshListener</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">selectScroll.setOnRefreshListener(<span class="keyword">new</span> PullToRefreshBase.OnRefreshListener&lt;ScrollView&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPullDownToRefresh</span><span class="params">(PullToRefreshBase&lt;ScrollView&gt; pullToRefreshBase)</span> </span>&#123;</div><div class="line">                String label = DateUtils.formatDateTime(</div><div class="line">                        getActivity(),</div><div class="line">                        System.currentTimeMillis(),</div><div class="line">                        DateUtils.FORMAT_SHOW_TIME</div><div class="line">                                | DateUtils.FORMAT_SHOW_DATE</div><div class="line">                                | DateUtils.FORMAT_ABBREV_ALL);</div><div class="line">                <span class="comment">// 显示最后更新的时间</span></div><div class="line">                pullToRefreshBase.getLoadingLayoutProxy()</div><div class="line">                        .setLastUpdatedLabel(label);</div><div class="line">                </div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="出现的问题："><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h3><h5 id="1-使用开源框架pullToRefresh的时候-适用pullToRefreshScrollView中嵌套listview的时候，不管listview上面有什么，会出现listview在顶部的问题"><a href="#1-使用开源框架pullToRefresh的时候-适用pullToRefreshScrollView中嵌套listview的时候，不管listview上面有什么，会出现listview在顶部的问题" class="headerlink" title="1.使用开源框架pullToRefresh的时候 适用pullToRefreshScrollView中嵌套listview的时候，不管listview上面有什么，会出现listview在顶部的问题"></a>1.使用开源框架pullToRefresh的时候 适用pullToRefreshScrollView中嵌套listview的时候，不管listview上面有什么，会出现listview在顶部的问题</h5><p>场景：</p>
<p>遇见这样的场景，listview顶部有一个viewpager，还要下拉刷新和上拉加载更多，网上的listviewForScrollView 会一直测量，造成卡顿的现象，不建议使用scrollview 嵌套viewpager和listviewForScrollView。</p>
<p><b>解决办法：</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pulltorefreshlistview.getRefreshableView().addHeaderView(customviewpager);</div></pre></td></tr></table></figure>
<p></p>
<p>让listview上面的组件获得焦点,有时需注意使用顺序</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lunboPager.setFocusable(<span class="keyword">true</span>);</div><div class="line">lunboPager.setFocusableInTouchMode(<span class="keyword">true</span>);</div><div class="line">lunboPager.requestFocus();</div></pre></td></tr></table></figure>
<h5 id="2-在使用PullToRefreshScrollView的时候，里面使用ListviewForScrollView、GridViewForScrollView-没上拉加载更多、下拉刷新的时候会一直的刷新数据，因为ListviewForScrollView、GridViewForScrollView里面重写了onMeasure-方法-会不断的测量位置，这样很不舒服。"><a href="#2-在使用PullToRefreshScrollView的时候，里面使用ListviewForScrollView、GridViewForScrollView-没上拉加载更多、下拉刷新的时候会一直的刷新数据，因为ListviewForScrollView、GridViewForScrollView里面重写了onMeasure-方法-会不断的测量位置，这样很不舒服。" class="headerlink" title="2.在使用PullToRefreshScrollView的时候，里面使用ListviewForScrollView、GridViewForScrollView,没上拉加载更多、下拉刷新的时候会一直的刷新数据，因为ListviewForScrollView、GridViewForScrollView里面重写了onMeasure()方法,会不断的测量位置，这样很不舒服。"></a>2.在使用PullToRefreshScrollView的时候，里面使用ListviewForScrollView、GridViewForScrollView,没上拉加载更多、下拉刷新的时候会一直的刷新数据，因为ListviewForScrollView、GridViewForScrollView里面重写了onMeasure()方法,会不断的测量位置，这样很不舒服。</h5><p>解决办法：</p>
<p>外界调用只需一句话：将这个自定义添加到布局文件中，调用就是 flowingGroupLayout.addPicture(集合);</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowingGroupLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowingGroupLayout</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinearLayout oneLayout;</div><div class="line">    <span class="keyword">private</span> LinearLayout twoLayout;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        View.inflate(getContext(), R.layout.flowing_pic, <span class="keyword">this</span>);</div><div class="line">        oneLayout = (LinearLayout) findViewById(R.id.ll_one);</div><div class="line">        twoLayout = (LinearLayout) findViewById(R.id.ll_two);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowingGroupLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowingGroupLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//        this.removeAllViews();</span></div><div class="line">        oneLayout.removeAllViews();</div><div class="line">        twoLayout.removeAllViews();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPicture</span><span class="params">(<span class="keyword">final</span> List&lt;GroupPicture&gt; beans)</span> </span>&#123;</div><div class="line">        LLogUtils.v(beans.size() + <span class="string">""</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; beans.size(); i++) &#123;</div><div class="line">            GroupPicture picture = beans.get(i);</div><div class="line">            <span class="keyword">final</span> View view = LViewHelper.getView(R.layout.picture_item, getContext());</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI1 = i;</div><div class="line">            LApplication.getBitmapUtils().display(view.findViewById(R.id.picture), picture.getPictureUrl(), <span class="keyword">new</span> BitmapLoadCallBack&lt;View&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadCompleted</span><span class="params">(View container, String s, Bitmap bitmap, BitmapDisplayConfig bitmapDisplayConfig, BitmapLoadFrom bitmapLoadFrom)</span> </span>&#123;        </div><div class="line">                       <span class="comment">//这里面是对图片的缩放、拉伸然后设置到布局上，不用管</span></div><div class="line">                    <span class="keyword">int</span> bitmapWidth=bitmap.getWidth();</div><div class="line">                    <span class="keyword">int</span> bitmapHeight=bitmap.getHeight();</div><div class="line">                    <span class="keyword">int</span> screenWidth=ScreenUtil.getWidth()/<span class="number">2</span>;</div><div class="line">                    <span class="keyword">if</span>(bitmapHeight&lt;screenWidth || bitmapWidth &lt; screenWidth)&#123;</div><div class="line">                        <span class="keyword">float</span> scale;</div><div class="line">                        <span class="keyword">float</span> scaleHeight=(<span class="keyword">float</span>)screenWidth/bitmapHeight;</div><div class="line">                        <span class="keyword">float</span> scaleWidth=(<span class="keyword">float</span>)screenWidth/bitmapWidth;</div><div class="line">                        <span class="keyword">if</span>(scaleHeight &gt; scaleWidth)&#123;</div><div class="line">                            scale=scaleHeight;</div><div class="line">                        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                            scale=scaleWidth;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">int</span> newBitWidth=(<span class="keyword">int</span>)(bitmapWidth*scale);</div><div class="line">                        <span class="keyword">int</span> newBitmapHeight=(<span class="keyword">int</span>)(bitmapHeight*scale);</div><div class="line">                        Bitmap newBitmap = Bitmap.createScaledBitmap(bitmap, newBitWidth, newBitmapHeight, <span class="keyword">true</span>);</div><div class="line">                        LLImageUtils.setBitmap((ImageView)container,screenWidth,screenWidth,newBitmap);</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        Bitmap showBitmap = ScaleBitmap.centerSquareScaleBitmap(bitmap, ScreenUtil.getWidth() / <span class="number">2</span>);</div><div class="line">                        LLImageUtils.setBitmap((ImageView)container,<span class="number">0</span>,showBitmap.getHeight(),showBitmap);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    LayoutParams lp = <span class="keyword">new</span> LayoutParams(ScreenUtil.getWidth()/<span class="number">2</span>,ScreenUtil.getWidth()/<span class="number">2</span>);</div><div class="line">                    lp.bottomMargin=ScreenUtil.dp2px(<span class="number">1</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (finalI1 % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">                        <span class="comment">//偶数</span></div><div class="line">                        oneLayout.addView(view, lp);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">//单数</span></div><div class="line">                        twoLayout.addView(view, lp);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(View view, String s, Drawable drawable)</span> </span>&#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</div><div class="line">            view.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    Intent intent = <span class="keyword">new</span> Intent(getContext(), ImageShowActivity.class);</div><div class="line">                    String groupId = beans.get(finalI).getGroupId();</div><div class="line">                    intent.putExtra(<span class="string">"groupId"</span>, groupId);</div><div class="line">                    getContext().startActivity(intent);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p>   Android自定义控件——ListView的下拉刷新与上拉加载</p>
<pre><code>http://www.tuicool.com/articles/3uAVRva
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决listview中每一项都有不同的布局]]></title>
      <url>http://yoursite.com/2015/07/23/%E8%A7%A3%E5%86%B3listview%E4%B8%AD%E6%AF%8F%E4%B8%80%E9%A1%B9%E9%83%BD%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h3 id="方法一：（转载）"><a href="#方法一：（转载）" class="headerlink" title="方法一：（转载）"></a>方法一：（转载）</h3><p>实现代码</p>
<p>Adapter的代码</p>
<p>其中:ViewHolder分别是三个不同的布局,也就是ListView中每一项的布局</p>
<p>TYPE_1…是三种类型.</p>
<p>在使用不同布局的时候,getItemViewType和getViewType不能少,一般是不用这两个函数的重载的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunRankAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;  </div><div class="line">    ArrayList&lt;HashMap&lt;String, Object&gt;&gt; ls;  </div><div class="line">    Context mContext;  </div><div class="line">    LinearLayout linearLayout = <span class="keyword">null</span>;  </div><div class="line">    LayoutInflater inflater;  </div><div class="line">    TextView tex;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> VIEW_TYPE = <span class="number">3</span>;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> TYPE_1 = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> TYPE_2 = <span class="number">1</span>;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> TYPE_3 = <span class="number">2</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RunRankAdapter</span><span class="params">(Context context,  </span></span></div><div class="line">            ArrayList&lt;HashMap&lt;String, Object&gt;&gt; list) &#123;  </div><div class="line">        ls = list;  </div><div class="line">        mContext = context;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> ls.size();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> ls.get(position);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">// 每个convert view都会调用此方法，获得当前所需要的view样式  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> p = position;  </div><div class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>)  </div><div class="line">            <span class="keyword">return</span> TYPE_1;  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">1</span>)  </div><div class="line">            <span class="keyword">return</span> TYPE_2;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">            <span class="keyword">return</span> TYPE_3;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewTypeCount</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">3</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;  </div><div class="line">        ViewHolder1 holder1 = <span class="keyword">null</span>;  </div><div class="line">        ViewHolder2 holder2 = <span class="keyword">null</span>;  </div><div class="line">        ViewHolder3 holder3 = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">int</span> type = getItemViewType(position);  </div><div class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;  </div><div class="line">            inflater = LayoutInflater.from(mContext);  </div><div class="line">            <span class="comment">// 按当前所需的样式，确定new的布局  </span></div><div class="line">            <span class="keyword">switch</span> (type) &#123;  </div><div class="line">            <span class="keyword">case</span> TYPE_1:  </div><div class="line">  </div><div class="line">                convertView = inflater.inflate(R.layout.item_runrank1,  </div><div class="line">                        parent, <span class="keyword">false</span>);  </div><div class="line">                holder1 = <span class="keyword">new</span> ViewHolder1();  </div><div class="line">                holder1.rank1 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list1_rank);  </div><div class="line">                holder1.time1 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list1_time);  </div><div class="line">                convertView.setTag(holder1);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> TYPE_2:  </div><div class="line">                convertView = inflater.inflate(R.layout.item_runrank2,  </div><div class="line">                        parent, <span class="keyword">false</span>);  </div><div class="line">                holder2 = <span class="keyword">new</span> ViewHolder2();  </div><div class="line">                holder2.rank2 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list2_rank);  </div><div class="line">                holder2.time2 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list2_time);  </div><div class="line">                convertView.setTag(holder2);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> TYPE_3:  </div><div class="line">                convertView = inflater.inflate(R.layout.item_runrank3,  </div><div class="line">                        parent, <span class="keyword">false</span>);  </div><div class="line">                holder3 = <span class="keyword">new</span> ViewHolder3();  </div><div class="line">                holder3.rank3 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list3_rank);  </div><div class="line">                holder3.time3 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list3_time);  </div><div class="line">                convertView.setTag(holder3);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">default</span>:  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            <span class="keyword">switch</span> (type) &#123;  </div><div class="line">            <span class="keyword">case</span> TYPE_1:  </div><div class="line">                holder1 = (ViewHolder1) convertView.getTag();  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> TYPE_2:  </div><div class="line">                holder2 = (ViewHolder2) convertView.getTag();  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> TYPE_3:  </div><div class="line">                holder3 = (ViewHolder3) convertView.getTag();  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">// 设置资源  </span></div><div class="line">        <span class="keyword">switch</span> (type) &#123;  </div><div class="line">        <span class="keyword">case</span> TYPE_1:  </div><div class="line">            holder1.rank1.setText(<span class="string">""</span> + (position + <span class="number">1</span>));  </div><div class="line">            holder1.time1.setText(ls.get(position).get(<span class="string">"time"</span>).toString());  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> TYPE_2:  </div><div class="line">            holder2.rank2.setText(<span class="string">""</span> + (position + <span class="number">1</span>));  </div><div class="line">            holder2.time2.setText(ls.get(position).get(<span class="string">"time"</span>).toString());  </div><div class="line">            holder2.totaldistance2.setText(ls.get(position)  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> TYPE_3:  </div><div class="line">            holder3.rank3.setText(<span class="string">""</span> + (position + <span class="number">1</span>));  </div><div class="line">            holder3.time3.setText(ls.get(position).get(<span class="string">"time"</span>).toString());  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="keyword">return</span> convertView;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder1</span> </span>&#123;  </div><div class="line">        TextView rank1;  </div><div class="line">        TextView time1;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder2</span> </span>&#123;  </div><div class="line">        TextView rank2;  </div><div class="line">        TextView time2;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder3</span> </span>&#123;  </div><div class="line">        TextView rank3;  </div><div class="line">        TextView time3;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用方式:</p>
<p>声明并定义自己的Adapter,在ListView中设置他的Adapter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> RunRankAdapter runRankAdapter;    </div><div class="line">ArrayList&lt;HashMap&lt;String, Object&gt;&gt; runRank;    </div><div class="line">ListView lv_runRank;  </div><div class="line">runRank = <span class="keyword">new</span> ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();    </div><div class="line">runRankAdapter = <span class="keyword">new</span> RunRankAdapter(<span class="keyword">this</span>, runRank);    </div><div class="line">lv_runRank = (ListView) findViewById(R.id.lv_runRank);    </div><div class="line">lv_runRank.setAdapter(runRankAdapter);</div></pre></td></tr></table></figure>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>在主布局文件中包含一个LinearLayout. 并且设置android:orientation=”vertical”</p>
<p>定义两种不同的布局文件，然后代码中,根据不同条件调用.addview向LinearLayout加载就可以了</p>
<h3 id="自己的理解：-（拿两个不同的item举例）"><a href="#自己的理解：-（拿两个不同的item举例）" class="headerlink" title="自己的理解：  （拿两个不同的item举例）"></a>自己的理解：  （拿两个不同的item举例）</h3><p>这两种方法不同的item少了还行，多了就行不通了</p>
<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>创建两个不同布局的item，然后在adapter中根据position位置的不同判断添加不同的item布局</p>
<h4 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h4><p>创建一个布局文件，用LinearLayout设置android:orientation=”vertical”<br>定义两种不同的布局，在代码中根据position及条件设置Visiablity属性为visiable及gone即可。</p>
<h3 id="复杂的多个item不同的情况，后续实现添加-敬请期待……"><a href="#复杂的多个item不同的情况，后续实现添加-敬请期待……" class="headerlink" title="复杂的多个item不同的情况，后续实现添加,敬请期待…….."></a>复杂的多个item不同的情况，后续实现添加,敬请期待……..</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决scrollview中嵌套listview、gridview的问题]]></title>
      <url>http://yoursite.com/2015/07/23/%E8%A7%A3%E5%86%B3scrollview%E4%B8%AD%E5%B5%8C%E5%A5%97listview%E3%80%81gridview%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="出现的问题："><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h3><p>   1.在SrollView中嵌套ListView，ListView的显示会有问题，只显示一行或显示效果与预期不同，这是因为android禁止这样使用，放入ScrollView中的ListView的高度是无法计算的。</p>
<p>   2.嵌套中的子ListView和GridvIew是无法滑动的，因为子控件的滑动事件会被外面的ScrollView吃掉，如果想让子控件可以滑动，只能强行的截取滑动的相关事件了。</p>
<h3 id="原因：原因就是scroll事件的消费处理以及ListView控件的高度设定问题。"><a href="#原因：原因就是scroll事件的消费处理以及ListView控件的高度设定问题。" class="headerlink" title="原因：原因就是scroll事件的消费处理以及ListView控件的高度设定问题。"></a>原因：原因就是scroll事件的消费处理以及ListView控件的高度设定问题。</h3><h3 id="解决的办法："><a href="#解决的办法：" class="headerlink" title="解决的办法："></a>解决的办法：</h3><h4 id="一、手动设置listview高度"><a href="#一、手动设置listview高度" class="headerlink" title="一、手动设置listview高度"></a>一、手动设置listview高度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 动态设置ListView的高度</div><div class="line">* <span class="doctag">@param</span> listView</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListViewHeightBasedOnChildren</span><span class="params">(ListView listView)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span>(listView == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">   ListAdapter listAdapter = listView.getAdapter();</div><div class="line">   <span class="keyword">if</span> (listAdapter == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="comment">// pre-condition</span></div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">int</span> totalHeight = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; listAdapter.getCount(); i++) &#123;</div><div class="line">       View listItem = listAdapter.getView(i, <span class="keyword">null</span>, listView);</div><div class="line">       listItem.measure(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">       totalHeight += listItem.getMeasuredHeight();</div><div class="line">   &#125;</div><div class="line">   ViewGroup.LayoutParams params = listView.getLayoutParams();</div><div class="line">   params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - <span class="number">1</span>));</div><div class="line">   listView.setLayoutParams(params);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  上面这个方法就是设定ListView的高度了，<b>在为ListView设置了Adapter之后使用</b>，就可以解决问题了。</p>
<p>  但是这个方法有个两个细节需要注意：</p>
<p>   <b>一是Adapter中getView方法返回的View的必须由LinearLayout组成</b>，因为只有LinearLayout才有measure()方法，如果使用其他的布局如RelativeLayout，在调用listItem.measure(0, 0);时就会抛异常，因为除LinearLayout外的其他布局的这个方法就是直接抛异常的，没理由…。我最初使用的就是这个方法，但是因为子控件的顶层布局是RelativeLayout，所以一直报错，不得不放弃这个方法。</p>
<p>   <b>二是需要手动把ScrollView滚动至最顶端</b>，因为使用这个方法的话，默认在ScrollView顶端的项是ListView，具体原因不了解，求大神解答…可以在Activity中设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sv = (ScrollView) findViewById(R.id.act_solution_1_sv);</div><div class="line">sv.ScrollTo(0,0);</div></pre></td></tr></table></figure>
<h4 id="二、使用LinearLayout取代ListView"><a href="#二、使用LinearLayout取代ListView" class="headerlink" title="二、使用LinearLayout取代ListView"></a>二、使用LinearLayout取代ListView</h4><p>既然ListView不能适应ScrollView，那就换一个可以适应ScrollView的控件，干嘛非要吊死在ListView这一棵树上呢？</p>
<p>而LinearLayout是最好的选择。但如果我仍想继续使用已经定义好的Adater呢？我们只需要自定义一个类继承自LinearLayout，为其加上对BaseAdapter的适配。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 取代ListView的LinearLayout，使之能够成功嵌套在ScrollView中</div><div class="line">* <span class="doctag">@author</span> </div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearLayoutForListView</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> BaseAdapter adapter;</div><div class="line">   <span class="keyword">private</span> OnClickListener onClickListener = <span class="keyword">null</span>;</div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 绑定布局</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindLinearLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> count = adapter.getCount();</div><div class="line">       <span class="keyword">this</span>.removeAllViews();</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">           View v = adapter.getView(i, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">           v.setOnClickListener(<span class="keyword">this</span>.onClickListener);</div><div class="line">           addView(v, i);</div><div class="line">       &#125;</div><div class="line">      Log.v(<span class="string">"countTAG"</span>, <span class="string">""</span> + count);</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LinearLayoutForListView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它的使用和listview一样，写在布局文件里 然后setAdapter就ok了</p>
<h4 id="三、自定义适应ScrollView的listview"><a href="#三、自定义适应ScrollView的listview" class="headerlink" title="三、自定义适应ScrollView的listview"></a>三、自定义适应ScrollView的listview</h4><p>自定义一个类继承自ListView，通过重写其onMeasure方法，达到对ScrollView适配的效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.widget.ListView;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewForScrollView</span> <span class="keyword">extends</span> <span class="title">ListView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewForScrollView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewForScrollView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewForScrollView</span><span class="params">(Context context, AttributeSet attrs,</span></span></div><div class="line">        <span class="keyword">int</span> defStyle) &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重写该方法，达到使ListView适应ScrollView的效果</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; <span class="number">2</span>,</div><div class="line">        MeasureSpec.AT_MOST);</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, expandSpec);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>三个构造方法完全不用动，只要重写onMeasure方法，需要改动的地方比起方法2少了不是一点半点…</p>
<p>在xml布局中和Activty中使用的ListView改成这个自定义ListView就行了。代码就省了吧…</p>
<p>这个方法和方法1有一个同样的毛病，就是默认显示的首项是ListView，需要手动把ScrollView滚动至最顶端。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">	sv = (ScrollView) findViewById(R.id.act_solution_4_sv);</div><div class="line">	sv.smoothScrollTo(0, 0);</div><div class="line">```	</div><div class="line">&lt;b&gt;GridView也一样，只需重写onMeasure()方法即可&lt;/b&gt;</div><div class="line"></div><div class="line">```java</div><div class="line">	public class NoScrollGridView extends GridView&#123;  </div><div class="line">	  </div><div class="line">	     public NoScrollGridView(Context context, AttributeSet attrs)&#123;  </div><div class="line">	          super(context, attrs);  </div><div class="line">	     &#125;  </div><div class="line">	  </div><div class="line">	     public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)&#123;  </div><div class="line">	          int mExpandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; 2, MeasureSpec.AT_MOST);  </div><div class="line">	          super.onMeasure(widthMeasureSpec, mExpandSpec);  </div><div class="line">	     &#125;  </div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>使用PullToRefresh下拉刷新和上拉加载更多时，sv.ScrollTo(0,0) 是起不到作用的。</p>
<p>解决办法一：  亲测没用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pullScrollView.getRefreshableView().ScrollTo(<span class="number">0</span>,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>解决办法二： 在PullToRefreshAdapterViewBase源码中添加这两个方法即可 （本人觉得麻烦，不建议）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">	 public final void setSelection(int scrollTop)&#123;</div><div class="line">	       mRefreshableView.setSelection(scrollTop);</div><div class="line">	   &#125;</div><div class="line">	    public final int getFirstVisiablePosition()&#123;</div><div class="line">	        return mRefreshableView.getFirstVisiablePosition();</div><div class="line">	    &#125;</div><div class="line">```	    </div><div class="line">解决办法三：&lt;b&gt;让listview顶部的组件获得焦点（非常好用),有时需注意使用顺序&lt;/b&gt;</div><div class="line">	</div><div class="line">```java		 </div><div class="line">		tsstPager.setFocusable(true);</div><div class="line">		testPager.setFocusableInTouchMode(true);</div><div class="line">		testPager.requestFocus();</div></pre></td></tr></table></figure>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><h4 id="上述几个方法无非就是对listview（gridview）进行重新测量，但在pullToRefresh加载更多和下拉刷新时，会出现不停的测量，不停的刷新数据，手机屏幕乱跳等现象。解决办法：暂无。有能力再解决。"><a href="#上述几个方法无非就是对listview（gridview）进行重新测量，但在pullToRefresh加载更多和下拉刷新时，会出现不停的测量，不停的刷新数据，手机屏幕乱跳等现象。解决办法：暂无。有能力再解决。" class="headerlink" title="上述几个方法无非就是对listview（gridview）进行重新测量，但在pullToRefresh加载更多和下拉刷新时，会出现不停的测量，不停的刷新数据，手机屏幕乱跳等现象。解决办法：暂无。有能力再解决。"></a>上述几个方法无非就是对listview（gridview）进行重新测量，但在pullToRefresh加载更多和下拉刷新时，会出现不停的测量，不停的刷新数据，手机屏幕乱跳等现象。解决办法：暂无。有能力再解决。</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于EditText的一些特别使用]]></title>
      <url>http://yoursite.com/2015/07/23/%E5%85%B3%E4%BA%8EEditText%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E5%88%AB%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p> 首先，会有这样的需求，进入这个Activity,会默认让当前EditText不获取焦点，点击这个组件之后才获取焦点，弹出输入法，（或者做一些操作）。</p>
<p>解决办法：<br>   在布局文件中，在这个EditText组件的父view中添加</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">         android:focusable=<span class="string">"true"</span></div><div class="line">         android:focusableInTouchMode=<span class="string">"true"</span></div><div class="line">```       </div><div class="line">   即可解决让当前EditText默认不获取焦点。</div><div class="line"></div><div class="line"></div><div class="line">对EditText进行监听，失去和获取焦点的事件</div><div class="line">    </div><div class="line"></div><div class="line">```java</div><div class="line">     input.setOnFocusChangeListener(<span class="keyword">new</span>    View.OnFocusChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFocusChange</span><span class="params">(View v, <span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span>(hasFocus)&#123;</div><div class="line">                   <span class="comment">//逻辑操作</span></div><div class="line">                   input.clearFocus();  <span class="comment">//失去焦点 不然输入法会一直存在</span></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                  <span class="comment">//逻辑操作</span></div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>增加一个需求，就是让点击搜索之后EditText中显示刚才输入的值,其实很简单，只需要一句话</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">input.setText(inputContent);</div></pre></td></tr></table></figure>
<h3 id="一、进入这个页面的时候默认弹出输入法"><a href="#一、进入这个页面的时候默认弹出输入法" class="headerlink" title="一、进入这个页面的时候默认弹出输入法"></a>一、进入这个页面的时候默认弹出输入法</h3><p>看一个manifest中Activity的配置，如果这个页面有EditText，并且我们想要进入这个页面的时候默认弹出输入法，可以这样设置这个属性：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">     android:windowSoftInputMode=stateVisible</div><div class="line">```     </div><div class="line">这样就会默认弹起输入法，当然还有别的办法。</div><div class="line"></div><div class="line">```java</div><div class="line">     &lt;activity android:name=".ui.LoginActivity" </div><div class="line">                  android:configChanges="orientation|keyboardHidden|locale" </div><div class="line">                  android:screenOrientation="portrait" </div><div class="line">                  android:windowSoftInputMode="stateVisible|adjustPan" &gt; </div><div class="line">      &lt;/activity&gt;</div></pre></td></tr></table></figure></p>
<h3 id="二、Android-EditText-不弹出输入法总结"><a href="#二、Android-EditText-不弹出输入法总结" class="headerlink" title="二、Android EditText 不弹出输入法总结"></a>二、Android EditText 不弹出输入法总结</h3><p>方法一：</p>
<p>在AndroidMainfest.xml中选择哪个activity，设置windowSoftInputMode属性为adjustUnspecified|stateHidden</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=<span class="string">".Main"</span> </div><div class="line">     android:windowSoftInputMode=<span class="string">"adjustUnspecified|stateHidden"</span> </div><div class="line">     android:configChanges=<span class="string">"orientation|keyboardHidden"</span>&gt; </div><div class="line">&lt; /activity&gt;</div></pre></td></tr></table></figure>
<p>方法二：</p>
<p>让EditText失去焦点，使用EditText的clearFocus方法</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">		EditText edit=(EditText)findViewById(R.id.edit); </div><div class="line">		edit.clearFocus();  </div><div class="line">```		</div><div class="line">方法三：</div><div class="line"></div><div class="line">强制隐藏Android输入法窗口</div><div class="line"></div><div class="line">例如：</div><div class="line"></div><div class="line">```java</div><div class="line">		EditText edit=(EditText)findViewById(R.id.edit); </div><div class="line">		InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE); </div><div class="line">		imm.hideSoftInputFromWindow(edit.getWindowToken(),<span class="number">0</span>); </div><div class="line">```		</div><div class="line">方法四：</div><div class="line"></div><div class="line">EditText始终不弹出软件键盘</div><div class="line"></div><div class="line">例：</div></pre></td></tr></table></figure>
<pre><code>EditText edit=(EditText)findViewById(R.id.edit); 
edit.setInputType(InputType.TYPE_NULL);  
</code></pre><p>```</p>
<h3 id="三、总结-后续添加，敬请期待……"><a href="#三、总结-后续添加，敬请期待……" class="headerlink" title="三、总结 后续添加，敬请期待…….."></a>三、总结 后续添加，敬请期待……..</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[my first blog]]></title>
      <url>http://yoursite.com/2015/07/16/my-first-blog/</url>
      <content type="html"><![CDATA[<h3 id="初次见面，请多关照"><a href="#初次见面，请多关照" class="headerlink" title="初次见面，请多关照"></a>初次见面，请多关照</h3><p>  从建这个博客开始，即开始一种新的体验。为了很好的督促自己，让自己不至于迷失的太远。将自己工作中遇到的问题，涉及到的知识点及难点记录下来便于知识的掌握和将来时时的回头查阅，更好的丰富自己。</p>
<h3 id="正解（我自己都不信）"><a href="#正解（我自己都不信）" class="headerlink" title="正解（我自己都不信）"></a>正解（我自己都不信）</h3><p>  瞎扯蛋，以上皆为废话…………</p>
]]></content>
    </entry>
    
  
  
</search>
