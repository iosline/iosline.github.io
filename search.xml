<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[android mvp初级基本架构设计]]></title>
      <url>http://yoursite.com/2017/05/25/android-mvp%E5%88%9D%E7%BA%A7%E5%9F%BA%E6%9C%AC%E6%9E%B6%E6%9E%84%E8%AE%BE%E8%AE%A1/</url>
      <content type="html"><![CDATA[<p>本文涉及的主要是在android方面的。提到MVP，那就不得不提到MVC，这两个的区别，同时MVP究竟好在哪里？</p>
<p>实际项目了解具体使用请移步<a href="https://github.com/iosline/ZSXY" target="_blank" rel="external">https://github.com/iosline/ZSXY</a></p>
<h3 id="MVC-model-view-controller"><a href="#MVC-model-view-controller" class="headerlink" title="MVC(model-view-controller)"></a>MVC(model-view-controller)</h3><p>model主要负责数据的获取本地或网络及相关的一些数据处理；view主要负责视图的显示，基本就是xml；而controller的工作全部交给了activity,actvivity做的东西很多，时间长了很臃肿。</p>
<h3 id="MVP-model-view-presenter"><a href="#MVP-model-view-presenter" class="headerlink" title="MVP(model-view-presenter)"></a>MVP(model-view-presenter)</h3><h4 id="mvp的诞生"><a href="#mvp的诞生" class="headerlink" title="mvp的诞生"></a>mvp的诞生</h4><p>在Android中，业务逻辑和数据存取是紧紧耦合的，很多缺乏经验的开发者很可能会将各种各样的业务逻辑塞进某个Activity、Fragment或者自定义View中，这样会使得这些组件的单个类型臃肿不堪。如果不将具体的业务逻辑抽离出来，当UI变化时，你就需要去原来的View中抽离具体业务逻辑，这必然会很麻烦并且易出错。</p>
<ol><br><li>Presenter – 交互中间人：Presenter主要作为沟通View与Model的桥梁，它从Model层检索数据后，返回给View层，使得View与Model之间没有耦合，也将业务逻辑从View角色上抽离出来。<br><br></li><li>View – 用户界面：View通常是指Activity、Fragment或者某个View控件，它含有一个Presenter成员变量。通常View需要实现一个逻辑接口，将View上的操作转交给Presenter进行实现，最后，Presenter 调用View逻辑接口将结果返回给View元素。<br><br></li><li>Model – 数据的存取：Model 角色主要是提供数据的存取功能。Presenter 需要通过Model层存储、获取数据，Model就像一个数据仓库。更直白的说，Model是封装了数据库DAO或者网络获取数据的角色，或者两种数据方式获取的集合。<br></li></ol>

<p>盗用一下别人的图<br><img src="http://img.blog.csdn.net/20160120100717863"></p>
<h4 id="MVP与MVC的区别"><a href="#MVP与MVC的区别" class="headerlink" title="MVP与MVC的区别"></a>MVP与MVC的区别</h4><p>从上图可以看出：MVC的耦合性还是较高的，View可以直接访问Model，导致3者之间构成了回路。所以两者的主要区别是，MVP中View不能直接访问Model，需要通过Presenter发出请求，View与Model不能直接通信。</p>
<h4 id="MVP的好处"><a href="#MVP的好处" class="headerlink" title="MVP的好处"></a>MVP的好处</h4><p>(1).MVP模式会解除View与Model的耦合，有效的降低View的复杂性。同时又带来了良好的可扩展性、可测试性，保证系统的整洁性和灵活性。</p>
<p>(2).MVP模式可以分离显示层与逻辑层，它们之间通过接口进行通信，降低耦合。理想化的MVP模式可以实现同一份逻辑代码搭配不同的显示界面，因为它们之间并不依赖与具体，而是依赖于抽象。这使得Presenter可以运用于任何实现了View逻辑接口的UI，使之具有更广泛的适用性，保证了灵活度。</p>
<h3 id="MVP基类架构设计"><a href="#MVP基类架构设计" class="headerlink" title="MVP基类架构设计"></a>MVP基类架构设计</h3><h5 id="BaseView"><a href="#BaseView" class="headerlink" title="BaseView"></a>BaseView</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span>  <span class="title">BaseView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showLoading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hideLoading</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">showError</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="BasePresenter"><a href="#BasePresenter" class="headerlink" title="BasePresenter"></a>BasePresenter</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BasePresenter</span>&lt;<span class="title">V</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> V mView;</div><div class="line"></div><div class="line">    <span class="comment">//rxjava</span></div><div class="line">    <span class="keyword">protected</span> Subscription mSubscription;</div><div class="line">    <span class="comment">//View的绑定</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(V view)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mView=view;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//View的销毁</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dettach</span><span class="params">()</span></span>&#123;</div><div class="line">        mView = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span> (mSubscription != <span class="keyword">null</span>)&#123;</div><div class="line">            mSubscription.unsubscribe();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="BaseActivity"><a href="#BaseActivity" class="headerlink" title="BaseActivity"></a>BaseActivity</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseAcitivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> Context mContext;</div><div class="line">    <span class="keyword">protected</span> Unbinder mUnbinder;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(getLayoutRes());</div><div class="line">        mContext=<span class="keyword">this</span>;</div><div class="line">        mUnbinder=ButterKnife.bind(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        initData();</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">    <span class="comment">//初始化外面传过来的值 </span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getLayoutRes</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        mUnbinder.unbind();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="BaseMvpActivity"><a href="#BaseMvpActivity" class="headerlink" title="BaseMvpActivity"></a>BaseMvpActivity</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseMvpAcitivity</span>&lt;<span class="title">V</span>,<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">V</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">BaseAcitivity</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> T presenter;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        initPresenter();</div><div class="line">        fetchData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//获取网路数据</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fetchData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="comment">//初始化presenter</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initPresenter</span><span class="params">()</span> </span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        <span class="keyword">if</span> (presenter != <span class="keyword">null</span>)&#123;</div><div class="line">            presenter.attach((V) <span class="keyword">this</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        <span class="keyword">if</span> (presenter != <span class="keyword">null</span>)&#123;</div><div class="line">            presenter.dettach();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="BaseFragment"><a href="#BaseFragment" class="headerlink" title="BaseFragment"></a>BaseFragment</h5><p>涉及到了 fragment的懒加载</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">    <span class="keyword">protected</span> BaseAcitivity mActivity;</div><div class="line">    <span class="keyword">protected</span> View mRootView;</div><div class="line">    <span class="keyword">protected</span> Unbinder mUnbinder;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mIsMulti = <span class="keyword">false</span>;  <span class="comment">//懒加载</span></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onAttach</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onAttach(context);</div><div class="line">        mActivity= (BaseAcitivity) context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        initData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>;</div><div class="line"></div><div class="line">    <span class="meta">@Nullable</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, @Nullable ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mRootView == <span class="keyword">null</span>) &#123;</div><div class="line">            mRootView = inflater.inflate(getLayoutRes(), <span class="keyword">null</span>);</div><div class="line">            mUnbinder=ButterKnife.bind(<span class="keyword">this</span>,mRootView);</div><div class="line">            initViews();</div><div class="line">        &#125;</div><div class="line">        ViewGroup parent = (ViewGroup) mRootView.getParent();</div><div class="line">        <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</div><div class="line">            parent.removeView(mRootView);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> mRootView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initViews</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getLayoutRes</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onActivityCreated</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onActivityCreated(savedInstanceState);</div><div class="line">        <span class="keyword">if</span> (getUserVisibleHint() &amp;&amp; mRootView != <span class="keyword">null</span> &amp;&amp; !mIsMulti) &#123;</div><div class="line">            mIsMulti = <span class="keyword">true</span>;</div><div class="line">            fetchData();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">fetchData</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (isVisibleToUser &amp;&amp; isVisible() &amp;&amp; mRootView != <span class="keyword">null</span> &amp;&amp; !mIsMulti) &#123;</div><div class="line">            mIsMulti = <span class="keyword">true</span>;</div><div class="line">            fetchData();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        mUnbinder.unbind();</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="BaseMvpFragment"><a href="#BaseMvpFragment" class="headerlink" title="BaseMvpFragment"></a>BaseMvpFragment</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * Fragment 声明周期 onAttach()——&gt;onCreate()——&gt;onCreateView()——&gt;onActivityCreated()</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseMvpFragment</span>&lt;<span class="title">V</span>,<span class="title">T</span> <span class="keyword">extends</span> <span class="title">BasePresenter</span>&lt;<span class="title">V</span>&gt;&gt; <span class="keyword">extends</span> <span class="title">BaseFragment</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">protected</span> T presenter;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        initPresenter();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">initPresenter</span><span class="params">()</span></span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onResume</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onResume();</div><div class="line">        presenter.attach((V) <span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        presenter.dettach();</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>实际项目了解具体使用请移步<a href="https://github.com/iosline/ZSXY" target="_blank" rel="external">https://github.com/iosline/ZSXY</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 上传图片到七牛云存储]]></title>
      <url>http://yoursite.com/2017/04/13/Android-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0%E4%B8%83%E7%89%9B%E4%BA%91%E5%AD%98%E5%82%A8/</url>
      <content type="html"><![CDATA[<p>自己弄一个项目要上传头像等图片至网络云存储，就找到了七牛。但是翻了七牛的Android SDK文档，一直卡在没有后台我怎么获取上传凭证。翻了好多资料，终于找到了解决办法，记录一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MAC_NAME = <span class="string">"HmacSHA1"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENCODING = <span class="string">"UTF-8"</span>;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">uploadProfile</span><span class="params">(String imagePath)</span></span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="comment">//  构造上传策略</span></div><div class="line">            JSONObject _json = <span class="keyword">new</span> JSONObject();</div><div class="line">            <span class="keyword">long</span> _dataline = System.currentTimeMillis() / <span class="number">1000</span> + <span class="number">3600</span>;</div><div class="line">            _json.put(<span class="string">"deadline"</span>, _dataline);<span class="comment">// 有效时间为一个小时</span></div><div class="line">            _json.put(<span class="string">"scope"</span>, Constants.QINIU_BUCKETNAME);</div><div class="line">            String _encodedPutPolicy = UrlSafeBase64.encodeToString(_json</div><div class="line">                    .toString().getBytes());</div><div class="line">            <span class="keyword">byte</span>[] _sign = HmacSHA1Encrypt(_encodedPutPolicy, Constants.QINIU_SECRET_KEY);</div><div class="line">            String _encodedSign = UrlSafeBase64.encodeToString(_sign);</div><div class="line">            String _uploadToken = Constants.QINIU_ACCESS_KEY + <span class="string">':'</span> + _encodedSign + <span class="string">':'</span></div><div class="line">                    + _encodedPutPolicy;</div><div class="line">            UploadManager uploadManager = <span class="keyword">new</span> UploadManager();</div><div class="line">            <span class="comment">// data = &lt;File对象、或 文件路径、或 字节数组&gt;</span></div><div class="line">            <span class="comment">//String key = &lt;指定七牛服务上的文件名，或 null&gt;;</span></div><div class="line">            <span class="comment">//String token = &lt;从服务端SDK获取&gt;;</span></div><div class="line">            <span class="comment">//参数介绍  图片地址  上传到七牛之后图片名,token</span></div><div class="line">            uploadManager.put(imagePath,getImageName(), _uploadToken,</div><div class="line">                    <span class="keyword">new</span> UpCompletionHandler() &#123;</div><div class="line">                        <span class="meta">@Override</span></div><div class="line">                        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">complete</span><span class="params">(String key, ResponseInfo info,</span></span></div><div class="line">                                             JSONObject response) &#123;</div><div class="line">                             <span class="keyword">if</span> (info.isOK())&#123;</div><div class="line">                                String path=response.optString(<span class="string">"key"</span>);</div><div class="line">                                mView.onUploadProfileSuccess(imagePath,Constants.QINIU_WAILIAN_URL+path);</div><div class="line">                            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                                mView.onUploadProfileFailure();</div><div class="line">                            &#125;</div><div class="line">                            Log.e(<span class="string">"qiniu==info=="</span>, info.toString());</div><div class="line">                            Log.e(<span class="string">"qiniu==respne=="</span>, response.toString());</div><div class="line">                        &#125;</div><div class="line">                    &#125;, <span class="keyword">new</span> UploadOptions(<span class="keyword">null</span>,<span class="keyword">null</span>,<span class="keyword">false</span>,progressHandler,<span class="keyword">null</span>));</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//上传进度</span></div><div class="line">    UpProgressHandler progressHandler=<span class="keyword">new</span> UpProgressHandler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">progress</span><span class="params">(String key, <span class="keyword">double</span> percent)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 这个签名方法找了半天 一个个对出来的、、、、程序猿辛苦啊、、、 使用 HMAC-SHA1 签名方法对对encryptText进行签名</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> encryptText 被签名的字符串</div><div class="line">     * <span class="doctag">@param</span> encryptKey  密钥</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     * <span class="doctag">@throws</span> Exception</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">byte</span>[] HmacSHA1Encrypt(String encryptText, String encryptKey)</div><div class="line">            <span class="keyword">throws</span> Exception &#123;</div><div class="line">        <span class="keyword">byte</span>[] data = encryptKey.getBytes(ENCODING);</div><div class="line">        <span class="comment">// 根据给定的字节数组构造一个密钥,第二参数指定一个密钥算法的名称</span></div><div class="line">        SecretKey secretKey = <span class="keyword">new</span> SecretKeySpec(data, MAC_NAME);</div><div class="line">        <span class="comment">// 生成一个指定 Mac 算法 的 Mac 对象</span></div><div class="line">        Mac mac = Mac.getInstance(MAC_NAME);</div><div class="line">        <span class="comment">// 用给定密钥初始化 Mac 对象</span></div><div class="line">        mac.init(secretKey);</div><div class="line">        <span class="keyword">byte</span>[] text = encryptText.getBytes(ENCODING);</div><div class="line">        <span class="comment">// 完成 Mac 操作</span></div><div class="line">        <span class="keyword">return</span> mac.doFinal(text);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getImageName</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> System.currentTimeMillis()+<span class="string">""</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><li>Constants.QINIU_ACCESS_KEY   七牛的accessKey</li></p>
<p><li>Constants.QINIU_SECRET_KEY   七牛的secretKey</li></p>
<p><li>Constants.QINIU_BUCKETNAME   七牛的存储空间</li></p>
<p><li>response.optString(“key”) 最后获取的图片路径，也就是图片的名字，要使用还得加上七牛的存储空间外链。</li></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决Android Studio重复依赖导致的transform异常]]></title>
      <url>http://yoursite.com/2017/04/13/%E8%A7%A3%E5%86%B3Android-Studio%E9%87%8D%E5%A4%8D%E4%BE%9D%E8%B5%96%E5%AF%BC%E8%87%B4%E7%9A%84transform%E5%BC%82%E5%B8%B8/</url>
      <content type="html"><![CDATA[<p>现在android项目基本都在使用Android Studio进行开发，使用一些开源的第三方库来快速开发在所难免，好多库都替代了传统的导入库的方式，使用流行方便的gradle方式，直接在app的build.gradle引入，非常方便快捷。</p>
<p>但是在引入多个库的同时，会出现一些异常，今天就<b>重复依赖</b>怎么解决做一个总结。</p>
<h4 id="重复依赖"><a href="#重复依赖" class="headerlink" title="重复依赖"></a>重复依赖</h4><p>什么是重复依赖？当使用gradle导入依赖时，可能会出现不同的依赖包含了同一个jar，在编译期间不会报错。可一旦run app的时候，就会报。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Error:Execution failed <span class="keyword">for</span> task <span class="string">':app:transformClassesWithJarMergingForDebug'</span>.</div><div class="line">&gt; com.android.build.api.transform.TransformException: java.util.zip.ZipException: duplicate entry: com/google/gson/annotations/Expose.class</div></pre></td></tr></table></figure>
<p>TransformException 重复依赖了gson这个jar包。</p>
<p>解决的方法是在<b>引入依赖的时候把相同的jar去除掉</b>。</p>
<p>下面是咱的依赖：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//bmob-sdk：Bmob的android sdk包，包含了Bmob的数据存储、文件等服务，以下是最新的bmob-sdk:</span></div><div class="line">compile <span class="string">'cn.bmob.android:bmob-sdk:3.5.0'</span></div><div class="line"><span class="comment">//如果你想应用能够兼容Android6.0，请添加此依赖(org.apache.http.legacy.jar)</span></div><div class="line">compile <span class="string">'cn.bmob.android:http-legacy:1.0'</span></div><div class="line">compile (<span class="string">'com.squareup.retrofit2:retrofit:2.1.0'</span>)</div><div class="line">compile (<span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span>)</div></pre></td></tr></table></figure>
<p>这是我们可以发现，gson/<b> Expose.class </b></p>
<p>我们可以通过Search Everywhere去定位这个类（默认快捷键是双击shift）。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/E0C18222-0EB6-45B4-A1DD-BD8E4AC96D42.png"></p>
<p>通过搜索的确发现了两个一模一样的类,而且来自不同的依赖,而重复的类库正是gson.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span></div></pre></td></tr></table></figure>
<p>Bmob移动云Sdk引入了gson,retrofit也同样的引入了gson.</p>
<p>找到问题的根源的。那我们现在如何去除相同的类库呢?</p>
<h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><p>在AS中，选择以project显示项目，找到最下面的External Libraries，然后继续找，找到相对应的类库</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/D3D40050-C742-4D55-AB06-101BEDD94998.png"></p>
<p>如图依次点开之后发现了一个pom.xml，这里面就是关于这个jar的一些配置文件</p>
<p>找到artifactId为gson的引用，找到groupId,去除groupId的依赖。</p>
<p>这个就是导致报错的直接原因。复制里面groupId，到你的app的build.gradle里，找到那个依赖，添加</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123; exclude group: <span class="string">'com.google.code.gson'</span> &#125;</div></pre></td></tr></table></figure>
<p>把这个groudId的引用去除掉.</p>
<p>最后的情况如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile (<span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span>)</div><div class="line">        &#123;exclude group: <span class="string">'com.google.code.gson'</span>&#125;</div></pre></td></tr></table></figure>
<p>到此问题就解决了，如果你有多个重复依赖的话，就按照本文所给出的方法，一个一个去重。</p>
<p>一个引用同时牵扯其他多个重复依赖的话，这样做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">compile (<span class="string">'com.squareup.retrofit2:converter-gson:2.1.0'</span>)</div><div class="line">        &#123;exclude group: <span class="string">'com.google.code.gson'</span></div><div class="line">         exclude group: <span class="string">'com.squareup.okhttp3'</span>&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android内存泄露分析总结(一)]]></title>
      <url>http://yoursite.com/2017/04/07/Android%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2%E5%88%86%E6%9E%90%E6%80%BB%E7%BB%93-%E4%B8%80/</url>
      <content type="html"><![CDATA[<p>我只是Android初级程序员，代码编程规范用到的少之又少，自然而然地给项目带来了各种各样的问题，内存泄露就是其一。</p>
<p>篇幅内容转载自 原文链接:<a href="http://www.jianshu.com/p/be89ac5df3f9" target="_blank" rel="external">http://www.jianshu.com/p/be89ac5df3f9</a></p>
<h4 id="什么是内存"><a href="#什么是内存" class="headerlink" title="什么是内存"></a>什么是内存</h4><p>这里面所提到的内存一般是指 Android 手机的 RAM。</p>
<p>RAM 包含寄存器，栈，堆，静态存储区域，常量池。</p>
<p>通常我们所说的 Android 内存泄漏中的内存， 指的是其中的堆内存。一般来来说，我们 new 出来的对 象都会存储在堆内存中，这部分的内存由 GC 进行回收管理。</p>
<h4 id="什么是GC"><a href="#什么是GC" class="headerlink" title="什么是GC"></a>什么是GC</h4><p>GC 指垃圾回收器 「Garbage Collection」。Java 使用 GC 进行内存回收理，不用我们手动释放内 存，提升了我们的开发效率。那GC回收对象的依据是什么呢 ?简单的说，对于一个对象，若果不存 在从 GC 根节点到该对象的引用链 (从根节点不可到达的 （从根节点不可到达的），那么对于 GC 来说这个对象就是需要被回收的，反之该对象是从根节点可到达的，那么这个对象就不会被 GC 回 收。</p>
<p><b>根节点</b>：在 Java 中可以作为根节点的对象有很多，这块内容我理解的不是很到位。我很简单的把它理解为 Android 应用的主线程，存活的子线程，栈中的对象以及静态属性引用的对象。</p>
<p><b>注意</b>：这里的引用是指强引用，在 Java 当中存在4种引用类型分别是「强引用」、「软引用」、「弱引用」、「虚引用」。如果没有特别指定，我们所说的引用都是指强引用，GC 不会回收具有 强引用的对象。</p>
<h4 id="什么是内存泄露"><a href="#什么是内存泄露" class="headerlink" title="什么是内存泄露"></a>什么是内存泄露</h4><p>我们已经知道了，如果某个对象，从根节点可到达，也就是存在从根节点到该对象的引用链，那么该对象是不会被 GC 回收的。如果说这个对象已经不会再被使用到了，是无用的，我们依然持有他的引用的话，就会造成内存泄漏，例如 一个长期在后台运行的线程持有 Activity 的引用，这个时 候 Activity 执行了 onDestroy 方法，那么这个 Activity 就是从根节点可到达并且无用的对象， 这个 Activity 对象就是泄漏的对象，给这个对象分配的内存将无法被回收。</p>
<h4 id="内存泄露的影响"><a href="#内存泄露的影响" class="headerlink" title="内存泄露的影响"></a>内存泄露的影响</h4><p><li>内存很宝贵，即使从效率，责任的角度上，我们也应该降低内存的使用，减少内存的浪费。</li></p>
<p><li>内存泄漏导致可用内存越来越少，最终导致OOM。</li></p>
<p><li>可用内存减少，GC 被触发，虽然 GC 可以帮助我们回收无用内存，但是频繁的触发 GC 也会影响性能，可能造成程序卡顿。</li></p>
<h4 id="如何查找、定位内存泄漏"><a href="#如何查找、定位内存泄漏" class="headerlink" title="如何查找、定位内存泄漏"></a>如何查找、定位内存泄漏</h4><p><li>LeakCanary，Square 公司开源作品，使用方便，可以直接定位到泄漏的对象，并且给出调用链</li></p>
<h4 id="内存泄露事件案例"><a href="#内存泄露事件案例" class="headerlink" title="内存泄露事件案例"></a>内存泄露事件案例</h4><h5 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerThreadActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_inner_thread);</div><div class="line"></div><div class="line">        RunningThread runningThread = <span class="keyword">new</span> RunningThread();</div><div class="line">        runningThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RunningThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                <span class="keyword">try</span> &#123;</div><div class="line">                    Thread.sleep(<span class="number">1000</span>*<span class="number">5</span>);</div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeActivity</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.finish();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Java 中，内部类会隐式的持有外部类的引用。我们可以很清楚的看见 RunningThread 对象持有 了 InnerThreadActivity 的引用，由于 RunningThread 线程会一直运行下去，我 finish 掉当前 的 Activity 就会导致 InnerThreadActivity 实例发生泄漏。我们可以采用静态内部类的方式来解 除这种内存泄漏的隐患，代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">RunningThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                Thread.sleep(<span class="number">1000</span> * <span class="number">5</span>);</div><div class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><b>注意</b>：尽量使用静态内部类来替代内部类，同时避免让长期运行的任务（ 线程 ）持有 Activity的引用。</p>
<h5 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AnonymousThreadActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_anonymous_thread);</div><div class="line">        Thread anonymousThread = <span class="keyword">new</span> Thread() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                    <span class="comment">//do something</span></div><div class="line">                    <span class="keyword">try</span> &#123;</div><div class="line">                        Thread.sleep(<span class="number">60</span> * <span class="number">1000</span>);</div><div class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        anonymousThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeActivity</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在 Java 中，匿名内部类和非静态内部类一样，都会持有外部类的引用。上面的代码正式由于 Thread 的匿名类持有了 AnonymousThreadActivity 的引用，并且匿名类的运行时间长达 1 分钟， 在这段时间内，我 finish 掉了 Activity 导致了内存泄漏，解决方式和非静态内部类的方法一样，使用静态内部类来代替匿名内部类，这里就不贴代码了。</p>
<h5 id="Handler-内存泄漏"><a href="#Handler-内存泄漏" class="headerlink" title="Handler 内存泄漏"></a>Handler 内存泄漏</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TextView tvShowMessage;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_handler);</div><div class="line">        tvShowMessage = (TextView) findViewById(R.id.tv_show_message);</div><div class="line">        MemoryLeakHandler handler = <span class="keyword">new</span> MemoryLeakHandler();</div><div class="line">        handler.sendMessageDelayed(Message.obtain(), <span class="number">1000</span> * <span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MemoryLeakHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            tvShowMessage.setText(<span class="string">"MemoryLeak"</span>);</div><div class="line">            Toast.makeText(HandlerActivity.<span class="keyword">this</span>, <span class="string">"memory leak"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeActivity</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LeakCanary 为我们展示了内存泄漏的引用链，这段代码泄漏的原因也是因为非静态内部类持有了外部类的引用。图中的引用链涉及到 Android 中的消息机制 「Handler」、「MessageQueue」、 「Looper」。大致叙述一下，我们的 MemoryLeakHandler 因为内部类的关系会持有 HandlerActivity 实例的引用，我们使用 Handler 来发送消息，这个Handler 会被消息中 target 属性引用，这个 Message 会在我们主线程的消息队 列中存活 10 秒钟，在这段时间内，我 finish 掉当前 Activity 就会造成内存泄漏，并且依然会弹出 Toast 尽管我们已经开不见这个 Activity了。</p>
<p>解决方案依然是采用<b>静态内部类</b>来替代非静态内部类，并且使用 <b>WeakReference</b> 来引用 Activity，如果对象只存在弱引用的话，GC 是会回收这部分内存的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> TextView tvShowMessage;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_handler);</div><div class="line">        tvShowMessage = (TextView) findViewById(R.id.tv_show_message);</div><div class="line">        MemoryLeakHandler handler = <span class="keyword">new</span> MemoryLeakHandler(<span class="keyword">this</span>);</div><div class="line">        handler.sendMessageDelayed(Message.obtain(), <span class="number">1000</span> * <span class="number">10</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MemoryLeakHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</div><div class="line">        <span class="keyword">private</span> WeakReference&lt;HandlerActivity&gt; weakReference;</div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MemoryLeakHandler</span><span class="params">(HandlerActivity activity)</span> </span>&#123;</div><div class="line">            <span class="keyword">this</span>.weakReference = <span class="keyword">new</span> WeakReference&lt;HandlerActivity&gt;(activity);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            HandlerActivity activity = weakReference.get();</div><div class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</div><div class="line">                activity.tvShowMessage.setText(<span class="string">"MemoryLeak"</span>);</div><div class="line">                Toast.makeText(activity, <span class="string">"memory leak"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">closeActivity</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="单例／静态引用"><a href="#单例／静态引用" class="headerlink" title="单例／静态引用"></a>单例／静态引用</h5><p><li>不要让我们的对象被静态属性所引用，这很容易造成内存泄漏。</li></p>
<p><li>一般来说我们在使用注册方法的时候，library 都会提供相对应的解除注册方法，不要忘了调用！就那EventBus举例，别忘了unRegister()。</li></p>
<h5 id="Activity-Context-amp-Application-Context"><a href="#Activity-Context-amp-Application-Context" class="headerlink" title="Activity Context &amp; Application Context"></a>Activity Context &amp; Application Context</h5><p>在调用 工具类中的方法时候的时候，我们将 Activity 作为一个 Context 对象传递了进去，Context 对象的引用被长期持有导致内存泄漏。处理这种泄漏的方法很简单，使用 Application Context 来代替 Activity Context 即可，Application Context 在整个 App 生命周期内适用。</p>
<h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>一般来说，内存泄漏都是因为泄漏对象的引用被传递到该对象的范围之外，或者说内存泄漏是因为持有对象的长期引用，导致对象无法被 GC 回收。为了避免这种情况，我们可以选择在对象生命周期结束的时候，解除绑定，将引用置为空，或者使用弱引用。</p>
<p><ol></ol></p>
<p><li>由于 Context 导致内存泄漏。使用 Application Context 代替 Activity Context，避免长期持有 Context 的引用，引用应该和 Context 自身的生命周期保持一致。</li></p>
<p><li>由于非静态内部类、匿名内部类导致内存泄。它们会隐式的持有外部类的引用，一不小心长期持有该引用就会导致内存泄漏，使用静态内部类来代替它们。</li></p>
<p><li>Handler 导致内存泄漏。原因和第二点一样，同样使用静态内部类的实现方式，同时对需要引用的对象/资源采用弱引用的方式。</li></p>
<p><li>EventBus导致内存泄漏。EventBus 的单例特性，会长期持有注册对象的引用，一定要在对象生命周期结束的时候，接触注册，释放引用。同样对于系统提供的一些成对出现的方法，我们也需要成对的调用，例如 BroadcastReceiver 的 registerReceiver( ) 方法和 unRegisterReceiver( ) 方法。</li></p>
<p><li>线程导致内存泄漏。我们经常会执行一些长期运行的任务，避免在这些任务中持有 Activity 对象的引用，如果持有了引用的话，我们应该在对象生命周期结束的时候，释放引用</li></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[json的解析及数据转换为json上传服务器]]></title>
      <url>http://yoursite.com/2017/03/30/json%E7%9A%84%E8%A7%A3%E6%9E%90%E5%8F%8A%E6%95%B0%E6%8D%AE%E8%BD%AC%E6%8D%A2%E4%B8%BAjson%E4%B8%8A%E4%BC%A0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>我们这里主要使用的是android sdk自带的工具类来工作</p>
<p>JsonObject和JsonArray不仅能够做到将json格式的字符串解析成普通数据，还能将普通数据转换为json格式的字符串。</p>
<h3 id="解析Json字符串"><a href="#解析Json字符串" class="headerlink" title="解析Json字符串"></a>解析Json字符串</h3><p>后台返回的json字符串</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    status: <span class="string">"0"</span>,</div><div class="line">    errmsg: <span class="string">""</span>,</div><div class="line">    data: &#123;</div><div class="line">            id: <span class="string">"1279"</span>,             <span class="comment">//单个字符串 </span></div><div class="line">            title: <span class="string">"施工交底"</span>,</div><div class="line">            time: <span class="string">"2017-03-30 17:15:33"</span>,</div><div class="line">            tags: [               <span class="comment">//字符串数组集合 </span></div><div class="line">                <span class="string">"施工质量"</span>,</div><div class="line">                <span class="string">"施工效率"</span></div><div class="line">            ],</div><div class="line">            project: &#123;            <span class="comment">//对象</span></div><div class="line">               prjId: <span class="string">"123"</span>，</div><div class="line">               prjName: <span class="string">"宇宙中心"</span>，</div><div class="line">               prjTime: <span class="string">""</span>      </div><div class="line">            &#125;,</div><div class="line">             subList: [           <span class="comment">//对象集合</span></div><div class="line">                &#123;</div><div class="line">                    cmtId: <span class="string">"1285"</span>,</div><div class="line">                    partyType: <span class="string">"leader"</span>,</div><div class="line">                    score: <span class="number">5</span>,       <span class="comment">// int</span></div><div class="line">                    over:<span class="keyword">false</span>,     <span class="comment">//boolean</span></div><div class="line">                    partyTypeName: <span class="string">"工长"</span></div><div class="line">                &#125;</div><div class="line">            ]</div><div class="line">        &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Bean对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> String id;</div><div class="line">    <span class="keyword">public</span> String time;</div><div class="line">    <span class="keyword">public</span> String title;</div><div class="line">    <span class="keyword">public</span> List&lt;String&gt; tags;</div><div class="line">    <span class="keyword">public</span> Project project;</div><div class="line">    <span class="keyword">public</span> List&lt;SubInfo&gt; subList;</div><div class="line">    </div><div class="line">    <span class="comment">// 用public修饰 省略 setter 和 getter 方法</span></div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Project</span></span>&#123;</div><div class="line">        <span class="keyword">public</span> String prjId;</div><div class="line">        <span class="keyword">public</span> String prjName;</div><div class="line">        <span class="keyword">public</span> String prjTime;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubInfo</span></span>&#123;</div><div class="line">        <span class="keyword">public</span> String cmtId;</div><div class="line">        <span class="keyword">public</span> String partyType;</div><div class="line">        <span class="keyword">public</span> Integer score;</div><div class="line">        <span class="keyword">public</span> Boolean over;</div><div class="line">        <span class="keyword">public</span> String partyTypeName;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对json字符串进行手动解析</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> DemoInfo <span class="title">parseDemoInfo</span><span class="params">(String result)</span></span>&#123;</div><div class="line">       DemoInfo demoInfo=<span class="keyword">null</span>;</div><div class="line">       JSONObject respObj;</div><div class="line">       <span class="keyword">try</span> &#123;</div><div class="line">           respObj = <span class="keyword">new</span> JSONObject(result);</div><div class="line">           String status = respObj.optString(<span class="string">"status"</span>);</div><div class="line">           <span class="keyword">if</span> (!status.equals(<span class="string">"0"</span>)) &#123;</div><div class="line">               <span class="keyword">return</span> demoInfo;</div><div class="line">           &#125;</div><div class="line">           JSONObject dataObj = respObj.optJSONObject(<span class="string">"data"</span>);</div><div class="line">           <span class="keyword">if</span> (dataObj != <span class="keyword">null</span>)&#123;</div><div class="line">               demoInfo =<span class="keyword">new</span> DemoInfo();</div><div class="line">               demoInfo.id=dataObj.optString(<span class="string">"id"</span>);</div><div class="line">               demoInfo.title=dataObj.optString(<span class="string">"title"</span>);</div><div class="line">               demoInfo.time=dataObj.optString(<span class="string">"time"</span>);</div><div class="line"></div><div class="line">               JSONArray tagArr = dataObj.optJSONArray(<span class="string">"tags"</span>);</div><div class="line">               <span class="keyword">if</span> (tagArr != <span class="keyword">null</span>)&#123;</div><div class="line">                   List&lt;String&gt; tagList=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; tagArr.length(); i++) &#123;</div><div class="line">                       String tag = tagArr.optString(i);</div><div class="line">                       tagList.add(tag);</div><div class="line">                   &#125;</div><div class="line">                   demoInfo.tags=tagList;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               JSONObject prjObj = dataObj.optJSONObject(<span class="string">"project"</span>);</div><div class="line">               <span class="keyword">if</span> (prjObj != <span class="keyword">null</span>)&#123;</div><div class="line">                   DemoInfo.Project project=demoInfo.new Project();</div><div class="line">                   project.prjId=prjObj.optString(<span class="string">"prjId"</span>);</div><div class="line">                   project.prjName=prjObj.optString(<span class="string">"prjName"</span>);</div><div class="line">                   project.prjTime=prjObj.optString(<span class="string">"prjTime"</span>);</div><div class="line">                   demoInfo.project=project;</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               JSONArray subListArr = dataObj.optJSONArray(<span class="string">"subList"</span>);</div><div class="line">               <span class="keyword">if</span> (subListArr != <span class="keyword">null</span>) &#123;</div><div class="line">                   List&lt;DemoInfo.SubInfo&gt; subList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; subListArr.length(); i++) &#123;</div><div class="line">                       JSONObject subObj = subListArr.optJSONObject(i);</div><div class="line">                       <span class="keyword">if</span> (subObj != <span class="keyword">null</span>) &#123;</div><div class="line">                           DemoInfo.SubInfo subInfo = demoInfo.new SubInfo();</div><div class="line">                           subInfo.cmtId = (subObj.optString(<span class="string">"cmtId"</span>));</div><div class="line">                           subInfo.partyType = (subObj.optString(<span class="string">"partyType"</span>));</div><div class="line">                           subInfo.partyTypeName = (subObj.optString(<span class="string">"partyTypeName"</span>));</div><div class="line">                           subInfo.score = (subObj.optInt(<span class="string">"score"</span>));</div><div class="line">                           subInfo.over = (subObj.optBoolean(<span class="string">"over"</span>));</div><div class="line">                           subList.add(subInfo);</div><div class="line">                       &#125;</div><div class="line">                   &#125;</div><div class="line">                   demoInfo.subList=subList;</div><div class="line">               &#125;</div><div class="line">               &#125;</div><div class="line">       &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">           e.printStackTrace();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> demoInfo;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>手动解析完成，很累啊，如果整个app都是这样的解析，那得多少行代码。这里只是了解一下这个知识，不建议这样。</p>
<h3 id="简单理解一下Gson的使用"><a href="#简单理解一下Gson的使用" class="headerlink" title="简单理解一下Gson的使用"></a>简单理解一下Gson的使用</h3><h4 id="解析对象"><a href="#解析对象" class="headerlink" title="解析对象"></a>解析对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">T result = gson.fromJson(jsonData, Class&lt;T&gt; type);</div><div class="line">User user=gson.fromJson(jsonData, User.class);</div></pre></td></tr></table></figure>
<h4 id="解析数组"><a href="#解析数组" class="headerlink" title="解析数组"></a>解析数组</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">List&lt;T&gt; result = gson.fromJson(jsonData, <span class="keyword">new</span> TypeToken&lt;List&lt;T&gt;&gt;() &#123;&#125;.getType());</div><div class="line">List&lt;Student&gt; students = gosn.fromJson(jsonData,<span class="keyword">new</span> TypeToken&lt;List&lt;Student&gt;&gt;() &#123;&#125;.getType());</div></pre></td></tr></table></figure>
<h3 id="转换为Json格式的字符串"><a href="#转换为Json格式的字符串" class="headerlink" title="转换为Json格式的字符串"></a>转换为Json格式的字符串</h3><p>将对象或者集合以json格式的字符串上传至服务器，这样的要求很常见，下面我们用原生的JsonObject和JsonArray对对象和集合进行一下json格式的封装。</p>
<p>先生成两条对象的集合数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">List&lt;PublishInfo&gt; publishInfos = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        PublishInfo leaderInfo = <span class="keyword">new</span> PublishInfo();</div><div class="line">        leaderInfo.setCmtId(leaderId);</div><div class="line">        leaderInfo.setContent(editComments);</div><div class="line">        leaderInfo.setScore(<span class="string">"4.0"</span>);</div><div class="line">        List&lt;String&gt; tags = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</div><div class="line">            tags.add(<span class="string">"3"</span>+i);</div><div class="line">        &#125;</div><div class="line">        leaderInfo.setTags(tags);</div><div class="line">        publishInfos.add(leaderInfo);</div><div class="line"></div><div class="line">	    PublishInfo supervisorInfo = <span class="keyword">new</span> PublishInfo();</div><div class="line">	    supervisorInfo.setCmtId(supervisiorId);</div><div class="line"> supervisorInfo.setScore(<span class="string">"3.0"</span>);</div><div class="line">publishInfos.add(supervisorInfo);</div></pre></td></tr></table></figure>
<p>Bean对象</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PublishInfo</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String cmtId;</div><div class="line">    <span class="keyword">private</span> String partyType;</div><div class="line">    <span class="keyword">private</span> String score;</div><div class="line">    <span class="keyword">private</span> String content;</div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; tags;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>开始生成json格式的字符串</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">JSONArray jsonArray = <span class="keyword">new</span> JSONArray();</div><div class="line">JSONObject jsonObj = <span class="keyword">null</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; publishInfos.size(); i++) &#123;</div><div class="line">    jsonObj = <span class="keyword">new</span> JSONObject();</div><div class="line">    PublishInfo info = publishInfos.get(i);</div><div class="line">    <span class="keyword">try</span> &#123;</div><div class="line">        jsonObj.put(<span class="string">"cmtId"</span>, info.getCmtId());</div><div class="line">        jsonObj.put(<span class="string">"score"</span>, info.getScore());</div><div class="line">        jsonObj.put(<span class="string">"content"</span>, info.getContent());</div><div class="line"></div><div class="line">        List&lt;String&gt; tagList = info.getTags();</div><div class="line">        <span class="keyword">if</span> (tagList != <span class="keyword">null</span>) &#123;</div><div class="line">            JSONArray tagArr = <span class="keyword">new</span> JSONArray();</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; tagList.size(); j++) &#123;</div><div class="line">                tagArr.put(tagList.get(j));</div><div class="line">            &#125;</div><div class="line">            jsonObj.put(<span class="string">"tags"</span>, tagArr);</div><div class="line">        &#125;</div><div class="line">        jsonArray.put(jsonObj);</div><div class="line">    &#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">    outObj.put(<span class="string">"cmtId"</span>, cmtId);</div><div class="line">    outObj.put(<span class="string">"subList"</span>, jsonArray);</div><div class="line">&#125; <span class="keyword">catch</span> (JSONException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line"></div><div class="line">String finalString = outObj.toString();</div><div class="line">AppLog.LOG(TAG, <span class="string">"======="</span> + finalString);</div><div class="line">params.put(<span class="string">"comment"</span>, outObj.toString());</div></pre></td></tr></table></figure>
<p>生成完毕，打印结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"cmtId"</span>: <span class="string">"1966"</span>,</div><div class="line"><span class="string">"subList"</span>: [</div><div class="line">    &#123;</div><div class="line">        <span class="string">"cmtId"</span>: <span class="string">"1967"</span>,</div><div class="line">        <span class="string">"score"</span>: <span class="string">"4.0"</span>,</div><div class="line">        <span class="string">"content"</span>: <span class="string">"我也不清楚"</span>,</div><div class="line">        <span class="string">"tags"</span>: [</div><div class="line">            <span class="string">"30"</span>,</div><div class="line">            <span class="string">"31"</span></div><div class="line">        ]</div><div class="line">    &#125;,</div><div class="line">    &#123;</div><div class="line">        <span class="string">"cmtId"</span>: <span class="string">"1968"</span>,</div><div class="line">        <span class="string">"score"</span>: <span class="string">"3.0"</span>,</div><div class="line">       &#125;</div><div class="line">]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>搞定，收工。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 冷启动秒开app]]></title>
      <url>http://yoursite.com/2017/02/22/Android-%E5%86%B7%E5%90%AF%E5%8A%A8%E7%A7%92%E5%BC%80app/</url>
      <content type="html"><![CDATA[<p>昨天晚上在回家的地铁上，照例打开<a href="https://gold.xitu.io/" target="_blank" rel="external">掘金</a>,看到一篇文章，冷启动秒开app，顿时来了兴趣，什么叫冷启动？能实现秒开？</p>
<p>看完这篇文章，回家就试了试，确实能起到一定的效果，微信就是这样做的，在前辈的基础上，做个记录。</p>
<p><li>什么是冷启动时间？<br>冷启动时间是指从手机左面点击APP的那一刻起到启动页面的Activity调用onCreate()方法之间的这个时间段。</li></p>
<p><li>2.在冷启动的这段时间里发生了什么？<br>首先我们要知道当打开一个Activity的时候发生了什么，在一个Activity打开时，如果该Activity所属的Application还没有启动，那么系统会为这个Activity创建一个进程（每创建一个进程都会调用一次Application，所以Application的onCreate()方法可能会被调用多次），在进程的创建和初始化中，势必会消耗一些时间，在这个时间里，WindowManager会先加载APP里的主题样式里的窗口背景（windowBackground）作为预览元素，然后才去真正的加载布局，如果这个时间过长，而默认的背景又是黑色或者白色，这样会给用户造成一种错觉，这个APP很卡，很不流畅，自然也影响了用户体验。</li></p>
<p>总结的不错，但这不是我写的，直接抄来的。哈哈</p>
<h3 id="消除启动时的白屏-黑屏"><a href="#消除启动时的白屏-黑屏" class="headerlink" title="消除启动时的白屏/黑屏"></a>消除启动时的白屏/黑屏</h3><p>在用户点击手机桌面APP的时候，看到的黑屏或者白屏其实是界面渲染前的第一帧，如果你看懂了文章头的那2个问题，那么解决这个问题就非常轻松了，无非就是将Theme里的windowBackground设置成我们想要让用户看到的画面就可以了，这里有2种做法：</p>
<h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>将背景图设置成我们APP的Logo图，作为APP启动的引导，现在市面上大部分的APP也是这么做的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;style name="AppWelcome" parent="AppTheme"&gt;</div><div class="line">    &lt;item name="android:windowBackground"&gt;@mipmap/bg_welcome_start&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line">``` </div><div class="line">   </div><div class="line">#### 第二步  </div><div class="line">将背景颜色设置为透明色，这样当用户点击桌面APP图片的时候，并不会"立即"进入APP，而且在桌面上停留一会，其实这时候APP已经是启动的了，只是我们心机的把Theme里的windowBackground的颜色设置成透明的，强行把锅甩给了手机应用厂商（手机反应太慢了啦，哈哈），其实现在微信也是这样做的，不信你可以试试</div><div class="line"></div><div class="line"></div><div class="line">```java</div><div class="line">&lt;style name="Appwelcome" parent="android:Theme.Translucent.NoTitleBar.Fullscreen"/&gt;    </div><div class="line">```    </div><div class="line">透明化这种做法需要注意的一点，如果直接把Theme引入Activity，在运行的时候可能会出现如下异常</div><div class="line"></div><div class="line"></div><div class="line">```java</div><div class="line">java.lang.IllegalStateException: You need to use a Theme.AppCompat theme (or descendant) with this activity.</div></pre></td></tr></table></figure>
<p>这个是因为使用了不兼容的Theme，例如我这里的Activity继承了AppCompatActivity，解决方案很简单：</p>
<p><li>1、让其Activity集成Activity而不要集成兼容性的AppCompatActivity</li></p>
<p><li>2、在onCreate()方法里的super.onCreate(savedInstanceState)之前设置我们原来APP的Theme</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">            setTheme(R.style.AppTheme);</div><div class="line">            <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的2种做法，我们都需要将Theme引入对应的Activity</p>
<pre><code class="java">&lt;activity
    android:name=".app.main.StartActivity"
    android:theme="@style/AppWelcome"
    android:screenOrientation="portrait"&gt;
    &lt;intent-filter&gt;
        &lt;action android:name="android.intent.action.MAIN" /&gt;
        &lt;category android:name="android.intent.category.LAUNCHER" /&gt;
    &lt;/intent-filter&gt;
&lt;/activity&gt;
</code></pre>
<p>采用这种方法的效果和微信一样，点击微信图标，首先图标会变黑透明，而且在桌面上停留一会，其实这时候APP已经是启动的了，然后启动start界面。      </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[TextView实现超链接自定义跳转及解决在ListView中的事件冲突]]></title>
      <url>http://yoursite.com/2016/12/23/TextView%E5%AE%9E%E7%8E%B0%E8%B6%85%E9%93%BE%E6%8E%A5%E8%87%AA%E5%AE%9A%E4%B9%89%E8%B7%B3%E8%BD%AC%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%9C%A8ListView%E4%B8%AD%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%86%B2%E7%AA%81/</url>
      <content type="html"><![CDATA[<h4 id="一、在TextView中跳转url"><a href="#一、在TextView中跳转url" class="headerlink" title="一、在TextView中跳转url"></a>一、在TextView中跳转url</h4><p>1.要想在textview中显示url连接，首先在布局文件中添加autoLink属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">        android:id=<span class="string">"@+id/content"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:autoLink=<span class="string">"web"</span>/&gt;</div></pre></td></tr></table></figure>
<p>textView.setAutoLinkMask(Linkify.Web)； </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">textView.setMovementMethod(LinkMovementMethod.getInstance());</div></pre></td></tr></table></figure>
<p>2.setMovementMethod，此方法在需要响应用户事件时使用，如点击一个电话号码就跳转到拨号页面。如果不执行这个方法是不会响应事件的，即便文本看着已经是下划线蓝色字了。</p>
<p>autoLink：一共有几种值：web，phone, map, email, all, none.分别是url连接。电话号码提取拨号，地图地址。电子邮件，全部解释就是能支持的超级连接全部起作用，none就是默认情况，没有超链接。</p>
<p>3.这样设置完之后，就能跳转到url地址，但是是采用让你选择浏览器，并不是在你的app里面打开，这就需要你自定义点击事件了。</p>
<h4 id="二、自定义点击事件"><a href="#二、自定义点击事件" class="headerlink" title="二、自定义点击事件"></a>二、自定义点击事件</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">CharSequence text = tv.getText();</div><div class="line">        <span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spannable) &#123;</div><div class="line">            <span class="keyword">int</span> end = text.length();</div><div class="line">            Spannable sp = (Spannable) <span class="keyword">this</span>.getText();</div><div class="line">            URLSpan[] urls = sp.getSpans(<span class="number">0</span>, end, URLSpan.class);</div><div class="line">            SpannableStringBuilder style = <span class="keyword">new</span> SpannableStringBuilder(text);</div><div class="line">            style.clearSpans();<span class="comment">// should clear old spans</span></div><div class="line">            <span class="keyword">for</span> (URLSpan url : urls) &#123;</div><div class="line">                MyURLSpan myURLSpan = <span class="keyword">new</span> MyURLSpan(url.getURL());</div><div class="line">                style.setSpan(myURLSpan, sp.getSpanStart(url), sp.getSpanEnd(url), Spannable.SPAN_EXCLUSIVE_INCLUSIVE);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.setText(style);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">private</span>  <span class="class"><span class="keyword">class</span> <span class="title">MyURLSpan</span> <span class="keyword">extends</span> <span class="title">ClickableSpan</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String mUrl;</div><div class="line"></div><div class="line">        MyURLSpan(String url) &#123;</div><div class="line">            mUrl = url;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</div><div class="line"><span class="comment">//            Toast.makeText(context, mUrl, Toast.LENGTH_LONG).show();</span></div><div class="line">            Intent intent=<span class="keyword">new</span> Intent(context, ShowWebUrlActivity.class);</div><div class="line">            intent.putExtra(<span class="string">"push_url"</span>,mUrl);</div><div class="line">            context.startActivity(intent);</div><div class="line"><span class="comment">//            widget.setBackgroundColor(Color.parseColor("#00000000"));</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.updateDrawState(ds);</div><div class="line">            ds.setUnderlineText(<span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="三、在ListView中使用"><a href="#三、在ListView中使用" class="headerlink" title="三、在ListView中使用"></a>三、在ListView中使用</h4><p>本来好好的，但是当你在ListView中使用时，你就会发现itemClick事件点击失效，事件冲突，是谁把事件给拦截了，第一想法就是设置那个点击url的东西，什么原因呢？</p>
<p>上面在设置超链接的时候有这样一条语句：tv.setMovementMethod(LinkMovementMethod.getInstance());我们现在把这条语句注释掉看看……,结果点击Item的时候能够响应了，可惜超链接又失效了。</p>
<p>网上总有大神，能解决问题：(国外的大神)</p>
<p><a href="http://stackoverflow.com/questions/8558732/listview-textview-with-linkmovementmethod-makes-list-item-unclickable" target="_blank" rel="external">http://stackoverflow.com/questions/8558732/listview-textview-with-linkmovementmethod-makes-list-item-unclickable</a></p>
<p>记住这个网址，很nb，<a href="http://stackoverflow.com" target="_blank" rel="external">http://stackoverflow.com</a></p>
<p>以上三个问题，就自定义一个TextView：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * textview 自定义url的跳转 不用系统的</div><div class="line"> * 解决在listview中item url 点击和itemClick 事件冲突</div><div class="line"> * Created by jiayongkai on 16/12/12.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JumpUrlTextView</span> <span class="keyword">extends</span> <span class="title">TextView</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">boolean</span> dontConsumeNonUrlClicks = <span class="keyword">true</span>;</div><div class="line">    <span class="keyword">boolean</span> linkHit;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context context;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JumpUrlTextView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        <span class="keyword">this</span>.context=context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JumpUrlTextView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        <span class="keyword">this</span>.context=context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</div><div class="line">        linkHit = <span class="keyword">false</span>;</div><div class="line">        <span class="keyword">boolean</span> res = <span class="keyword">super</span>.onTouchEvent(event);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (dontConsumeNonUrlClicks)</div><div class="line">            <span class="keyword">return</span> linkHit;</div><div class="line">        <span class="keyword">return</span> res;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">jumpUrl</span><span class="params">()</span></span>&#123;</div><div class="line">        CharSequence text = <span class="keyword">this</span>.getText();</div><div class="line">        <span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spannable) &#123;</div><div class="line">            <span class="keyword">int</span> end = text.length();</div><div class="line">            Spannable sp = (Spannable) <span class="keyword">this</span>.getText();</div><div class="line">            URLSpan[] urls = sp.getSpans(<span class="number">0</span>, end, URLSpan.class);</div><div class="line">            SpannableStringBuilder style = <span class="keyword">new</span> SpannableStringBuilder(text);</div><div class="line">            style.clearSpans();<span class="comment">// should clear old spans</span></div><div class="line">            <span class="keyword">for</span> (URLSpan url : urls) &#123;</div><div class="line">                MyURLSpan myURLSpan = <span class="keyword">new</span> MyURLSpan(url.getURL());</div><div class="line">                style.setSpan(myURLSpan, sp.getSpanStart(url), sp.getSpanEnd(url), Spannable.SPAN_EXCLUSIVE_INCLUSIVE);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">this</span>.setText(style);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span>  <span class="class"><span class="keyword">class</span> <span class="title">MyURLSpan</span> <span class="keyword">extends</span> <span class="title">ClickableSpan</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">private</span> String mUrl;</div><div class="line"></div><div class="line">        MyURLSpan(String url) &#123;</div><div class="line">            mUrl = url;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View widget)</span> </span>&#123;</div><div class="line"><span class="comment">//            Toast.makeText(context, mUrl, Toast.LENGTH_LONG).show();</span></div><div class="line">            Intent intent=<span class="keyword">new</span> Intent(context, ShowWebUrlActivity.class);</div><div class="line">            intent.putExtra(<span class="string">"push_url"</span>,mUrl);</div><div class="line">            context.startActivity(intent);</div><div class="line"><span class="comment">//            widget.setBackgroundColor(Color.parseColor("#00000000"));</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">updateDrawState</span><span class="params">(TextPaint ds)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.updateDrawState(ds);</div><div class="line">            ds.setUnderlineText(<span class="keyword">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasFocusable</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LocalLinkMovementMethod</span> <span class="keyword">extends</span> <span class="title">LinkMovementMethod</span> </span>&#123;</div><div class="line">        <span class="keyword">static</span> LocalLinkMovementMethod sInstance;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LocalLinkMovementMethod <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (sInstance == <span class="keyword">null</span>)</div><div class="line">                sInstance = <span class="keyword">new</span> LocalLinkMovementMethod();</div><div class="line"></div><div class="line">            <span class="keyword">return</span> sInstance;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(TextView widget,</span></span></div><div class="line">                                    Spannable buffer, MotionEvent event) &#123;</div><div class="line">            <span class="keyword">int</span> action = event.getAction();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (action == MotionEvent.ACTION_UP ||</div><div class="line">                    action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">                <span class="keyword">int</span> x = (<span class="keyword">int</span>) event.getX();</div><div class="line">                <span class="keyword">int</span> y = (<span class="keyword">int</span>) event.getY();</div><div class="line"></div><div class="line">                x -= widget.getTotalPaddingLeft();</div><div class="line">                y -= widget.getTotalPaddingTop();</div><div class="line"></div><div class="line">                x += widget.getScrollX();</div><div class="line">                y += widget.getScrollY();</div><div class="line"></div><div class="line">                Layout layout = widget.getLayout();</div><div class="line">                <span class="keyword">int</span> line = layout.getLineForVertical(y);</div><div class="line">                <span class="keyword">int</span> off = layout.getOffsetForHorizontal(line, x);</div><div class="line"></div><div class="line">                ClickableSpan[] link = buffer.getSpans(</div><div class="line">                        off, off, ClickableSpan.class);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (link.length != <span class="number">0</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (action == MotionEvent.ACTION_UP) &#123;</div><div class="line">                        link[<span class="number">0</span>].onClick(widget);</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (action == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">                        Selection.setSelection(buffer,</div><div class="line">                                buffer.getSpanStart(link[<span class="number">0</span>]),</div><div class="line">                                buffer.getSpanEnd(link[<span class="number">0</span>]));</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (widget <span class="keyword">instanceof</span> JumpUrlTextView)&#123;</div><div class="line">                        ((JumpUrlTextView) widget).linkHit = <span class="keyword">true</span>;</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    Selection.removeSelection(buffer);</div><div class="line">                    Touch.onTouchEvent(widget, buffer, event);</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> Touch.onTouchEvent(widget, buffer, event);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>才知道，这相当于重写了LinkMovementMethod的onTouchEvent()方法，原来的onTouchEvent不管怎样都return true，就把事件给拦截了。</p>
<h4 id="四、使用："><a href="#四、使用：" class="headerlink" title="四、使用："></a>四、使用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">holder.content.setText(outInfo.getContent());</div><div class="line">holder.content.jumpUrl();</div><div class="line">holder.content.setMovementMethod(JumpUrlTextView.LocalLinkMovementMethod.getInstance());</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android webview loadData 图片点击]]></title>
      <url>http://yoursite.com/2016/12/09/Android-webview-loadData-%E5%9B%BE%E7%89%87%E7%82%B9%E5%87%BB/</url>
      <content type="html"><![CDATA[<p>大家好，又和大家见面了。</p>
<p>今天的标题有点特殊，全是一点一点的不成句，这是有原因的，因为如果成句成为标题的话比较长，所以干脆透露知识点吧。</p>
<h4 id="前述"><a href="#前述" class="headerlink" title="前述"></a>前述</h4><p>意思是：webview加载拼凑的html时，就要用loadData了，loadUrl就行不通了，但是还想知道用户点击了哪张图片，网上的一些教程要么是加载的html文件、要么是网络url，这里，咱们解决拼凑的String html.</p>
<h4 id="情况介绍"><a href="#情况介绍" class="headerlink" title="情况介绍"></a>情况介绍</h4><p>我们这个项目是这样的：图文混排 上传服务器的数据 是div嵌套p、img这些文本、图片标签，toString()字符串传上去。显示的时候，获取字符串然后自己拼凑成完整的html,webView显示。</p>
<h4 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h4><h5 id="初始化："><a href="#初始化：" class="headerlink" title="初始化："></a>初始化：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">webView.addJavascriptInterface(<span class="keyword">new</span> JSInterFace(), <span class="string">"jsi"</span>);</div><div class="line">webView.getSettings().setJavaScriptEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<h5 id="webview-load拼凑html"><a href="#webview-load拼凑html" class="headerlink" title="webview load拼凑html"></a>webview load拼凑html</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String content = contentToHtml(info.getContent());</div><div class="line">webView.loadData(content, <span class="string">"text/html; charset=UTF-8"</span>, <span class="string">""</span>);  <span class="comment">//这样做 有效解决乱码</span></div></pre></td></tr></table></figure>
<h5 id="用Jsoup-获取img-加上点击事件属性"><a href="#用Jsoup-获取img-加上点击事件属性" class="headerlink" title="用Jsoup 获取img 加上点击事件属性"></a>用Jsoup 获取img 加上点击事件属性</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> String <span class="title">contentToHtml</span><span class="params">(String content)</span> </span>&#123;</div><div class="line">        String decodeContent=<span class="keyword">null</span>;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            decodeContent= URLDecoder.decode(content,<span class="string">"UTF-8"</span>);   <span class="comment">//解码是为了解决表情的显示，上传服务器的时候进行了编码</span></div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        Document document = Jsoup.parse(decodeContent);</div><div class="line"></div><div class="line">        Elements imgs = document.select(<span class="string">"img"</span>);</div><div class="line">        <span class="keyword">for</span> (Element img : imgs) &#123;</div><div class="line">            String src = img.attr(<span class="string">"src"</span>);</div><div class="line">            pictureUrlList.add(src);</div><div class="line">            img.attr(<span class="string">"onClick"</span>, <span class="string">"window.jsi.image("</span> + (pictureUrlList.size()-<span class="number">1</span>)+ <span class="string">")"</span>);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">        builder.append(<span class="string">"&lt;html&gt;\n"</span> +</div><div class="line">                <span class="string">"\t&lt;head&gt;\n"</span> +</div><div class="line">                <span class="string">"\t\t&lt;meta charset=\"UTF-8\"&gt;\n"</span> +</div><div class="line">                <span class="string">"\t\t&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, minimum-scale=0.5, maximum-scale=2.0, user-scalable=yes\" /&gt;\n"</span> +<span class="comment">//这里可以使html自动铺满手机屏幕</span></div><div class="line">                <span class="string">"\t\t&lt;style&gt;\n"</span> +</div><div class="line">                <span class="string">"\t\t\tbody &#123;\n"</span> +</div><div class="line">                <span class="string">"\t\t\t\twidth: 100%;\n"</span> +</div><div class="line">                <span class="string">"\t\t\t\theight: 100%;\n"</span> +</div><div class="line">                <span class="string">"\t\t\t\tmargin:0px;\n"</span> +</div><div class="line">                <span class="string">"\t\t\t&#125;\n"</span> +</div><div class="line">                <span class="string">"\t\t\timg &#123;\n"</span> +</div><div class="line">                <span class="string">"\t\t\t\tmax-width: 100%;\n"</span> +<span class="comment">//使图片刚好铺满屏幕，不超出屏幕</span></div><div class="line">                <span class="string">"\t\t\t&#125;"</span> +</div><div class="line">                <span class="string">"\t\t&lt;/style&gt;\n"</span> +</div><div class="line">                <span class="string">"\t&lt;/head&gt;\n"</span> +</div><div class="line">                <span class="string">"\n"</span> +</div><div class="line">                <span class="string">"\t&lt;body&gt;\t"</span>);</div><div class="line"></div><div class="line">        builder.append(document.toString());</div><div class="line">        builder.append(<span class="string">"&lt;/body&gt;\n"</span> +</div><div class="line">                <span class="string">"&lt;/html&gt;"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="图片点击事件响应"><a href="#图片点击事件响应" class="headerlink" title="图片点击事件响应"></a>图片点击事件响应</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">JSInterFace</span> </span>&#123;</div><div class="line"></div><div class="line">       <span class="meta">@JavascriptInterface</span></div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">image</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">           AppLog.LOG(<span class="string">"tag"</span>,<span class="string">"imgage===url=="</span>+pictureUrlList.get(i));</div><div class="line">           Intent intent=<span class="keyword">new</span> Intent(AskingShareDetailActivity.<span class="keyword">this</span>, ImageSwipeActivity.class);</div><div class="line">           intent.putStringArrayListExtra(Constants.Extra.IMAGE_URL_LIST, (ArrayList&lt;String&gt;) pictureUrlList);</div><div class="line">           intent.putExtra(Constants.Extra.IMAGE_POSITION,i);</div><div class="line">           startActivity(intent);</div><div class="line">       &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h5 id="其实还有更好的办法"><a href="#其实还有更好的办法" class="headerlink" title="其实还有更好的办法"></a>其实还有更好的办法</h5><p>更好的办法：就是在上传服务器的时候 img 就添上 js点击属性，但是还没有与ios那边沟通，只能先这样了，这样可以自己玩自己的，不用管任何人。 </p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android输入法表情的获取、显示及上传服务器]]></title>
      <url>http://yoursite.com/2016/12/08/Android%E8%BE%93%E5%85%A5%E6%B3%95%E8%A1%A8%E6%83%85%E7%9A%84%E8%8E%B7%E5%8F%96%E3%80%81%E6%98%BE%E7%A4%BA%E5%8F%8A%E4%B8%8A%E4%BC%A0%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      <content type="html"><![CDATA[<p>最近，在我们的项目中新增评论这一块，内容中还要有表情。行吧，开始做吧：</p>
<h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>做着做着发现并不是那么一回事</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">edittext.getText().toString()；</div></pre></td></tr></table></figure>
<p>获取不到表情的任何信息，这个犯愁了。查了好多资料，都是自定义添加的表情，根本没法获取输入法自带的表情。</p>
<h4 id="客户端输入法表情的获取-UTF-8编码"><a href="#客户端输入法表情的获取-UTF-8编码" class="headerlink" title="客户端输入法表情的获取(UTF-8编码)"></a>客户端输入法表情的获取(UTF-8编码)</h4><p>黄天不负有心人，查了好几天资料，终于找到了获取输入法表情的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String title=<span class="keyword">null</span>;</div><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">      title = URLEncoder.encode(editTitle.getText().toString(),<span class="string">"UTF-8"</span>);</div><div class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">      e.printStackTrace();</div><div class="line">                    &#125;</div></pre></td></tr></table></figure>
<p>对，你没有看错，就是对获取到的进行一次URL编码。</p>
<p>这样得到的结果就是这样一堆东西，将这个东西上传至服务器</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%F0%<span class="number">9F</span>%<span class="number">98</span>%B3</div></pre></td></tr></table></figure>
<h4 id="服务器输入法表情的获取-UTF-8解码"><a href="#服务器输入法表情的获取-UTF-8解码" class="headerlink" title="服务器输入法表情的获取(UTF-8解码)"></a>服务器输入法表情的获取(UTF-8解码)</h4><p>从服务器获取到表情的字符串之后，要想显示，还需要URL解码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">try</span> &#123;</div><div class="line">         String content=URLDecoder.decode(commentInfo.getContent(), <span class="string">"UTF-8"</span>);            holder.content.setText(content);</div><div class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>解码完，textview显示的就是一个表情了。</p>
<p>搞定。</p>
<h4 id="需求更改：只对表情进行编码-Unicode编码"><a href="#需求更改：只对表情进行编码-Unicode编码" class="headerlink" title="需求更改：只对表情进行编码(Unicode编码)"></a>需求更改：只对表情进行编码(Unicode编码)</h4><p>原来的做法是将整个edittext的内容进行了编码，这样汉字、数字等也进行了编码，不利于搜索，现在要只对表情进行编码</p>
<p>编码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">escapeJavaString</span><span class="params">(String st)</span> </span>&#123;</div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; st.length(); i++) &#123;</div><div class="line">                <span class="keyword">char</span> c = st.charAt(i);</div><div class="line">                <span class="keyword">if</span> (!Character.isLetterOrDigit(c) &amp;&amp; !Character.isSpaceChar(c) &amp;&amp; !Character.isWhitespace(c) &amp;&amp; !isChinese(c)) &#123;</div><div class="line">                    String unicode = String.valueOf(c);</div><div class="line">                    <span class="keyword">int</span> code = (<span class="keyword">int</span>) c;</div><div class="line">                    <span class="keyword">if</span> (!(code &gt;= <span class="number">0</span> &amp;&amp; code &lt;= <span class="number">255</span>)) &#123;</div><div class="line">                        unicode = <span class="string">"\\u"</span> + Integer.toHexString(c);</div><div class="line">                    &#125;</div><div class="line">                    builder.append(unicode);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    builder.append(c);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            AppLog.LOG(<span class="string">"Unicode Block"</span>, builder.toString());</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> builder.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 根据Unicode编码判断中文汉字和中文标点符号</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> c</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isChinese</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;</div><div class="line">        Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);</div><div class="line">        <span class="keyword">if</span>(ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS</div><div class="line">                || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS</div><div class="line">                || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A</div><div class="line">                || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_B</div><div class="line">                || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION</div><div class="line">                || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS</div><div class="line">                || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>解码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">String fromServerUnicodeDecoded = StringEscapeUtils.unescapeJava(content);</div></pre></td></tr></table></figure>
<p>StringEscapeUtils工具类来源于：</p>
<p><a href="http://mvnrepository.com/artifact/org.apache.commons/commons-lang3/3.5" target="_blank" rel="external">http://mvnrepository.com/artifact/org.apache.commons/commons-lang3/3.5</a></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'org.apache.commons:commons-lang3:3.5'</span></div></pre></td></tr></table></figure>
<p>gradle引入经常失败，所以才有上面的jar包的地址。</p>
<h4 id="不成熟的另一种方式"><a href="#不成熟的另一种方式" class="headerlink" title="不成熟的另一种方式"></a>不成熟的另一种方式</h4><p>此方法因为技术不到家，是一种思路，记录一下，后来更改</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">escapeJavaString</span><span class="params">(String st)</span> </span>&#123;</div><div class="line"></div><div class="line">        StringBuilder builder = <span class="keyword">new</span> StringBuilder();</div><div class="line"></div><div class="line">        Pattern emoji = Pattern.compile(<span class="string">"[\ud83c\udc00-\ud83c\udfff]|[\ud83d\udc00-\ud83d\udfff]|[\u2600-\u27ff]"</span>, Pattern.UNICODE_CASE | Pattern.CASE_INSENSITIVE);</div><div class="line">        Matcher emojiMatcher = emoji.matcher(st);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (emojiMatcher.find()) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                String contnet = URLEncoder.encode(emojiMatcher.group(<span class="number">0</span>), <span class="string">"UTF-8"</span>);</div><div class="line">                st = emojiMatcher.replaceFirst(contnet);</div><div class="line">                AppLog.LOG(<span class="string">"tag"</span>, <span class="string">"editText===emojiMatcher.toString()="</span> + contnet);</div><div class="line">                AppLog.LOG(<span class="string">"tag"</span>, <span class="string">"editText===st22222="</span> + st);</div><div class="line">                escapeJavaString(st);</div><div class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          </div><div class="line">            AppLog.LOG(<span class="string">"tag"</span>, <span class="string">"editText===st="</span> + st);</div><div class="line">            builder.append(st);</div><div class="line">            AppLog.LOG(<span class="string">"tag"</span>, <span class="string">"editText===builder="</span> + builder.toString());</div><div class="line">            <span class="keyword">return</span> builder.toString();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        AppLog.LOG(<span class="string">"tag"</span>, <span class="string">"editText===zoudezheme="</span> + st);</div><div class="line">        <span class="keyword">return</span> st;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>中间会出现想要的结果，但是最后输出的结果不是想要的。</p>
<h4 id="StringEscapeUtils解码出现问题-Unicode解码"><a href="#StringEscapeUtils解码出现问题-Unicode解码" class="headerlink" title="StringEscapeUtils解码出现问题(Unicode解码)"></a>StringEscapeUtils解码出现问题(Unicode解码)</h4><p>原以为解决问题了，但是后来出来的解析状态异常，用他来解析一长串字符，有的符号解析不了，就会报错，看来是有必要换中解析方式了</p>
<p>既然当时编码的时候手动进行unicode编码，那么解码的时候也可以手动unicode解码啊,不就是\u开头的么，但是有的四位\u3d4f,还有的三位\u300,不知道有木有五位的，暂且先按最多四位来吧解码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decodeUnicode</span><span class="params">(String theString)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">char</span> aChar;</div><div class="line"></div><div class="line">        <span class="keyword">int</span> len = theString.length();</div><div class="line"></div><div class="line">        StringBuffer outBuffer = <span class="keyword">new</span> StringBuffer(len);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; len;) &#123;</div><div class="line"></div><div class="line">            aChar = theString.charAt(x++);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (aChar == <span class="string">'\\'</span>) &#123;</div><div class="line"></div><div class="line">                aChar = theString.charAt(x++);</div><div class="line"></div><div class="line">                <span class="keyword">if</span> (aChar == <span class="string">'u'</span>) &#123;</div><div class="line"></div><div class="line">                    <span class="comment">// Read the xxxx</span></div><div class="line"></div><div class="line">                    <span class="keyword">int</span> value = <span class="number">0</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</div><div class="line">                    </div><div class="line">                     <span class="keyword">if</span> (x == len)&#123;   <span class="comment">//为了解决三位的表情符号编码 会发生数组越界异常</span></div><div class="line">                            outBuffer.append((<span class="keyword">char</span>) value);</div><div class="line">                            <span class="keyword">return</span> outBuffer.toString();</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        aChar = theString.charAt(x++);</div><div class="line"></div><div class="line">                        <span class="keyword">switch</span> (aChar) &#123;</div><div class="line"></div><div class="line">                            <span class="keyword">case</span> <span class="string">'0'</span>:</div><div class="line"></div><div class="line">                            <span class="keyword">case</span> <span class="string">'1'</span>:</div><div class="line"></div><div class="line">                            <span class="keyword">case</span> <span class="string">'2'</span>:</div><div class="line"></div><div class="line">                            <span class="keyword">case</span> <span class="string">'3'</span>:</div><div class="line"></div><div class="line">                            <span class="keyword">case</span> <span class="string">'4'</span>:</div><div class="line"></div><div class="line">                            <span class="keyword">case</span> <span class="string">'5'</span>:</div><div class="line"></div><div class="line">                            <span class="keyword">case</span> <span class="string">'6'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'7'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'8'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'9'</span>:</div><div class="line">                                value = (value &lt;&lt; <span class="number">4</span>) + aChar - <span class="string">'0'</span>;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="string">'a'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'b'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'c'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'d'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'e'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'f'</span>:</div><div class="line">                                value = (value &lt;&lt; <span class="number">4</span>) + <span class="number">10</span> + aChar - <span class="string">'a'</span>;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            <span class="keyword">case</span> <span class="string">'A'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'B'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'C'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'D'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'E'</span>:</div><div class="line">                            <span class="keyword">case</span> <span class="string">'F'</span>:</div><div class="line">                                value = (value &lt;&lt; <span class="number">4</span>) + <span class="number">10</span> + aChar - <span class="string">'A'</span>;</div><div class="line">                                <span class="keyword">break</span>;</div><div class="line">                            <span class="keyword">default</span>:</div><div class="line">                                outBuffer.append((<span class="keyword">char</span>) value);  <span class="comment">//为了解决编码是三位的情况，直接输出，减1，最后一位是字符 不是表情编码</span></div><div class="line">                                x--;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                    outBuffer.append((<span class="keyword">char</span>) value);</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    <span class="keyword">if</span> (aChar == <span class="string">'t'</span>)</div><div class="line">                        aChar = <span class="string">'\t'</span>;</div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (aChar == <span class="string">'r'</span>)</div><div class="line">                        aChar = <span class="string">'\r'</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (aChar == <span class="string">'n'</span>)</div><div class="line"></div><div class="line">                        aChar = <span class="string">'\n'</span>;</div><div class="line"></div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (aChar == <span class="string">'f'</span>)</div><div class="line"></div><div class="line">                        aChar = <span class="string">'\f'</span>;</div><div class="line"></div><div class="line">                    outBuffer.append(aChar);</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line"></div><div class="line">                outBuffer.append(aChar);</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">return</span> outBuffer.toString();</div><div class="line"></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="禁止输入表情"><a href="#禁止输入表情" class="headerlink" title="禁止输入表情"></a>禁止输入表情</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainsEmojiEditText</span> <span class="keyword">extends</span> <span class="title">EditText</span> </span>&#123;</div><div class="line">    <span class="comment">//输入表情前的光标位置</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> cursorPos;</div><div class="line">    <span class="comment">//输入表情前EditText中的文本</span></div><div class="line">    <span class="keyword">private</span> String inputAfterText;</div><div class="line">    <span class="comment">//是否重置了EditText的内容</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> resetText;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContainsEmojiEditText</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">        initEditText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContainsEmojiEditText</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">        initEditText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ContainsEmojiEditText</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        <span class="keyword">this</span>.mContext = context;</div><div class="line">        initEditText();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">// 初始化edittext 控件</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initEditText</span><span class="params">()</span> </span>&#123;</div><div class="line">        addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!resetText) &#123;</div><div class="line">                    cursorPos = getSelectionEnd();</div><div class="line">                    <span class="comment">// 这里用s.toString()而不直接用s是因为如果用s，</span></div><div class="line">                    <span class="comment">// 那么，inputAfterText和s在内存中指向的是同一个地址，s改变了，</span></div><div class="line">                    <span class="comment">// inputAfterText也就改变了，那么表情过滤就失败了</span></div><div class="line">                    inputAfterText= s.toString();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span> (!resetText) &#123;</div><div class="line">                    <span class="keyword">if</span> (count &gt;= <span class="number">2</span>) &#123;<span class="comment">//表情符号的字符长度最小为2</span></div><div class="line">                        CharSequence input = s.subSequence(cursorPos, cursorPos + count);</div><div class="line">                        <span class="keyword">if</span> (containsEmoji(input.toString())) &#123;</div><div class="line">                            resetText = <span class="keyword">true</span>;</div><div class="line">                            Toast.makeText(mContext, <span class="string">"不支持输入Emoji表情符号"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">                            <span class="comment">//是表情符号就将文本还原为输入表情符号之前的内容</span></div><div class="line">                            setText(inputAfterText);</div><div class="line">                            CharSequence text = getText();</div><div class="line">                            <span class="keyword">if</span> (text <span class="keyword">instanceof</span> Spannable) &#123;</div><div class="line">                                Spannable spanText = (Spannable) text;</div><div class="line">                                Selection.setSelection(spanText, text.length());</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    resetText = <span class="keyword">false</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable editable)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 检测是否有emoji表情</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> source</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">containsEmoji</span><span class="params">(String source)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> len = source.length();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</div><div class="line">            <span class="keyword">char</span> codePoint = source.charAt(i);</div><div class="line">            <span class="keyword">if</span> (!isEmojiCharacter(codePoint)) &#123; <span class="comment">//如果不能匹配,则该字符是Emoji表情</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 判断是否是Emoji</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> codePoint 比较的单个字符</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isEmojiCharacter</span><span class="params">(<span class="keyword">char</span> codePoint)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> (codePoint == <span class="number">0x0</span>) || (codePoint == <span class="number">0x9</span>) || (codePoint == <span class="number">0xA</span>) ||</div><div class="line">                (codePoint == <span class="number">0xD</span>) || ((codePoint &gt;= <span class="number">0x20</span>) &amp;&amp; (codePoint &lt;= <span class="number">0xD7FF</span>)) ||</div><div class="line">                ((codePoint &gt;= <span class="number">0xE000</span>) &amp;&amp; (codePoint &lt;= <span class="number">0xFFFD</span>)) || ((codePoint &gt;= <span class="number">0x10000</span>)</div><div class="line">                &amp;&amp; (codePoint &lt;= <span class="number">0x10FFFF</span>));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="自定义表情的扩展"><a href="#自定义表情的扩展" class="headerlink" title="自定义表情的扩展"></a>自定义表情的扩展</h4><p>强烈推荐：<br><a href="http://blog.csdn.net/javazejian/article/details/52126391" target="_blank" rel="external">http://blog.csdn.net/javazejian/article/details/52126391</a></p>
<p>这篇博客写的相当不错，相当的流畅，有兴趣的可以看看。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Coding与Git配合在Studio的一些使用]]></title>
      <url>http://yoursite.com/2016/11/15/%E5%85%B3%E4%BA%8ECoding%E4%B8%8EGit%E9%85%8D%E5%90%88%E5%9C%A8Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h4 id="1-Coding与Git的关联"><a href="#1-Coding与Git的关联" class="headerlink" title="1.Coding与Git的关联"></a>1.Coding与Git的关联</h4><p><li>1:在coding.net上创建项目，用于放置你的项目的文件</li></p>
<p>创建项目的基本选项 ：readme  ignore </p>
<p><li>2.确保studio中git 已经配置好</li></p>
<p>打开idea，主菜单file-setting-version control-git 配置好git</p>
<p><li>3.将项目加入git版本库</li></p>
<p>在要提交的project项目文件夹初始化(不是 module)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜ FangQQDemo git init</div><div class="line">Initialized empty Git repository in /Users/jiayongkai/Documents/as_project/FangQQDemo/.git/</div></pre></td></tr></table></figure>
<p><li>4.将本地库与远程库关联</li></p>
<p>git remote add name url</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜ FangQQDemo git:(master) ✗ git remote add FangQQDemo https:<span class="comment">//git.coding.net/iosline/FangQ.git</span></div></pre></td></tr></table></figure>
<p><li>5.<b>使用git之前都需要先更新过之后才能提交</b></li></p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/git_coding_2.png"></p>
<p>打开 pull 界面</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/git_coding_3.png"></p>
<p>看到没有我们刚刚添加的remote url！点击右边的刷新按钮，然后选中webapp，这样就可以正常拉取代码了</p>
<p><li> 6. Push代码</li></p>
<p>可以直接push  或者先 add 看一下都要push 那些代码。</p>
<h4 id="2-忽略文件"><a href="#2-忽略文件" class="headerlink" title="2.忽略文件"></a>2.忽略文件</h4><p>Android Studio默认给出了三种忽略方式，供开发者进行选择（如上图红框）：</p>
<p><li>1、忽略指定的文件</li></p>
<p><li>2、忽略文件夹下所有文件</li></p>
<p><li>3、忽略符合匹配规则的文件</li></p>
<p>点击右侧的“+”进行添加，“-”删除。Androis Studio一般忽略以下不需要增加到版本库的文件：</p>
<p><li>1、.idea 文件夹，此文件夹是用来保存开发工具的设置信息。</li></p>
<p><li>2、 .gradle 文件夹，此文件夹是用来保存gradle的依赖信息。</li></p>
<p><li>3、 所有的 build 文件夹，build文件夹是用来保存编译后的文件目录。</li></p>
<p><li>4、 所有的 .iml 文件，是用来保存开发工具信息。</li></p>
<p><li>5、local.properties 文件，是用来保存项目依赖信息。</li></p>
<p>project中忽略</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">*.iml</div><div class="line">.gradle</div><div class="line">/local.properties</div><div class="line">/.idea</div><div class="line">/build</div><div class="line">/gradle</div></pre></td></tr></table></figure>
<p>module中忽略</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"># Built application files</div><div class="line">*.apk</div><div class="line">*.ap_</div><div class="line"></div><div class="line"># Files for the Dalvik VM</div><div class="line">*.dex</div><div class="line"></div><div class="line"># Java class files</div><div class="line">*.class</div><div class="line"></div><div class="line"># Generated files</div><div class="line">bin/</div><div class="line">gen/</div><div class="line"></div><div class="line"># Gradle files</div><div class="line">.gradle/</div><div class="line">build/</div><div class="line">/*/build/</div><div class="line"></div><div class="line"># Local configuration file (sdk path, etc)</div><div class="line">local.properties</div><div class="line"></div><div class="line"># Proguard folder generated by Eclipse</div><div class="line">proguard/</div><div class="line"></div><div class="line"># Log Files</div><div class="line">*.log</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ListView中EditText的使用注意]]></title>
      <url>http://yoursite.com/2016/11/14/ListView%E4%B8%ADEditText%E7%9A%84%E4%BD%BF%E7%94%A8%E6%B3%A8%E6%84%8F/</url>
      <content type="html"><![CDATA[<h3 id="一、ListView获取item中EditText值"><a href="#一、ListView获取item中EditText值" class="headerlink" title="一、ListView获取item中EditText值"></a>一、ListView获取item中EditText值</h3><p>解决办法原理：</p>
<p>重写BaseAdapter.getView函数,然后两种选择</p>
<p><li>1.用一个map集合数组存储EditText中的值</li></p>
<p><li>2.或者动态设置对象集合position位置下edittext要显示的值,</li></p>
<p>根据position即数组下标,在getView中动态更新EditText和动态获取EditText中的值.</p>
<p>因为ListView中的item是复用的,如果不动态清空或动态获取EditText中值,就会出现数据紊乱,或者没数据.那么在生成EditText的时候要监控其值的变化.存储下来.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> List&lt;Entity&gt; list;  </div><div class="line">    <span class="keyword">private</span> LayoutInflater inflater;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyAdapter</span><span class="params">(Context context, List&lt;Entity&gt; list)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.list = list;  </div><div class="line">        inflater = LayoutInflater.from(context);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> list.size();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> list.get(position);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> position;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;  </div><div class="line">        ViewHolder viewHolder;  </div><div class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;  </div><div class="line">            convertView = inflater.inflate(R.layout.item, <span class="keyword">null</span>);  </div><div class="line">            viewHolder = <span class="keyword">new</span> ViewHolder();  </div><div class="line">            viewHolder.textView = (TextView) convertView.findViewById(R.id.txt_item);  </div><div class="line">            viewHolder.editText = (EditText) convertView.findViewById(R.id.edit_item);  </div><div class="line">            viewHolder.editText.setTag(position);  </div><div class="line">            viewHolder.editText.addTextChangedListener(<span class="keyword">new</span> MyTextChangeListener(viewHolder));  </div><div class="line">            convertView.setTag(viewHolder);  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            viewHolder = (ViewHolder) convertView.getTag();  </div><div class="line">            viewHolder.editText.setTag(position);  </div><div class="line">        &#125;  </div><div class="line">        Entity entity = list.get(position);  </div><div class="line">        viewHolder.editText.setText(entity.getContent());  </div><div class="line">        viewHolder.textView.setText(entity.getId());  </div><div class="line">        <span class="keyword">return</span> convertView;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;  </div><div class="line">        TextView textView;  </div><div class="line">        EditText editText;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTextChangeListener</span> <span class="keyword">implements</span> <span class="title">TextWatcher</span> </span>&#123;  </div><div class="line">          </div><div class="line">        <span class="keyword">private</span> ViewHolder holder;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyTextChangeListener</span><span class="params">(ViewHolder holder)</span> </span>&#123;  </div><div class="line">            <span class="keyword">this</span>.holder = holder;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;  </div><div class="line">            <span class="keyword">int</span> position = (Integer) holder.editText.getTag();  </div><div class="line">            Entity entity = list.get(position);  </div><div class="line">            entity.setContent(s.toString());  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count,  </span></span></div><div class="line">                <span class="keyword">int</span> after) &#123;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="meta">@Override</span>  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before,  </span></span></div><div class="line">                <span class="keyword">int</span> count) &#123;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">      </div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Entity&gt; <span class="title">getData</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> list;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、ListView中EditText的数据加载错乱的问题"><a href="#二、ListView中EditText的数据加载错乱的问题" class="headerlink" title="二、ListView中EditText的数据加载错乱的问题"></a>二、ListView中EditText的数据加载错乱的问题</h3><p>上面的代码解决了这个问题。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> </span>&#123;</div><div class="line">		TextView tv;</div><div class="line">		EditText imageDesc;</div><div class="line">		<span class="keyword">int</span> position;</div><div class="line"></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span></span>&#123;</div><div class="line">			tv = (TextView) view.findViewById(R.id.title_name);</div><div class="line">			imageDesc = (EditText) view.findViewById(R.id.edt_designer_img_content);</div><div class="line">			imageDesc.setTag(position);</div><div class="line"></div><div class="line">			imageDesc.addTextChangedListener(<span class="keyword">new</span> TextWatcher() &#123;</div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> before, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeTextChanged</span><span class="params">(CharSequence s, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</div><div class="line">				&#125;</div><div class="line"></div><div class="line">				<span class="meta">@Override</span></div><div class="line">				<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterTextChanged</span><span class="params">(Editable s)</span> </span>&#123;</div><div class="line">					 imageList.get(position).setDesc(s.toString().trim());</div><div class="line">				&#125;</div><div class="line">			&#125;);</div><div class="line"></div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">			DrawingBean image = imageList.get(position);</div><div class="line">			ViewHolder holder = <span class="keyword">null</span>;</div><div class="line">			<span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;</div><div class="line"></div><div class="line">				convertView = View.inflate(WorksContentActivity.<span class="keyword">this</span>, R.layout.item_list_designer_drawing, <span class="keyword">null</span>);</div><div class="line">				holder = <span class="keyword">new</span> ViewHolder(convertView);</div><div class="line">				convertView.setTag(holder);</div><div class="line">			&#125;<span class="keyword">else</span> &#123;</div><div class="line">				holder = (ViewHolder) convertView.getTag();</div><div class="line">			&#125;</div><div class="line"></div><div class="line">			holder.position=position;</div><div class="line">			holder.tv.setText(<span class="string">"图片"</span> + (position + <span class="number">1</span>);</div><div class="line">			holder.imageDesc.setText(image.getDesc());</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>原理和上面一样。</p>
<h3 id="三、点击EditText以外的位置-软键盘消失"><a href="#三、点击EditText以外的位置-软键盘消失" class="headerlink" title="三、点击EditText以外的位置 软键盘消失"></a>三、点击EditText以外的位置 软键盘消失</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取当前点击位置是否为edittext</span></div><div class="line"></div><div class="line">/ * *</div><div class="line">      * 获取当前点击位置是否为et</div><div class="line">      * <span class="meta">@param</span> view 焦点所在View</div><div class="line">      * <span class="meta">@param</span> event 触摸事件</div><div class="line">      * @ <span class="keyword">return</span></div><div class="line">      * /</div><div class="line">     <span class="function"><span class="keyword">public</span>  <span class="keyword">boolean</span> <span class="title">isClickEt</span> <span class="params">( View view , MotionEvent event )</span> </span>&#123;</div><div class="line">         <span class="keyword">if</span> ( view ! = <span class="keyword">null</span> &amp; &amp; ( view <span class="keyword">instanceof</span> EditText ) ) &#123;</div><div class="line">             <span class="keyword">int</span>[] leftTop = &#123; <span class="number">0</span> , <span class="number">0</span> &#125; ;</div><div class="line">             / / 获取输入框当前的 location 位置</div><div class="line">             view .getLocationInWindow ( leftTop ) ;</div><div class="line">             <span class="keyword">int</span> left = leftTop[ <span class="number">0</span> ];</div><div class="line">             <span class="keyword">int</span> top = leftTop[ <span class="number">1</span> ];</div><div class="line">             / / 此处根据输入框左上位置和宽高获得右下位置</div><div class="line">             <span class="keyword">int</span> bottom = top + view .getHeight ( ) ;</div><div class="line">             <span class="keyword">int</span> right = left + view .getWidth ( ) ;</div><div class="line">             <span class="keyword">if</span> ( event .getX ( ) &gt; left &amp; &amp; event .getX ( ) &lt; right</div><div class="line">                     &amp; &amp; event .getY ( ) &gt; top &amp; &amp; event .getY ( ) &lt; bottom ) &#123;</div><div class="line">                 / / 点击的是输入框区域，保留点击EditText的事件</div><div class="line">                 <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">             &#125; <span class="keyword">else</span> &#123;</div><div class="line">                 <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">             &#125;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> <span class="keyword">false</span> ;</div><div class="line">     &#125;</div><div class="line"></div><div class="line"></div><div class="line"> / * *</div><div class="line">      * 點擊EditText以外的區域后鍵盤隱藏</div><div class="line">      * /</div><div class="line">     <span class="meta">@Override</span></div><div class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">dispatchTouchEvent</span> <span class="params">( MotionEvent event )</span> </span>&#123;</div><div class="line">         <span class="keyword">if</span> ( event .getAction ( ) = = MotionEvent.ACTION_DOWN ) &#123;</div><div class="line"> </div><div class="line">             / / 获取当前获得当前焦点所在View</div><div class="line">             View view = getCurrentFocus ( ) ;</div><div class="line">             <span class="keyword">if</span> ( isClickEt ( view , event ) ) &#123;</div><div class="line"> </div><div class="line">                 / / 如果不是edittext，则隐藏键盘</div><div class="line"> </div><div class="line">                 InputMethodManager inputMethodManager = ( InputMethodManager ) getSystemService ( Context.INPUT_METHOD_SERVICE ) ;</div><div class="line">                 <span class="keyword">if</span> ( inputMethodManager ! = <span class="keyword">null</span> ) &#123;</div><div class="line">                     / / 隐藏键盘</div><div class="line">                     inputMethodManager.hideSoftInputFromWindow ( view .getWindowToken ( ) , <span class="number">0</span> ) ;</div><div class="line">                 &#125;</div><div class="line">             &#125;</div><div class="line">             <span class="keyword">return</span> <span class="keyword">super</span>.dispatchTouchEvent ( event ) ;</div><div class="line">         &#125;</div><div class="line">         / * *</div><div class="line">          * 看源码可知superDispatchTouchEvent  是个抽象方法，用于自定义的Window</div><div class="line">          * 此处目的是为了继续将事件由dispatchTouchEvent ( MotionEvent event ) 传递到onTouchEvent ( MotionEvent event )</div><div class="line">          * 必不可少，否则所有组件都不能触发 onTouchEvent ( MotionEvent event )</div><div class="line">          * /</div><div class="line">         <span class="keyword">if</span> ( getWindow ( ) .superDispatchTouchEvent ( event ) ) &#123;</div><div class="line">             <span class="keyword">return</span> <span class="keyword">true</span> ;</div><div class="line">         &#125;</div><div class="line">         <span class="keyword">return</span> onTouchEvent ( event ) ;</div><div class="line">     &#125;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio的一些坑]]></title>
      <url>http://yoursite.com/2016/11/14/Android-Studio%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      <content type="html"><![CDATA[<p>最近由于项目中的方法数过多，经常出现65535的异常，eclipse打包不成功，迫不得已，将原来的项目转到android studio上来继续开发，先后遇到了这样或者那样的问题。来记录一下：</p>
<h3 id="eclipsetostudio"><a href="#eclipsetostudio" class="headerlink" title="eclipsetostudio"></a>eclipsetostudio</h3><h4 id="从Eclipse中导出Gradle-build-files"><a href="#从Eclipse中导出Gradle-build-files" class="headerlink" title="从Eclipse中导出Gradle build files"></a>从Eclipse中导出Gradle build files</h4><p>在Eclipse菜单中 File –&gt; Export–&gt;Generate Gradle build files<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/elipsetostuido_1.png"></p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/eclipsetostudio_2.png"></p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/elipsetostudio_3.png"></p>
<h4 id="修改导出文件参数-或者导入studio之后在studio中修改"><a href="#修改导出文件参数-或者导入studio之后在studio中修改" class="headerlink" title="修改导出文件参数(或者导入studio之后在studio中修改)"></a>修改导出文件参数(或者导入studio之后在studio中修改)</h4><p>导出后，由于adt很久没更新，需要手动改一些参数，才能保证正常使用。<br>分情况说一下：</p>
<p><li>没有库工程，只有主工程：module</li></p>
<p>修改主工程的build.gradle 文件，修改需要的gradle版本</p>
<p>在 /gradle/wrapper/gradle-wrapper.properties里面,更新gradle版本</p>
<p><li>含有库工程： project</li></p>
<p>和上面一样，只不过修改的是外面整个project的build.gradle和/gradle/wrapper/gradle-wrapper.properties。</p>
<h4 id="导入AndroidStudio"><a href="#导入AndroidStudio" class="headerlink" title="导入AndroidStudio"></a>导入AndroidStudio</h4><p>这时打开 studio open 或 import 即可。<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/eclipsetostudio4.png"></p>
<h3 id="一些错误"><a href="#一些错误" class="headerlink" title="一些错误"></a>一些错误</h3><p>到进来之后，直到运行apk成功之间还存在很多问题：</p>
<h5 id="1-找不到三方的一些类："><a href="#1-找不到三方的一些类：" class="headerlink" title="1.找不到三方的一些类："></a>1.找不到三方的一些类：</h5><p>java.lang.UnsatisfiedLinkError: Couldn’t load hyphenate_av from loader dalvik.system.PathClassLoader</p>
<p>原因是android studio导入so文件没有编译到apk里面去，所以导致UnsatisfiedLinkError异常</p>
<p>打开app下的build.gradle，在android的标签下加入如下代码：<br>　　<br>　<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">　 sourceSets &#123;</div><div class="line">main &#123;</div><div class="line">    <span class="comment">//jni库的调用会到资源文件夹下libs里面找so文件</span></div><div class="line">    jniLibs.srcDirs = [<span class="string">'libs'</span>]</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>或者 so 文件放在 src/main 目录下 建个文件夹 jniLibs 放着这里面  src/main/jniLibs</p>
<h5 id="2-no-png-file之类的"><a href="#2-no-png-file之类的" class="headerlink" title="2.no png file之类的"></a>2.no png file之类的</h5><p>//关闭Android Studio的PNG合法性检查的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    aaptOptions&#123;</div><div class="line">        aaptOptions.cruncherEnabled = <span class="keyword">false</span></div><div class="line">        aaptOptions.useNewCruncher = <span class="keyword">false</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h5 id="3-Out-of-Memory-GC"><a href="#3-Out-of-Memory-GC" class="headerlink" title="3.Out of Memory:GC"></a>3.Out of Memory:GC</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">   dexOptions &#123;  javaMaxHeapSize <span class="string">"4g"</span> &#125;   </div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h5 id="4-plugin-with-id-com-android-application-not-found"><a href="#4-plugin-with-id-com-android-application-not-found" class="headerlink" title="4.plugin with id com.android.application not found"></a>4.plugin with id com.android.application not found</h5><p>在项目最外层的build.gradle加入如下代码刷新（try again）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;     </div><div class="line">     repositories &#123;          </div><div class="line">          mavenCentral()     </div><div class="line">     &#125;     </div><div class="line">    dependencies &#123;          </div><div class="line">          classpath <span class="string">'com.android.tools.build:gradle:2.0+'</span>     </div><div class="line">     &#125;</div><div class="line"> &#125; </div><div class="line"> allprojects &#123;     </div><div class="line">      repositories &#123;          </div><div class="line">          mavenCentral()     </div><div class="line">      &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="5-transform-TransformException-DuplicateFileException"><a href="#5-transform-TransformException-DuplicateFileException" class="headerlink" title="5.transform.TransformException DuplicateFileException"></a>5.transform.TransformException DuplicateFileException</h5><p>com.android.build.api.transform.TransformException: com.android.builder.packaging.DuplicateFileException: Duplicate files copied in APK META-INF/maven/javax.jmdns/jmdns/pom.properties<br>      File1: /Users/jiayongkai/Documents/workspace/3kjandroid/1/yifenguser/libs/jmdns-3.4.1.jar<br>      File2: /Users/jiayongkai/Documents/workspace/3kjandroid/1/yifenguser/libs/jmdns-3.4.1.jar</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">packagingOptions &#123;</div><div class="line">   </div><div class="line">    exclude <span class="string">'META-INF/maven/javax.jmdns/jmdns/pom.properties'</span></div><div class="line">    exclude <span class="string">'META-INF/maven/javax.jmdns/jmdns/pom.xml'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h5 id="6-Manifest-merger-failed-with-multiple-errors-see-？"><a href="#6-Manifest-merger-failed-with-multiple-errors-see-？" class="headerlink" title="6.Manifest merger failed with multiple errors, see ？"></a>6.Manifest merger failed with multiple errors, see ？</h5><p>Error:Execution failed for task ‘:app:processDebugManifest’.</p>
<blockquote>
<p>Manifest merger failed with multiple errors, see logs</p>
</blockquote>
<p>原因是导入的库在build.gradle中的minSdkVersion与你的应用的minSdkVersion不匹配导致的(app要求应用最小系统版本和库要求系统最小版本不一致),改成一样的就行了.</p>
<h5 id="7-warning-Ignoring-InnerClasses-attribute-for-an-anonymous-inner-class"><a href="#7-warning-Ignoring-InnerClasses-attribute-for-an-anonymous-inner-class" class="headerlink" title="7.warning: Ignoring InnerClasses attribute for an anonymous inner class"></a>7.warning: Ignoring InnerClasses attribute for an anonymous inner class</h5><p>that doesn’t come with an<br>associated EnclosingMethod attribute. This class was probably produced by a<br>compiler that did not target the modern .class file format. The recommended<br>solution is to recompile the class from source, using an up-to-date compiler<br>and without specifying any “-target” type options. The consequence of ignoring<br>this warning is that reflective operations on this class will incorrectly<br>indicate that it is <em>not</em> an inner class.</p>
<p>解决办法：</p>
<p>好像是 debug 签名过期了  ；<br>去 Users/用户名/.adnroid 下，删除：debug.keystore和ddms.cfg 即可。 </p>
<h5 id="8-SVN-找不到了"><a href="#8-SVN-找不到了" class="headerlink" title="8.SVN 找不到了"></a>8.SVN 找不到了</h5><p>今天早上开机，打开android studio 的时候，突然发现，自己的studio中的subversion找不到了。前几天还用的好好的，今天突然找不到了，我很是纳闷了。再网上找了很多的资料，大部分都说你的svn 安装的不对，后来请教了大神，知道了错误在哪里？原来是plugin里边的subversion没有勾选啊。<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/svn_01.png"></p>
<h5 id="9-打包时遇见"><a href="#9-打包时遇见" class="headerlink" title="9.打包时遇见"></a>9.打包时遇见</h5><p>Error:A problem was found with the configuration of task ‘:app:packageRelease’.</p>
<blockquote>
<p>File ‘/Users/jiayongkai/Downloads/jd<em>android/app/build/intermediates/res/resources-release-stripped.ap</em>‘ specified for property ‘resourceFile’ does not exist.</p>
</blockquote>
<p>解决办法：</p>
<p><li>1、instant run 不支持 shrinkResources  File –&gt; Settings–&gt;instant  取消第一个选项</li></p>
<p><li>2.   并将module中的build.gradle中shrinkResources置为false，然后重新编译即可</li></p>
<h5 id="10-经常出现-transform、zip-等的异常，是因为-jar包-和-gradle-dependices引入重复引起的冲突。"><a href="#10-经常出现-transform、zip-等的异常，是因为-jar包-和-gradle-dependices引入重复引起的冲突。" class="headerlink" title="10.经常出现 transform、zip 等的异常，是因为 jar包 和 gradle dependices引入重复引起的冲突。"></a>10.经常出现 transform、zip 等的异常，是因为 jar包 和 gradle dependices引入重复引起的冲突。</h5><p>Error:Execution failed for task ‘:yifenguser:transformClassesWithJarMergingFor_360Debug’.</p>
<blockquote>
<p>com.android.build.api.transform.TransformException: java.util.zip.ZipException: duplicate entry: android/support/annotation/ColorRes.class</p>
</blockquote>
<h5 id="11-svn更新提交代码除了问题-提示-Please-see-the-‘svn-upgrade’-command"><a href="#11-svn更新提交代码除了问题-提示-Please-see-the-‘svn-upgrade’-command" class="headerlink" title="11.svn更新提交代码除了问题  提示: Please see the ‘svn upgrade’ command"></a>11.svn更新提交代码除了问题  提示: Please see the ‘svn upgrade’ command</h5><p>原因：svn 版本低  提示那个路径 就在那个路径下 svn upgrade</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">svn: E155036: Please see the <span class="string">'svn upgrade'</span> command  </div><div class="line">svn: E155036: Working copy <span class="string">'/Users/lijie/Documents/merchat_app'</span> <span class="function">is too <span class="title">old</span> <span class="params">(format <span class="number">10</span>, created by Subversion <span class="number">1.6</span>)</span>  </span></div><div class="line">localhost:merchat_app lijie$ svn upgrade help  </div><div class="line">svn: E155019: Can't upgrade '/Users/lijie/Documents/merchat_app/help' as it is not a pre-1.7 working copy directory  </div><div class="line">svn: E000002: Can't open file '/Users/lijie/Documents/merchat_app/help/.svn/entries': No such file or directory  </div><div class="line">localhost:zcht lijie$ svn upgrade  </div><div class="line">svn: E155019: Can't upgrade '/Users/lijie/Documents/merchat_app/zcht/zcht' as it is not a pre-1.7 working copy root, the root is '/Users/lijie/Documents/merchat_app'  </div><div class="line">……  </div><div class="line">localhost:merchat_app lijie$ svn upgrade  </div><div class="line">Upgraded '.'</div></pre></td></tr></table></figure>
<h5 id="12-android-studio-gradle-引入三方时，failed-to-resolve"><a href="#12-android-studio-gradle-引入三方时，failed-to-resolve" class="headerlink" title="12.android studio  gradle 引入三方时，failed to resolve"></a>12.android studio  gradle 引入三方时，failed to resolve</h5><p>在project级别的 build.gradle 下 buildscript 中加入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">     </div><div class="line">    allprojects &#123;</div><div class="line">        repositories &#123;</div><div class="line">            jcenter()</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Mac下反编译apk及手动命令apk签名]]></title>
      <url>http://yoursite.com/2016/11/14/Mac%E4%B8%8B%E5%8F%8D%E7%BC%96%E8%AF%91apk%E5%8F%8A%E6%89%8B%E5%8A%A8%E5%91%BD%E4%BB%A4apk%E7%AD%BE%E5%90%8D/</url>
      <content type="html"><![CDATA[<p>在这里，反编译apk我们用的是apktool,介绍apktool的安装及使用。</p>
<h4 id="安装"><a href="#安装" class="headerlink" title="安装:"></a>安装:</h4><p>在github上有其下载地址及安装步骤：<br><a href="https://ibotpeaches.github.io/Apktool/install" target="_blank" rel="external">https://ibotpeaches.github.io/Apktool/install/</a><br><img src="http://7xl32g.com1.z0.glb.clouddn.com/apktool_0.png"><br>基本上按照上面6个步骤，就ok了。下面来一步一步介绍一下:</p>
<p><li>1、下载一个shell脚本，保存的名字就是”apktool”,不要带.sh后缀。可以复制到sublimetext，然后保存下。 </li></p>
<p><li>2、下载最新的apktool-2，在bitbucket上： </li></p>
<p><li>3、将所下载的jar文件改名为”apktool.jar” </li></p>
<p><li>4、将shell脚本”apktool”和”apktool.jar”放到 “/usr/local/bin”目录下 </li></p>
<p><li>5、增加这两个文件可执行权限，chmod a+x file </li></p>
<p><li>6、执行shell apktool就ok了。<br>安装完毕后可以运行apktool -v查看版本信息：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">➜  ~ apktool -v</div><div class="line">Apktool v2.2.1 - a tool <span class="keyword">for</span> reengineering Android apk files</div><div class="line">with smali v2.1.3 and baksmali v2.1.3</div><div class="line">Copyright <span class="number">2014</span> Ryszard Wiśniewski &lt;brut.alll<span class="meta">@gmail</span>.com&gt;</div><div class="line">Updated by Connor Tumbleson &lt;connor.tumbleson<span class="meta">@gmail</span>.com&gt;</div><div class="line"></div><div class="line">usage: apktool</div><div class="line"> -advance,--advanced   prints advance information.</div><div class="line"> -version,--version    prints the version then exits</div><div class="line">usage: apktool <span class="keyword">if</span>|install-framework [options] &lt;framework.apk&gt;</div><div class="line"> -p,--frame-path &lt;dir&gt;   Stores framework files into &lt;dir&gt;.</div><div class="line"> -t,--tag &lt;tag&gt;          Tag frameworks using &lt;tag&gt;.</div><div class="line">usage: apktool d[ecode] [options] &lt;file_apk&gt;</div><div class="line"> -f,--force              Force delete destination directory.</div><div class="line"> -o,--output &lt;dir&gt;       The name of folder that gets written. Default is apk.out</div><div class="line"> -p,--frame-path &lt;dir&gt;   Uses framework files located in &lt;dir&gt;.</div><div class="line"> -r,--no-res             Do not decode resources.</div><div class="line"> -s,--no-src             Do not decode sources.</div><div class="line"> -t,--frame-tag &lt;tag&gt;    Uses framework files tagged by &lt;tag&gt;.</div><div class="line">usage: apktool b[uild] [options] &lt;app_path&gt;</div><div class="line"> -f,--force-all          Skip changes detection and build all files.</div><div class="line"> -o,--output &lt;dir&gt;       The name of apk that gets written. Default is dist/name.apk</div><div class="line"> -p,--frame-path &lt;dir&gt;   Uses framework files located in &lt;dir&gt;.</div><div class="line"></div><div class="line">For additional info, see: http:<span class="comment">//ibotpeaches.github.io/Apktool/</span></div><div class="line">For smali/baksmali info, see: https:<span class="comment">//github.com/JesusFreke/smali</span></div></pre></td></tr></table></figure>
<h4 id="反编译apk"><a href="#反编译apk" class="headerlink" title="反编译apk"></a>反编译apk</h4><p>新建个apk文件夹，将待破译的apk放进去，之后进到这个目录运行命令: apktool d ZBLibraryDemoApp.apk</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  Documents cd apk_tool</div><div class="line">➜  apk_tool apktool d ZBLibraryDemoApp.apk</div><div class="line">I: Using Apktool <span class="number">2.2</span>.1 on ZBLibraryDemoApp.apk</div><div class="line">I: Loading resource table...</div><div class="line">I: Decoding AndroidManifest.xml with resources...</div><div class="line">I: Loading resource table from file: /Users/jiayongkai/Library/apktool/framework/<span class="number">1</span>.apk</div><div class="line">I: Regular manifest <span class="keyword">package</span>...</div><div class="line">I: Decoding file-resources...</div><div class="line">I: Decoding values *<span class="comment">/* XMLs...</span></div><div class="line">I: Baksmaling classes.dex...</div><div class="line">I: Copying assets and libs...</div><div class="line">I: Copying unknown files...</div><div class="line">I: Copying original files...</div></pre></td></tr></table></figure>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/apktool_1.png"><br>之后再运行命令回编译apk：<br>apktool b ZBLibraryDemoApp (ZBLibraryDemoApp 就是反编译出来的文件夹)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">➜  apk_tool apktool b ZBLibraryDemoApp</div><div class="line">I: Using Apktool <span class="number">2.2</span>.1</div><div class="line">I: Checking whether sources has changed...</div><div class="line">I: Smaling smali folder into classes.dex...</div><div class="line">I: Checking whether resources has changed...</div><div class="line">I: Building resources...</div><div class="line">I: Building apk file...</div><div class="line">I: Copying unknown files/dir...</div></pre></td></tr></table></figure>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/apktool_2.png"><br>上面的build和dist就是回编译apk过程中生成的东西，编译出来的apk在dist目录下，打开build/apk文件夹会发现少了original文件夹下的META-INF文件夹：<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/apktool_3.png"></p>
<p>也就意味着dist里的apk文件是没有签名的</p>
<h4 id="手动给apk签名"><a href="#手动给apk签名" class="headerlink" title="手动给apk签名"></a>手动给apk签名</h4><p>回编译后的apk是安装不成功的，总是提示<br>Failure [INSTALL_PARSE_FAILED_UNEXPECTED_EXCEPTION]<br>实质是没签名。 </p>
<p><li>生成签名：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">➜  apk_tool keytool -genkey -keystore lala.keystore -keyalg RSA -validity <span class="number">10000</span> -alias yaowoa</div><div class="line">输入密钥库口令:</div><div class="line">再次输入新口令:</div><div class="line">您的名字与姓氏是什么?</div><div class="line">您的组织单位名称是什么?</div><div class="line">您的组织名称是什么?</div><div class="line">您所在的城市或区域名称是什么?</div><div class="line">您所在的省/市/自治区名称是什么?</div><div class="line">该单位的双字母国家/地区代码是什么?</div><div class="line"> N=Unknown, OU=Unknown, O=Unknown, L=Unknown, ST=Unknown, C=Unknown是否正确?</div><div class="line">  [否]:  y</div><div class="line"></div><div class="line">输入 &lt;yaowoa&gt; 的密钥口令</div><div class="line">	(如果和密钥库口令相同, 按回车):</div><div class="line">再次输入新口令:</div></pre></td></tr></table></figure>
<p>注意：上面-keystore后面跟的是签名文件的名字，而-alias是别名，一般情况下-keystore后面跟-alias是一样的，但其实两者没有关系，这也是我故意搞成不一样的原因。 </p>
<p><li>为apk增加签名：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jarsigner -verbose -keystore 签名文件 -signedjar 生成的apk -digestalg SHA1 -sigalg MD5withRSA 要签名的apk  签名文件的alias</div></pre></td></tr></table></figure>
<p>输入的是密码</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  apk_tool jarsigner -verbose -keystore lala.keystore -signedjar signer.apk -digestalg SHA1 -sigalg MD5withRSA ZBLibraryDemoApp/dist/ZBLibraryDemoApp.apk lala</div><div class="line">输入密钥库的密码短语:</div><div class="line">......</div><div class="line">jar 已签名。</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义View流式布局自动换行]]></title>
      <url>http://yoursite.com/2016/10/13/%E8%87%AA%E5%AE%9A%E4%B9%89View%E6%B5%81%E5%BC%8F%E5%B8%83%E5%B1%80%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C/</url>
      <content type="html"><![CDATA[<h3 id="思维导图"><a href="#思维导图" class="headerlink" title="思维导图"></a>思维导图</h3><p><img src="http://ac-myg6wstv.clouddn.com/350bf29922554144acaa"></p>
<h3 id="一、流式布局的实现"><a href="#一、流式布局的实现" class="headerlink" title="一、流式布局的实现"></a>一、流式布局的实现</h3><p>实现原理：采用面向对象思想将整个布局分为很多行的对象，每个行对象管理自己行内的孩子，这里通过集合来管理。</p>
<h4 id="1-内部类Line的实现"><a href="#1-内部类Line的实现" class="headerlink" title="1.内部类Line的实现"></a>1.内部类Line的实现</h4><h5 id="定义行的基本属性"><a href="#定义行的基本属性" class="headerlink" title="定义行的基本属性"></a>定义行的基本属性</h5><p><li>List：管理行中的孩子</li></p>
<p><li>maxWidth：行的最大宽度</li></p>
<p><li>usedWidth：使用的宽度</li></p>
<p><li>height：行的高度</li></p>
<p><li>space：孩子之间的间距</li></p>
<p><li>构造初始化maxWidth和space</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="title">Line</span><span class="params">(<span class="keyword">int</span> maxWidth, <span class="keyword">int</span> horizontalSpace)</span> </span>&#123;</div><div class="line">     <span class="keyword">this</span>.maxWidth = maxWidth;</div><div class="line">     <span class="keyword">this</span>.space = horizontalSpace;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h5 id="addView-view-方法实现"><a href="#addView-view-方法实现" class="headerlink" title="addView(view)方法实现"></a>addView(view)方法实现</h5><p><li>往行的集合里添加View，更新行的使用宽度和高度</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * 往集合里添加孩子</div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      <span class="keyword">int</span> childWidth = view.getMeasuredWidth();</div><div class="line">      <span class="keyword">int</span> childHeight = view.getMeasuredHeight();</div><div class="line"></div><div class="line">      <span class="comment">// 更新行的使用宽度和高度</span></div><div class="line">      <span class="keyword">if</span> (views.size() == <span class="number">0</span>) &#123;</div><div class="line">          <span class="comment">// 集合里没有孩子的时候</span></div><div class="line">          <span class="keyword">if</span> (childWidth &gt; maxWidth) &#123;</div><div class="line">              usedWidth = maxWidth;</div><div class="line">              height = childHeight;</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              usedWidth = childWidth;</div><div class="line">              height = childHeight;</div><div class="line">          &#125;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          usedWidth += childWidth + space;</div><div class="line">          height = childHeight &gt; height ? childHeight : height;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 添加孩子到集合</span></div><div class="line">      views.add(view);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h5 id="canAddView-view-方法实现"><a href="#canAddView-view-方法实现" class="headerlink" title="canAddView(view)方法实现"></a>canAddView(view)方法实现</h5><p><li>判断是否能往行里添加孩子，如果孩子的宽度大于剩余宽度就不能</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">   * 判断当前的行是否能添加孩子</div><div class="line">   *</div><div class="line">   * <span class="doctag">@return</span></div><div class="line">   */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canAddView</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">      <span class="comment">// 集合里没有数据可以添加</span></div><div class="line">      <span class="keyword">if</span> (views.size() == <span class="number">0</span>) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 最后一个孩子的宽度大于剩余宽度就不添加</span></div><div class="line">      <span class="keyword">if</span> (view.getMeasuredWidth() &gt; (maxWidth - usedWidth - space)) &#123;</div><div class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">      &#125;</div><div class="line"></div><div class="line">      <span class="comment">// 默认可以添加</span></div><div class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h4 id="对容器进行测量onMeasure-的实现"><a href="#对容器进行测量onMeasure-的实现" class="headerlink" title="对容器进行测量onMeasure()的实现"></a>对容器进行测量onMeasure()的实现</h4><h5 id="获取宽度，计算maxWidth-构造传入Line"><a href="#获取宽度，计算maxWidth-构造传入Line" class="headerlink" title="获取宽度，计算maxWidth,构造传入Line"></a>获取宽度，计算maxWidth,构造传入Line</h5><p><li>总宽度减去左右边距就是行的最大宽度</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取总宽度</span></div><div class="line"><span class="keyword">int</span> width = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line"><span class="comment">// 计算最大的宽度</span></div><div class="line">mMaxWidth = width - getPaddingLeft() - getPaddingRight();</div></pre></td></tr></table></figure>
<h5 id="循环获取孩子进行测量"><a href="#循环获取孩子进行测量" class="headerlink" title="循环获取孩子进行测量"></a>循环获取孩子进行测量</h5><p><li>获取孩子总数，遍历获取每一个孩子，然后进行测量，测量完之后还需要将孩子添加到行集合里，然后将行添加到管理行的集合里</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ******************** 测量孩子 ********************</span></div><div class="line">  <span class="comment">// 遍历获取孩子</span></div><div class="line">  <span class="keyword">int</span> childCount = <span class="keyword">this</span>.getChildCount();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">      View childView = getChildAt(i);</div><div class="line">      <span class="comment">// 测量孩子</span></div><div class="line">      measureChild(childView, widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">      <span class="comment">// 测量完需要将孩子添加到管理行的孩子的集合中，将行添加到管理行的集合中</span></div><div class="line"></div><div class="line">      <span class="keyword">if</span> (mCurrentLine == <span class="keyword">null</span>) &#123;</div><div class="line">          <span class="comment">// 初次添加第一个孩子的时候</span></div><div class="line">          mCurrentLine = <span class="keyword">new</span> Line(mMaxWidth, HORIZONTAL_SPACE);</div><div class="line"></div><div class="line">          <span class="comment">// 添加孩子</span></div><div class="line">          mCurrentLine.addView(childView);</div><div class="line">          <span class="comment">// 添加行</span></div><div class="line">          mLines.add(mCurrentLine);</div><div class="line"></div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">          <span class="comment">// 行中有孩子的时候，判断时候能添加</span></div><div class="line">          <span class="keyword">if</span> (mCurrentLine.canAddView(childView)) &#123;</div><div class="line">              <span class="comment">// 继续往该行里添加</span></div><div class="line">              mCurrentLine.addView(childView);</div><div class="line">          &#125; <span class="keyword">else</span> &#123;</div><div class="line">              <span class="comment">//  添加到下一行</span></div><div class="line">              mCurrentLine = <span class="keyword">new</span> Line(mMaxWidth, HORIZONTAL_SPACE);</div><div class="line">              mCurrentLine.addView(childView);</div><div class="line">              mLines.add(mCurrentLine);</div><div class="line">          &#125;</div><div class="line">      &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h5 id="测量自己"><a href="#测量自己" class="headerlink" title="测量自己"></a>测量自己</h5><p><li>由于宽度肯定是填充整个屏幕，这里只需要处理行的高度，累加所有的行高和竖直边距算出高度</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ******************** 测量自己 *********************</span></div><div class="line">  <span class="comment">// 测量自己只需要计算高度，宽度肯定会被填充满的</span></div><div class="line">  <span class="keyword">int</span> height = getPaddingTop() + getPaddingBottom();</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mLines.size(); i++) &#123;</div><div class="line">      <span class="comment">// 所有行的高度</span></div><div class="line">      height += mLines.get(i).height;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 所有竖直的间距</span></div><div class="line">  height += (mLines.size() - <span class="number">1</span>) * VERTICAL_SPACE;</div><div class="line"></div><div class="line">  <span class="comment">// 测量</span></div><div class="line">  setMeasuredDimension(width, height);</div></pre></td></tr></table></figure>
<h4 id="指定孩子的显示位置（onLayout方法的实现）"><a href="#指定孩子的显示位置（onLayout方法的实现）" class="headerlink" title="指定孩子的显示位置（onLayout方法的实现）"></a>指定孩子的显示位置（onLayout方法的实现）</h4><p>实现思路：指定孩子的位置，孩子给了行管理，所以这里具体孩子的位置应该交给行去指定。容器只需要指定行的位置就可以。</p>
<p><li>遍历获取所有的行，让行去指定孩子的位置，指定行的高度</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">     <span class="comment">// 这里只负责高度的位置，具体的宽度和子孩子的位置让具体的行去管理</span></div><div class="line">     l = getPaddingLeft();</div><div class="line">     t = getPaddingTop();</div><div class="line">     <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mLines.size(); i++) &#123;</div><div class="line">         <span class="comment">// 获取行</span></div><div class="line">         Line line = mLines.get(i);</div><div class="line">         <span class="comment">// 管理</span></div><div class="line">         line.layout(t, l);</div><div class="line"></div><div class="line">         <span class="comment">// 更新高度</span></div><div class="line">         t += line.height;</div><div class="line">         <span class="keyword">if</span> (i != mLines.size() - <span class="number">1</span>) &#123;</div><div class="line">             <span class="comment">// 不是最后一条就添加间距</span></div><div class="line">             t += VERTICAL_SPACE;</div><div class="line">         &#125;</div><div class="line">     &#125;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="Line中layout方法的实现（指定孩子的位置）"><a href="#Line中layout方法的实现（指定孩子的位置）" class="headerlink" title="Line中layout方法的实现（指定孩子的位置）"></a>Line中layout方法的实现（指定孩子的位置）</h4><p><li>遍历获取每一个孩子，获取孩子的宽度和高度，计算上下左右的大小，指定孩子的位置，之后还需要更新孩子左边的大小</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 循环指定孩子位置</span></div><div class="line"> <span class="keyword">for</span> (View view : views) &#123;</div><div class="line">     <span class="comment">// 获取宽高</span></div><div class="line">     <span class="keyword">int</span> measuredWidth = view.getMeasuredWidth();</div><div class="line">     <span class="keyword">int</span> measuredHeight = view.getMeasuredHeight();</div><div class="line">     <span class="comment">// 重新测量</span></div><div class="line">     view.measure(MeasureSpec.makeMeasureSpec(measuredWidth + avg, MeasureSpec.EXACTLY),</div><div class="line">             MeasureSpec.makeMeasureSpec(measuredHeight, MeasureSpec.EXACTLY));</div><div class="line">     <span class="comment">// 重新获取宽度值</span></div><div class="line">     measuredWidth = view.getMeasuredWidth();</div><div class="line"></div><div class="line">     <span class="keyword">int</span> top = t;</div><div class="line">     <span class="keyword">int</span> left = l;</div><div class="line">     <span class="keyword">int</span> right = measuredWidth + left;</div><div class="line">     <span class="keyword">int</span> bottom = measuredHeight + top;</div><div class="line">     <span class="comment">// 指定位置</span></div><div class="line">     view.layout(left, top, right, bottom);</div><div class="line"></div><div class="line">     <span class="comment">// 更新数据</span></div><div class="line">     l += measuredWidth + space;</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<h4 id="细节处理"><a href="#细节处理" class="headerlink" title="细节处理"></a>细节处理</h4><p><li>第一次测量之后，行管理器中就有了行的对象，之后每次测量都会去创建下一行，这样就会出现很多空行出来，所以需要在测量之前将集合清空。</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mLines.clear();</div><div class="line">mCurrentLine = <span class="keyword">null</span>;</div></pre></td></tr></table></figure>
<p><li>每一行的最后一个孩子放不下就放到下一行，这样每一行就都会有空格，这里将这些空格平分给行里的每一个孩子，重新指定其宽度。</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 平分剩下的空间</span></div><div class="line"><span class="keyword">int</span> avg = (maxWidth - usedWidth) / views.size();</div><div class="line"></div><div class="line"><span class="comment">// 重新测量</span></div><div class="line">view.measure(MeasureSpec.makeMeasureSpec(measuredWidth + avg, MeasureSpec.EXACTLY),</div><div class="line">        MeasureSpec.makeMeasureSpec(measuredHeight, MeasureSpec.EXACTLY));</div><div class="line"><span class="comment">// 重新获取宽度值</span></div><div class="line">measuredWidth = view.getMeasuredWidth();</div></pre></td></tr></table></figure>
<p>####使用自定义属性，将水平间距和竖直间距做成属性，在布局中指定，增强扩展性</p>
<p><li>attrs文件指定属性名</li></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name="FlowLayout"&gt;</div><div class="line">      &lt;attr name="width_space" format="dimension"/&gt;</div><div class="line">      &lt;attr name="height_space" format="dimension"/&gt;</div><div class="line"> &lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>
<p><li>构造中获取属性</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 获取自定义属性</span></div><div class="line">  TypedArray array = context.obtainStyledAttributes(attrs, R.styleable.FlowLayout);</div><div class="line">  horizontal_space = array.getDimension(R.styleable.FlowLayout_width_space,<span class="number">0</span>);</div><div class="line">  vertical_space =  array.getDimension(R.styleable.FlowLayout_height_space,<span class="number">0</span>);</div><div class="line">  array.recycle();</div></pre></td></tr></table></figure>
<p><li>布局中使用属性</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app:width_space=<span class="string">"10dp"</span></div><div class="line">app:height_space=<span class="string">"10dp"</span></div></pre></td></tr></table></figure>
<h3 id="二、流式布局的使用"><a href="#二、流式布局的使用" class="headerlink" title="二、流式布局的使用"></a>二、流式布局的使用</h3><p><li>布局中申明</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;com.beijing.jiayongkai.flowlibrary.widget.FLowLayout</div><div class="line">        android:id=<span class="string">"@+id/flowlayout"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:padding=<span class="string">"5dp"</span></div><div class="line">        app:height_space=<span class="string">"10dp"</span></div><div class="line">        app:width_space=<span class="string">"10dp"</span>/&gt;</div></pre></td></tr></table></figure>
<p><li>代码中使用:其实就是循环遍历数据的长度，不断的创建TextView，然后设置TextView的属性和背景，包括五彩背景等，最后将TextView添加到FlowLayout中就可以。</li></p>
<h3 id="三、FlowLayout完整的代码"><a href="#三、FlowLayout完整的代码" class="headerlink" title="三、FlowLayout完整的代码"></a>三、FlowLayout完整的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.beijing.jiayongkai.flowlibrary.widget;</div><div class="line"></div><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.content.res.TypedArray;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.view.View;</div><div class="line"><span class="keyword">import</span> android.view.ViewGroup;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.beijing.jiayongkai.flowlibrary.R;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.util.ArrayList;</div><div class="line"><span class="keyword">import</span> java.util.List;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 自动换行</div><div class="line"> * Created by jiayongkai on 16/10/12.</div><div class="line"> */</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FLowLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//存储行的集合,管理行</span></div><div class="line">    <span class="keyword">private</span> List&lt;Line&gt; mLines=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="comment">//水平和竖直的间距</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> verticl_space;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">float</span> horizontal_space;</div><div class="line"></div><div class="line">    <span class="comment">//当前行的指针</span></div><div class="line">    <span class="keyword">private</span> Line mCurrentLine;</div><div class="line"></div><div class="line">    <span class="comment">//行的最大宽度,出去边距的宽度</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mMaxWidht;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FLowLayout</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FLowLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line"></div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.FLowLayout);</div><div class="line">        horizontal_space=typedArray.getDimension(R.styleable.FLowLayout_width_space,<span class="number">0</span>);</div><div class="line">        verticl_space=typedArray.getDimension(R.styleable.FLowLayout_height_space,<span class="number">0</span>);</div><div class="line">        typedArray.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FLowLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//每次测量之前都先清空集合,不然会覆盖掉以前</span></div><div class="line">        mLines.clear();</div><div class="line">        mCurrentLine = <span class="keyword">null</span>;</div><div class="line"></div><div class="line">        <span class="comment">//获取总宽度</span></div><div class="line">        <span class="keyword">int</span> width = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        <span class="comment">//计算最大宽度</span></div><div class="line">        mMaxWidht=width-getPaddingLeft()-getPaddingRight();</div><div class="line"></div><div class="line">        <span class="comment">//****************测量孩子*************</span></div><div class="line">        <span class="comment">//遍历获取孩子</span></div><div class="line">        <span class="keyword">int</span> childCount = getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            View childView = getChildAt(i);</div><div class="line">            <span class="comment">//测量孩子</span></div><div class="line">            measureChild(childView,widthMeasureSpec,heightMeasureSpec);</div><div class="line"></div><div class="line">            <span class="comment">//测量完孩子要讲孩子添加到管理行的孩子的集合中,将行添加到管理行的集合中</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (mCurrentLine == <span class="keyword">null</span>)&#123;</div><div class="line">                <span class="comment">//初次添加第一个孩子的时候</span></div><div class="line">                mCurrentLine=<span class="keyword">new</span> Line(mMaxWidht,horizontal_space);</div><div class="line">                <span class="comment">//添加孩子</span></div><div class="line">                mCurrentLine.addView(childView);</div><div class="line">                <span class="comment">//添加行</span></div><div class="line">                mLines.add(mCurrentLine);</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                <span class="comment">//行中有孩子的时候,判断能否添加</span></div><div class="line">                <span class="keyword">if</span> (mCurrentLine.canAddView(childView))&#123;</div><div class="line">                    mCurrentLine.addView(childView);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    <span class="comment">//添加到下一行</span></div><div class="line">                    mCurrentLine=<span class="keyword">new</span> Line(mMaxWidht,horizontal_space);</div><div class="line">                    mCurrentLine.addView(childView);</div><div class="line">                    mLines.add(mCurrentLine);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//****************测量自己***********</span></div><div class="line">        <span class="comment">//测量自己只需要计算高度,宽度肯定会被填满的</span></div><div class="line">        <span class="keyword">int</span> height = getPaddingTop() + getPaddingBottom();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mLines.size(); i++) &#123;</div><div class="line">            height+=mLines.get(i).height;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//所有竖直的间距</span></div><div class="line">        height+=(mLines.size() -<span class="number">1</span>)*verticl_space;</div><div class="line"></div><div class="line">        <span class="comment">//测量</span></div><div class="line">        setMeasuredDimension(width,height);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> bool, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="comment">//这里只负责高度的位置,具体的宽度和子孩子的位置让具体的行处理</span></div><div class="line">        l=getPaddingLeft();</div><div class="line">        t=getPaddingTop();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mLines.size(); i++) &#123;</div><div class="line">            <span class="comment">//获取行</span></div><div class="line">            Line line = mLines.get(i);</div><div class="line">            <span class="comment">//管理</span></div><div class="line">            line.layout(t,l);</div><div class="line"></div><div class="line">            <span class="comment">//更新高度</span></div><div class="line">            t+=line.height;</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (i != mLines.size() -<span class="number">1</span>)&#123;</div><div class="line">                <span class="comment">//不是最后一行就添加间距</span></div><div class="line">                t+=verticl_space;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 内部类  行管理器,管理每一行的孩子</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Line</span></span>&#123;</div><div class="line">        <span class="comment">//定义一个行的集合来存放子view</span></div><div class="line">        <span class="keyword">private</span> List&lt;View&gt; views=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        <span class="comment">//行的最大宽度</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> maxWidth;</div><div class="line">        <span class="comment">//行中已经使用的宽度</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> usedWidth;</div><div class="line">        <span class="comment">//行的高度</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">int</span> height;</div><div class="line">        <span class="comment">//孩子之间的距离</span></div><div class="line">        <span class="keyword">private</span> <span class="keyword">float</span> space;</div><div class="line">        <span class="comment">//通过构造初始化最大宽度和边距</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">Line</span><span class="params">(<span class="keyword">int</span> maxWidth,<span class="keyword">float</span> horizontalSpace)</span></span>&#123;</div><div class="line">            <span class="keyword">this</span>.maxWidth=maxWidth;</div><div class="line">            <span class="keyword">this</span>.space=horizontalSpace;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 往集合里添加孩子</div><div class="line">         * <span class="doctag">@param</span> view</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addView</span><span class="params">(View view)</span></span>&#123;</div><div class="line">            <span class="keyword">int</span> childWidth = view.getMeasuredWidth();</div><div class="line">            <span class="keyword">int</span> childHeight = view.getMeasuredHeight();</div><div class="line"></div><div class="line">            <span class="comment">//更新行的使用宽度和高度</span></div><div class="line">            <span class="keyword">if</span> (views.size() == <span class="number">0</span>)&#123;</div><div class="line">                <span class="comment">//集合里没有孩子的时候</span></div><div class="line">                <span class="keyword">if</span> (childWidth &gt; maxWidth)&#123;</div><div class="line">                    usedWidth=maxWidth;</div><div class="line">                    height=childHeight;</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    usedWidth=childWidth;</div><div class="line">                    height=childHeight;</div><div class="line">                &#125;</div><div class="line">            &#125;<span class="keyword">else</span> &#123;</div><div class="line">                usedWidth+=childWidth+space;</div><div class="line">                height=childHeight&gt;height?childHeight:height;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            views.add(view);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 判断当前的行是否能添加孩子</div><div class="line">         * <span class="doctag">@param</span> view</div><div class="line">         * <span class="doctag">@return</span></div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canAddView</span><span class="params">(View view)</span></span>&#123;</div><div class="line">            <span class="comment">//集合里没有数据可以添加</span></div><div class="line">            <span class="keyword">if</span> (views.size() == <span class="number">0</span>)&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//最后一个孩子的宽度大于剩余宽度就不添加</span></div><div class="line">            <span class="keyword">if</span> (view.getMeasuredWidth() &gt; (maxWidth - usedWidth -space))&#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="comment">//默认可以添加</span></div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 指定孩子显示的位置</div><div class="line">         * <span class="doctag">@param</span> t</div><div class="line">         * <span class="doctag">@param</span> l</div><div class="line">         */</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">layout</span><span class="params">(<span class="keyword">int</span> t,<span class="keyword">int</span> l)</span></span>&#123;</div><div class="line">            <span class="comment">//平分剩下的空间</span></div><div class="line">           <span class="keyword">int</span> avg=(maxWidth -usedWidth)/views.size();</div><div class="line"></div><div class="line">            <span class="comment">//循环指定孩子位置</span></div><div class="line">            <span class="keyword">for</span>(View view :views)&#123;</div><div class="line">                <span class="comment">//获取宽高</span></div><div class="line">                <span class="keyword">int</span> measuredWidth = view.getMeasuredWidth();</div><div class="line">                <span class="keyword">int</span> measuredHeight = view.getMeasuredHeight();</div><div class="line">                <span class="comment">//重新测量</span></div><div class="line">                view.measure(MeasureSpec.makeMeasureSpec(measuredWidth+avg,MeasureSpec.EXACTLY),</div><div class="line">                        MeasureSpec.makeMeasureSpec(measuredHeight,MeasureSpec.EXACTLY));</div><div class="line">                <span class="comment">//重新获取宽度值</span></div><div class="line">                measuredWidth=view.getMeasuredWidth();</div><div class="line"></div><div class="line">                <span class="keyword">int</span> top= t;</div><div class="line">                <span class="keyword">int</span> left= l;</div><div class="line">                <span class="keyword">int</span> right = measuredWidth + l;</div><div class="line">                <span class="keyword">int</span> bottom = measuredHeight + t;</div><div class="line">                <span class="comment">//指定位置</span></div><div class="line">                view.layout(left,top,right,bottom);</div><div class="line"></div><div class="line">                <span class="comment">//更新数据</span></div><div class="line">                l+=measuredWidth+space;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Activity统一堆栈管理(实现随时finish特定或是所有Activty)]]></title>
      <url>http://yoursite.com/2016/09/28/Activity%E7%BB%9F%E4%B8%80%E5%A0%86%E6%A0%88%E7%AE%A1%E7%90%86-%E5%AE%9E%E7%8E%B0%E9%9A%8F%E6%97%B6finish%E7%89%B9%E5%AE%9A%E6%88%96%E6%98%AF%E6%89%80%E6%9C%89Activty/</url>
      <content type="html"><![CDATA[<p>原理:</p>
<p>写一个BaseActivity继承自Activity，然后在Oncreate方法里，把当前的Activity加到我们Activity管理容器里，然后在需要的时候，遍历这个容器，把所有Activity都finish掉。</p>
<p>Activity管理类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/** </span></div><div class="line"> * 应用程序Activity管理类：用于Activity管理和应用程序退出 </div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> jiayongkai </div><div class="line"> * <span class="doctag">@version</span> 1.0 </div><div class="line"> * <span class="doctag">@created</span> 2016-9-21 </div><div class="line"> */  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppManager</span> </span>&#123;  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stack&lt;Activity&gt; activityStack = <span class="keyword">new</span> Stack&lt;Activity&gt;();  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 添加Activity到堆栈 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span> </span>&#123;  </div><div class="line">        activityStack.push(activity);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 获取当前Activity（堆栈中最后一个压入的） </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Activity <span class="title">currentActivity</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> activityStack.lastElement();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 结束当前Activity（堆栈中最后一个压入的） </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishCurrentActivity</span><span class="params">()</span> </span>&#123;  </div><div class="line">        Activity activity = activityStack.pop();  </div><div class="line">        activity.finish();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 结束指定的Activity </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishActivity</span><span class="params">(Activity activity)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;  </div><div class="line">            activityStack.remove(activity);  </div><div class="line">            <span class="keyword">if</span>(!activity.isFinishing()) &#123;  </div><div class="line">                activity.finish();  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 结束指定类名的Activity </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishActivity</span><span class="params">(Class&lt;?&gt; cls)</span> </span>&#123;  </div><div class="line">        <span class="keyword">for</span> (Activity activity : activityStack) &#123;  </div><div class="line">            <span class="keyword">if</span> (activity.getClass().equals(cls)) &#123;  </div><div class="line">                finishActivity(activity);  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 结束所有Activity </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">finishAllActivity</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">for</span> (Activity activity : activityStack) &#123;  </div><div class="line">            <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;  </div><div class="line">                activity.finish();  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        activityStack.clear();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 退出应用程序 </div><div class="line">     */  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">AppExit</span><span class="params">(Context context)</span> </span>&#123;  </div><div class="line">        <span class="keyword">try</span> &#123;  </div><div class="line">            finishAllActivity();  </div><div class="line">            ActivityManager manager = (ActivityManager) context  </div><div class="line">                    .getSystemService(Context.ACTIVITY_SERVICE);  </div><div class="line">            manager.killBackgroundProcesses(context.getPackageName());  </div><div class="line">            System.exit(<span class="number">0</span>);  </div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </div><div class="line">            e.printStackTrace();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在BaseActivity里面添加打开的activity:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line"></div><div class="line">        AppManager.addActivity(<span class="keyword">this</span>);  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>只要自己的Activity继承BaseActity 就ok了，就能统一管理。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android程序崩溃异常收集处理]]></title>
      <url>http://yoursite.com/2016/09/28/Android%E7%A8%8B%E5%BA%8F%E5%B4%A9%E6%BA%83%E5%BC%82%E5%B8%B8%E6%94%B6%E9%9B%86%E5%A4%84%E7%90%86/</url>
      <content type="html"><![CDATA[<p>捕获全局异常，在程序崩溃之后，将异常信息保存到一个日志文件中，然后对该文件进行处理，比如发送到邮箱，或发送到服务器。</p>
<p>实现这一机制，需要两个类来辅助：</p>
<p><li>Application:用来管理应用程序的全局状态。</li></p>
<p><li>Thread.UncaughtExceptionHandler:线程未捕获异常处理器，用来处理未捕获异常。实现这个接口，重写uncaughtException()对异常进行自定义处理。</li></p>
<p>CrashHandler.java</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CrashHandler</span> <span class="keyword">implements</span> <span class="title">Thread</span>.<span class="title">UncaughtExceptionHandler</span> </span>&#123;</div><div class="line"></div><div class="line">     <span class="comment">/** Debug log tag */</span></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG=CrashHandler.class.getSimpleName();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否开启日志输出,在Debug状态下开启,在Release状态下关闭以提升性能</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">boolean</span> DEBUG=<span class="keyword">false</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 系统默认的UncaughtException处理类</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> Thread.UncaughtExceptionHandler mDefaultHandler;</div><div class="line"></div><div class="line">    <span class="comment">//CrashHandler 实例</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CrashHandler INSTANCE;</div><div class="line">    <span class="comment">//程序的Context对象</span></div><div class="line">    <span class="keyword">private</span> Context mContext;</div><div class="line"></div><div class="line">    <span class="comment">//用来存储设备信息和异常信息</span></div><div class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; mDeviceCrashInfo = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERSION_NAME =<span class="string">"versionName"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String VERSION_CODE =<span class="string">"versionCode"</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String STACK_TRACE =<span class="string">"stackTrace"</span>;</div><div class="line"></div><div class="line">    <span class="comment">//用于格式化日期,作为日志文件名的一部分</span></div><div class="line">    <span class="keyword">private</span> DateFormat formatter = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd-HH-mm-ss"</span>);</div><div class="line"></div><div class="line">    <span class="comment">//错误报告文件的扩展名</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CRASH_REPORTER_EXTENSION =<span class="string">".log"</span>;</div><div class="line"></div><div class="line">    <span class="comment">//单例 保证只有一个 CrashHandler实例</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">CrashHandler</span><span class="params">()</span></span>&#123;&#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CrashHandler <span class="title">getInstace</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">if</span> (INSTANCE == <span class="keyword">null</span>)&#123;</div><div class="line">            INSTANCE=<span class="keyword">new</span> CrashHandler();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> INSTANCE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化,注册Context对象</div><div class="line">     * 获取系统默认的UncaughtException处理器</div><div class="line">     * 设置该CrashHandler为程序的默认处理器</div><div class="line">     * <span class="doctag">@param</span> ctx</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context ctx)</span></span>&#123;</div><div class="line">        mContext=ctx;</div><div class="line">        mDefaultHandler=Thread.getDefaultUncaughtExceptionHandler();</div><div class="line">        Thread.setDefaultUncaughtExceptionHandler(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当UncaughtException发生时会转入该函数来处理</div><div class="line">     * <span class="doctag">@param</span> thread</div><div class="line">     * <span class="doctag">@param</span> throwable</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uncaughtException</span><span class="params">(Thread thread, Throwable throwable)</span> </span>&#123;</div><div class="line">         <span class="keyword">if</span> (!handleException(throwable) &amp;&amp; mDefaultHandler != <span class="keyword">null</span>)&#123;</div><div class="line">             <span class="comment">//如果用户没有处理则让系统默认的异常处理器处理</span></div><div class="line">             mDefaultHandler.uncaughtException(thread,throwable);</div><div class="line">         &#125;<span class="keyword">else</span>&#123;</div><div class="line">             <span class="comment">//Sleep一会后结束程序</span></div><div class="line">             <span class="keyword">try</span> &#123;</div><div class="line">                 Thread.sleep(<span class="number">3000</span>);</div><div class="line">             &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">                 e.printStackTrace();</div><div class="line">             &#125;</div><div class="line">             android.os.Process.killProcess(android.os.Process.myPid());</div><div class="line">             System.exit(<span class="number">0</span>);</div><div class="line">         &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">handleException</span><span class="params">(Throwable ex)</span></span>&#123;</div><div class="line">        <span class="keyword">if</span>(ex == <span class="keyword">null</span>)&#123;</div><div class="line">            Log.w(TAG,<span class="string">"handleException -- ex==null"</span>);</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> String msg=ex.getLocalizedMessage();</div><div class="line">        <span class="keyword">if</span> (msg == <span class="keyword">null</span>)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">new</span> Thread()&#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">                Looper.prepare();</div><div class="line">                Toast toast=Toast.makeText(mContext,<span class="string">"程序出错,即将退出:\r\n"</span>+msg,Toast.LENGTH_LONG);</div><div class="line">                toast.setGravity(Gravity.CENTER,<span class="number">0</span>,<span class="number">0</span>);</div><div class="line">                toast.show();</div><div class="line">                Looper.loop();</div><div class="line">            &#125;</div><div class="line">        &#125;.start();</div><div class="line"></div><div class="line">        <span class="comment">//收集设备信息</span></div><div class="line">         collectCrashDeviceInfo(mContext);</div><div class="line">        <span class="comment">//保存错误报告文件</span></div><div class="line">         saveCrashInfoToFile(ex);</div><div class="line">        <span class="comment">//发送报告到服务器</span></div><div class="line">        <span class="comment">//sendCrashReportsToServer(mContext);</span></div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在程序启动时候, 可以调用该函数来发送以前没有发送的报告</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendPreviousReportsToServer</span><span class="params">()</span> </span>&#123;</div><div class="line">        sendCrashReportsToServer(mContext);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 把错误报告发送给服务器,包含新产生的和以前没发送的.</div><div class="line">     * <span class="doctag">@param</span> ctx</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">sendCrashReportsToServer</span><span class="params">(Context ctx)</span> </span>&#123;</div><div class="line">        String[] crFiles = getCrashReportFiles(ctx);</div><div class="line">        <span class="keyword">if</span> (crFiles != <span class="keyword">null</span> &amp;&amp; crFiles.length &gt; <span class="number">0</span>) &#123;</div><div class="line">            TreeSet&lt;String&gt; sortedFiles = <span class="keyword">new</span> TreeSet&lt;String&gt;();</div><div class="line">            sortedFiles.addAll(Arrays.asList(crFiles));</div><div class="line">            <span class="keyword">for</span> (String fileName : sortedFiles) &#123;</div><div class="line">                File cr = <span class="keyword">new</span> File(ctx.getFilesDir(), fileName);</div><div class="line">                postReport(cr);</div><div class="line">                cr.delete();<span class="comment">// 删除已发送的报告</span></div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">postReport</span><span class="params">(File file)</span> </span>&#123;</div><div class="line">        <span class="comment">// TODO 发送错误报告到服务器</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 获取错误报告文件名</div><div class="line">     * <span class="doctag">@param</span> ctx</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> String[] getCrashReportFiles(Context ctx) &#123;</div><div class="line">        File filesDir = ctx.getFilesDir();</div><div class="line">        FilenameFilter filter = <span class="keyword">new</span> FilenameFilter() &#123;</div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">accept</span><span class="params">(File dir, String name)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> name.endsWith(CRASH_REPORTER_EXTENSION);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> filesDir.list(filter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 保存错误信息到文件中</div><div class="line">     * <span class="doctag">@param</span> ex</div><div class="line">     * <span class="doctag">@return</span></div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">saveCrashInfoToFile</span><span class="params">(Throwable ex)</span></span>&#123;</div><div class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</div><div class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : mDeviceCrashInfo.entrySet()) &#123;</div><div class="line">            String key = entry.getKey();</div><div class="line">            String value = entry.getValue();</div><div class="line">            sb.append(key + <span class="string">"="</span> + value + <span class="string">"\n"</span>);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        Writer writer = <span class="keyword">new</span> StringWriter();</div><div class="line">        PrintWriter printWriter = <span class="keyword">new</span> PrintWriter(writer);</div><div class="line">        ex.printStackTrace(printWriter);</div><div class="line">        Throwable cause = ex.getCause();</div><div class="line">        <span class="keyword">while</span> (cause != <span class="keyword">null</span>) &#123;</div><div class="line">            cause.printStackTrace(printWriter);</div><div class="line">            cause = cause.getCause();</div><div class="line">        &#125;</div><div class="line">        printWriter.close();</div><div class="line">        String result = writer.toString();</div><div class="line">        sb.append(result);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">long</span> timestamp = System.currentTimeMillis();</div><div class="line">            String time = formatter.format(<span class="keyword">new</span> Date());</div><div class="line">            String fileName = <span class="string">"crash-"</span> + time + <span class="string">"-"</span> + timestamp + CRASH_REPORTER_EXTENSION;</div><div class="line">            <span class="keyword">if</span> (Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) &#123;</div><div class="line">                String path = <span class="string">"/sdcard/crash/"</span>;</div><div class="line">                File dir = <span class="keyword">new</span> File(path);</div><div class="line">                <span class="keyword">if</span> (!dir.exists()) &#123;</div><div class="line">                    dir.mkdirs();</div><div class="line">                &#125;</div><div class="line">                FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(path + fileName);</div><div class="line">                fos.write(sb.toString().getBytes());</div><div class="line">                fos.close();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> fileName;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"an error occured while writing file..."</span>, e);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 收集程序崩溃的设备信息</div><div class="line">     * <span class="doctag">@param</span> ctx</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">collectCrashDeviceInfo</span><span class="params">(Context ctx)</span></span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            PackageManager pm = ctx.getPackageManager();</div><div class="line">            PackageInfo pi = pm.getPackageInfo(ctx.getPackageName(),PackageManager.GET_ACTIVITIES);</div><div class="line">            <span class="keyword">if</span> (pi != <span class="keyword">null</span>)&#123;</div><div class="line">                mDeviceCrashInfo.put(VERSION_NAME,pi.versionName == <span class="keyword">null</span> ? <span class="string">"not set"</span>:pi.versionName);</div><div class="line">                mDeviceCrashInfo.put(VERSION_CODE,<span class="string">""</span>+pi.versionCode);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            Log.e(TAG, <span class="string">"Error while collect package info"</span>, e);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//利用反射来收集设备信息,在Build类中包含各种设备信息</span></div><div class="line">        Field[] fields = Build.class.getDeclaredFields();</div><div class="line">        <span class="keyword">for</span> (Field field:fields) &#123;</div><div class="line">            <span class="keyword">try</span> &#123;</div><div class="line">                field.setAccessible(<span class="keyword">true</span>);</div><div class="line">                mDeviceCrashInfo.put(field.getName(),<span class="string">""</span>+field.get(<span class="keyword">null</span>));</div><div class="line">                <span class="keyword">if</span> (DEBUG)&#123;</div><div class="line">                    Log.d(TAG, field.getName() + <span class="string">" : "</span> + field.get(<span class="keyword">null</span>));</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</div><div class="line">                Log.e(TAG, <span class="string">"Error while collect crash info"</span>, e);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在Application 里进行初始化即可捕获全局异常。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseApplication</span> <span class="keyword">extends</span> <span class="title">Application</span></span>&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate();</div><div class="line">        CrashHandler crashHandler=CrashHandler.getInstace();</div><div class="line">        crashHandler.init(getApplicationContext());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就可以在sdcard/crash文件夹下看到异常文件，打开可以看到异常信息。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[RxJava入门]]></title>
      <url>http://yoursite.com/2016/09/20/RxJava%E5%85%A5%E9%97%A8/</url>
      <content type="html"><![CDATA[<p>学习资料:<a href="http://gank.io/post/560e15be2dca930e00da1083" target="_blank" rel="external">给Android开发者的RxJava详解</a></p>
<h3 id="RxJava是什么？"><a href="#RxJava是什么？" class="headerlink" title="RxJava是什么？"></a>RxJava是什么？</h3><p>本质上就是 ： <font style="color:blue">异步</font> 就是一个实现异步操作的库。</p>
<p>GitHub 上是这样说的 ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a library <span class="keyword">for</span> composing asynchronous and event-based programs using observable sequences <span class="keyword">for</span> the Java VM.</div></pre></td></tr></table></figure>
<p style="color:blue">一个在Java虚拟机上使用可观察的序列来组成异步的、基于时间的程序的库。</p>

<h3 id="RxJava的优势"><a href="#RxJava的优势" class="headerlink" title="RxJava的优势"></a>RxJava的优势</h3><p>逻辑上的简洁</p>
<h3 id="原理简述"><a href="#原理简述" class="headerlink" title="原理简述"></a>原理简述</h3><p>RxJava的异步实现，就是通过一种扩展的观察者模式实现的。</p>
<h4 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h4><p>观察者模式面向的需求是：A对象(观察者)对 B对象(被观察者)的某种变化高度敏感，需要在B变化的一瞬间做出反应。程序的观察者模式不需要时刻盯着被观察者，而是采用<b>注册</b>(Register)或者称为<b>订阅</b>(Subscribe)的方式，告诉被观察者：我需要你的某种状态，你要在它变化的时候通知我。</p>
<p>Android开发中一个比较典型的例子是点击监听器 onClickListener,对设置onClickListener来说，View是被观察者，onClickListener是观察者，二者通过 setOnclickListener()方法达成订阅关系。订阅之后，用户点击按钮的瞬间，Android Framework 就会将点击时间发送给已经注册的OnClickListener。</p>
<p>OnClickListener的模式大致如下图：</p>
<p>Button.setonClickListener(onClickListener);<br><img src="http://ww4.sinaimg.cn/mw1024/52eb2279jw1f2rx42h1wgj20fz03rglt.jpg"><br>如图所示，通过 setonClickListener()方法，Button持有OnClickListener的引用，当用户点击Button时，Button自动调用OnClickListener的onClick()方法。</p>
<p>抽象一下：</p>
<p>Button –&gt; 被观察者</p>
<p>OnClickListener   –&gt;观察者</p>
<p>setOnClickListener()  –&gt; 订阅</p>
<p>onClick()    –&gt;事件</p>
<p>就用专用的观察者模式转变撑了通用的观察者模式。<br><img src="http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4446ldj20ga03p74h.jpg"></p>
<p>而RxJava作为一个工具库，使用的就是通用形式的观察者模式。</p>
<h4 id="RxJava的观察者模式"><a href="#RxJava的观察者模式" class="headerlink" title="RxJava的观察者模式"></a>RxJava的观察者模式</h4><p>RxJava有四个基本概念：</p>
<p>Observable(被观察者)、Observer(观察者)、Subscribe(订阅)、事件。</p>
<p>Observable 和 Observer 通过subscribe() 实现订阅关系，从而 Observable可以在需要的时候发出时间来通知Observer。</p>
<p>与传统观察者模式不同，RxJava的时间回掉方法除了普通事件 onNext() 相当于onClick()/onEvent()之外，还定义了两个特殊的事件：onCompleted()和onError()。</p>
<p><li>onCompleted()：事件队列完结。RxJava不仅把每个时间单独处理，还会把它们看做一个队列。RxJava规定，当不会有新的onNext()发出时，需要触发onCompleted()方法作为标志。</li></p>
<p><li>onError():事件队列异常。在事件处理过程中出异常时，onError()会被触发，同时队列自动终止，不允许再有事件发出。</li></p>
<p><li>在一个正确运行的事件序列中，onCompleted()和onError()有且只有一个，并且是事件序列中的最后一个。需要注意的是，onCompleted()和onError()二者也是互斥的，即在队列中调用了其中一个，就不应该在调用另外一个了。</li></p>
<p>RxJava的观察者模式大致如下图:<br><img src="http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx46dspqj20gn04qaad.jpg"></p>
<h3 id="RxJava-API"><a href="#RxJava-API" class="headerlink" title="RxJava API"></a>RxJava API</h3><p>使用之前需要引入依赖：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'io.reactivex:rxandroid:1.0.1'</span></div><div class="line">compile <span class="string">'io.reactivex:rxjava:1.0.14'</span></div></pre></td></tr></table></figure>
<h4 id="一-创建Observer"><a href="#一-创建Observer" class="headerlink" title="一.创建Observer"></a>一.创建Observer</h4><p>Observer 即观察者，它决定事件触发的时候将有怎样的行为。RxJava中的Observer接口的实现方式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Observer&lt;T&gt; observer=<span class="keyword">new</span> Observer&lt;T&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T s)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;;</div></pre></td></tr></table></figure>
<p>除了 Observer接口之外，RxJava还内置了一个实现Observer的抽象类：Subscriber。Subscriber对Observer接口进行了一些扩展，但它们的基本使用方式完全一样：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Subscriber&lt;T&gt; subscriber=<span class="keyword">new</span> Subscriber&lt;T&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">                </div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(T o)</span> </span>&#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125; ;</div></pre></td></tr></table></figure>
<p>不仅基本使用方式一样，实质上，在RxJava的subscribe过程中，Observer也总是会先被转换成一个 Subscriber再使用。如果只使用基本功能，选择Observer和Subscriber是完全一样的。它们的区别对于使用者来说主要有两点:</p>
<p><li>1.onStart():这是Subscriber增加的方法。它会在subscribe刚开始，而事件还未发送之前被调用，可以用于做一些准备工作，例如数据的清零或重置。这是一个可选方法，默认情况下它的实现为空。需要注意的是，如果对准备工作的线程有要求（例如弹出一个显示进度的对话框，这必须在主线程执行），onStart()就不适用了，因为它总是在subscribe所发生的线程被调用，而不能指定线程。要在指定的线程来做准备工作，可以使用doOnSubscribe()方法。</li></p>
<p><li>unsubscribe():这是Subscriber所实现的另一个接口 Subscripation的方法，用于取消订阅。在这个方法被调用后，Subscriber将不在接收事件。一般在这个方法调用前，可以使用isUnsubscribed()先判断一下状态。 unsubscribe() 这个方法很重要，因为在 subscribe() 之后， Observable 会持有 Subscriber 的引用，这个引用如果不能及时被释放，将有内存泄露的风险。所以最好保持一个原则：要在不再使用的时候尽快在合适的地方（例如 onPause() onStop() 等方法中）调用 unsubscribe() 来解除引用关系，以避免内存泄露的发生。</li></p>
<h4 id="二、创建-Observable"><a href="#二、创建-Observable" class="headerlink" title="二、创建 Observable"></a>二、创建 Observable</h4><p>Observable 即被观察者，它决定什么时候触发谁看以及触发怎样的事件。RxJava 使用create()方法来创建一个Observable,并为它定义事件触发规则：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Observable&lt;Object&gt; observable = Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Object&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Object&gt; subscriber)</span> </span>&#123;</div><div class="line">                 subscriber.onNext(<span class="string">"hello"</span>);</div><div class="line">                 subscriber.onNext(<span class="string">"hello2"</span>);</div><div class="line">                 subscriber.onNext(<span class="string">"hello3"</span>);</div><div class="line">                 subscriber.onCompleted();</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<p>可以看到，这里传入了一个 OnSubscribe对象作为参数。OnSubscribe会被存储在返回的Observable对象中，它的作用相当于一个计划表，当Observable被订阅的时候，OnSubscribe 的 call()方法会自动被调用，事件序列就会依照设定依次触发。这样，由被观察者调用了观察者的回调方法，就实现了由被观察者向观察者的事件传递，即观察者模式。</p>
<p>create()方法是RxJava最基本的创建事件序列的方法。基于这个方法，RxJava还提供了一些方法来快捷创建事件队列，例如：</p>
<p><li>just(T…): 将传入的参数依次发送出来。</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable observable=Observable.just(<span class="string">"hello"</span>,<span class="string">"hello2"</span>,<span class="string">"hello3"</span>);</div><div class="line"><span class="comment">//将会依次调用：</span></div><div class="line"><span class="comment">// onNext("hello");</span></div><div class="line"><span class="comment">// onNext("hello2");</span></div><div class="line"><span class="comment">// onNext("Al hello3");</span></div><div class="line"><span class="comment">// onCompleted();</span></div></pre></td></tr></table></figure>
<p><li>from(T[])/from(Iterable&lt;? extends T&gt;):将传入的数组或Iterable拆分成具体对象后，依次发出来。</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> String[] words=&#123;<span class="string">"hello"</span>,<span class="string">"hello2"</span>,<span class="string">"hello3"</span>&#125;;</div><div class="line"> Observable observable=Observable.from(words);</div><div class="line"> <span class="comment">//将会依次调用：</span></div><div class="line"><span class="comment">// onNext("hello");</span></div><div class="line"><span class="comment">// onNext("hello2");</span></div><div class="line"><span class="comment">// onNext("Al hello3");</span></div><div class="line"><span class="comment">// onCompleted();</span></div></pre></td></tr></table></figure>
<p>上面just(T…)的例子和from(T[])的例子，都和之前的create(OnSubscribe)的例子是等价的。</p>
<h4 id="三、Subscribe-订阅"><a href="#三、Subscribe-订阅" class="headerlink" title="三、Subscribe(订阅)"></a>三、Subscribe(订阅)</h4><p>创建了Observable 和 Observer 之后，再用 subscribe() 方法将它们联结起来，整条链子就可以工作了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">observable.subscribe(observer);</div><div class="line"><span class="comment">// 或者：</span></div><div class="line">observable.subscribe(subscriber);</div></pre></td></tr></table></figure>
<p>Observable.subscribe(Subscriber)的内部实现是这样的（仅核心代码）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 注意：这不是 subscribe() 的源码，而是将源码中与性能、兼容性、扩展性有关的代码剔除后的核心代码。</span></div><div class="line"><span class="comment">// 如果需要看源码，可以去 RxJava 的 GitHub 仓库下载。</span></div><div class="line"><span class="function"><span class="keyword">public</span> Subscription <span class="title">subscribe</span><span class="params">(Subscriber subscriber)</span> </span>&#123;</div><div class="line">    subscriber.onStart();</div><div class="line">    onSubscribe.call(subscriber);</div><div class="line">    <span class="keyword">return</span> subscriber;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以看到，subscriber() 做了3件事：</p>
<p><ol></ol></p>
<p><li>调用 Subscriber.onStart() 。这个方法在前面已经介绍过，是一个可选的准备方法。</li></p>
<p><li>调用 Observable 中的 OnSubscribe.call(Subscriber) 。在这里，事件发送的逻辑开始运行。从这也可以看出，在 RxJava 中， Observable 并不是在创建的时候就立即开始发送事件，而是在它被订阅的时候，即当 subscribe() 方法执行的时候。</li></p>
<p><li>将传入的 Subscriber 作为 Subscription 返回。这是为了方便 unsubscribe().<br><br>除了 subscribe(Observer) 和 subscribe(Subscriber) ，subscribe() 还支持不完整定义的回调，RxJava 会自动根据定义创建出 Subscriber 。形式如下：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">Action1&lt;String&gt; onNextAction = <span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">    <span class="comment">// onNext()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">        Log.d(tag, s);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Action1&lt;Throwable&gt; onErrorAction = <span class="keyword">new</span> Action1&lt;Throwable&gt;() &#123;</div><div class="line">    <span class="comment">// onError()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Throwable throwable)</span> </span>&#123;</div><div class="line">        <span class="comment">// Error handling</span></div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line">Action0 onCompletedAction = <span class="keyword">new</span> Action0() &#123;</div><div class="line">    <span class="comment">// onCompleted()</span></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</div><div class="line">        Log.d(tag, <span class="string">"completed"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 来定义 onNext()</span></div><div class="line">observable.subscribe(onNextAction);</div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction 和 onErrorAction 来定义 onNext() 和 onError()</span></div><div class="line">observable.subscribe(onNextAction, onErrorAction);</div><div class="line"><span class="comment">// 自动创建 Subscriber ，并使用 onNextAction、 onErrorAction 和 onCompletedAction 来定义 onNext()、 onError() 和 onCompleted()</span></div><div class="line">observable.subscribe(onNextAction, onErrorAction, onCompletedAction);</div></pre></td></tr></table></figure>
<p>简单解释一下这段代码中出现的 Action1 和 Action0。 Action0 是 RxJava 的一个接口，它只有一个方法 call()，这个方法是无参无返回值的；由于 onCompleted() 方法也是无参无返回值的，因此 Action0 可以被当成一个包装对象，将 onCompleted() 的内容打包起来将自己作为一个参数传入 subscribe() 以实现不完整定义的回调。这样其实也可以看做将 onCompleted() 方法作为参数传进了 subscribe()，相当于其他某些语言中的『闭包』。 Action1 也是一个接口，它同样只有一个方法 call(T param)，这个方法也无返回值，但有一个参数；与 Action0 同理，由于 onNext(T obj) 和 onError(Throwable error) 也是单参数无返回值的，因此 Action1 可以将 onNext(obj) 和 onError(error) 打包起来传入 subscribe() 以实现不完整定义的回调。事实上，虽然 Action0 和 Action1 在 API 中使用最广泛，但 RxJava 是提供了多个 ActionX 形式的接口 (例如 Action2, Action3) 的，它们可以被用以包装不同的无返回值的方法。</p>
<h4 id="场景实例"><a href="#场景实例" class="headerlink" title="场景实例"></a>场景实例</h4><h5 id="a-打印字符串数组"><a href="#a-打印字符串数组" class="headerlink" title="a.打印字符串数组"></a>a.打印字符串数组</h5><p>将字符串数组names 中的所有字符串依次打印出来：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String[] names=&#123;<span class="string">"zhangsan"</span>,<span class="string">"lisi"</span>,<span class="string">"wangwu"</span>,<span class="string">"zhaoliu"</span>&#125;;</div><div class="line">      </div><div class="line">Observable.from(names).subscribe(<span class="keyword">new</span> Action1&lt;String&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(String s)</span> </span>&#123;</div><div class="line">                    Log.d(tag,s);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div></pre></td></tr></table></figure>
<h5 id="b-由id取得图片并显示"><a href="#b-由id取得图片并显示" class="headerlink" title="b.由id取得图片并显示"></a>b.由id取得图片并显示</h5><p>由指定的一个drawable文件id drawableRes 取的图片，并显示在ImageView中，并在出现异常的时候打印Toast报错：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span>[] drawableRes=&#123;&#125;;</div><div class="line">       ImageView imageView;</div><div class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showImg</span><span class="params">()</span></span>&#123;</div><div class="line">           Observable.create(<span class="keyword">new</span> Observable.OnSubscribe&lt;Drawable&gt;() &#123;</div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Drawable&gt; subscriber)</span> </span>&#123;</div><div class="line">                   Drawable drawable = getTheme().getDrawable(drawableRes);</div><div class="line">                   subscriber.onNext(drawable);</div><div class="line">                   subscriber.onCompleted();</div><div class="line">               &#125;</div><div class="line">           &#125;).subscribe(<span class="keyword">new</span> Subscriber&lt;Drawable&gt;() &#123;</div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">                   Toast.makeText(<span class="keyword">this</span>, <span class="string">"Error!"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">               &#125;</div><div class="line"></div><div class="line">               <span class="meta">@Override</span></div><div class="line">               <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">                   imageView.setImageDrawable(drawable);</div><div class="line"></div><div class="line">               &#125;</div><div class="line">           &#125;);</div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>正如上面两个例子这样，创建出 Observable 和 Subscriber ，再用 subscribe() 将它们串起来，一次 RxJava 的基本使用就完成了。非常简单。</p>
<p>然而，</p>
<p><img src="http://ww3.sinaimg.cn/mw1024/52eb2279jw1f2rx4ddcncj2046053gll.jpg"></p>
<p>在RxJava的默认规则中，事件的发出和消费都在同一个线程的。如果只用上面的方法，实现出来的知识一个同步的观察者模式。观察者模式本身的目的就是【后台处理，前台回调】的异步机制，因此异步对于RxJava是至关重要的。而要实现异步，则需要用到RxJava的另一个概念：<b>Scheduler</b></p>
<h3 id="线程控制-–Scheduler"><a href="#线程控制-–Scheduler" class="headerlink" title="线程控制 –Scheduler(-)"></a>线程控制 –Scheduler(-)</h3><p>在RxJava中，Scheduler–调度器，相当于线程控制器，RxJava通过它来指定每一段代码应该运行在什么线程。RxJava 已经内置了几个 Scheduler:</p>
<p><li>Schedulers.immediate():直接在当前线程运行，相当于不指定线程。这是默认的Scheduler。</li></p>
<p><li>Schedulers.newThread():总是启动新线程，并在新线程执行操作。</li></p>
<p><li>Schedulers.io():I/O操作（读写文件、读写数据库、网络信息交互等）所使用的Scheduler。行为模式和newThread()差不多，区别在于io()的内部实现是是用一个无数量上限的线程池，可以重用空闲的线程，因此多数情况下io()比newThread()更有效。不要把计算工作放在io()中，可以避免创建不必要的线程。</li></p>
<p><li>Schedulers.computation():计算所使用的Scheduler。这个计算指的是CPU密集型计算，即不会被I/O等操作限制性能的操作，例如图形的计算。这个Scheduler使用的固定的线程池，大小为CPU核数。不要把I/O操作放在computation()中，否则I/O操作的等待时间会浪费CPU。</li></p>
<p><li>另外，Android还有一个专用的AndroidSchedulers.mainThread(),它指定的操作将在Android主线程中运行。</li></p>
<p>有了这几个Scheduler,就可以使用subscribeOn() 和 observeOn()两个方法来对线程进行控制。 subscribeOn()指定subscribe()所发生的线程，即Observable.OnSubscribe被激活时所处的线程。或者叫做事件产生的线程。observeOn()指定Subscriber所运行在的线程。或者叫做事件消费的线程。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>).subscribeOn(Schedulers.io()).observeOn(AndroidSchedulers.mainThread()).subscribe(<span class="keyword">new</span> Action1&lt;Integer&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Integer integer)</span> </span>&#123;</div><div class="line">               Log.d(tag,integer);</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<p>上面这段代码中，由于subscribeOn(Schedulers.io)的指定，被创建的事件的内容1，2，3，4将会在IO线程发出，而由于observeOn(AndroidSechedulers.mainThread())的指定，因此subscriber数字的打印将发生在主线程。事实上，这种在 subscribe() 之前写上两句 subscribeOn(Scheduler.io()) 和 observeOn(AndroidSchedulers.mainThread()) 的使用方式非常常见，它适用于多数的 『后台线程取数据，主线程显示』的程序策略。</p>
<p>而前面提到的由图片 id 取得图片并显示的例子，如果也加上这两句：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> drawableRes = ...;</div><div class="line">ImageView imageView = ...;</div><div class="line">Observable.create(<span class="keyword">new</span> OnSubscribe&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Subscriber&lt;? <span class="keyword">super</span> Drawable&gt; subscriber)</span> </span>&#123;</div><div class="line">        Drawable drawable = getTheme().getDrawable(drawableRes));</div><div class="line">        subscriber.onNext(drawable);</div><div class="line">        subscriber.onCompleted();</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line">.subscribeOn(Schedulers.io()) <span class="comment">// 指定 subscribe() 发生在 IO 线程</span></div><div class="line">.observeOn(AndroidSchedulers.mainThread()) <span class="comment">// 指定 Subscriber 的回调发生在主线程</span></div><div class="line">.subscribe(<span class="keyword">new</span> Observer&lt;Drawable&gt;() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onNext</span><span class="params">(Drawable drawable)</span> </span>&#123;</div><div class="line">        imageView.setImageDrawable(drawable);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCompleted</span><span class="params">()</span> </span>&#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Throwable e)</span> </span>&#123;</div><div class="line">        Toast.makeText(activity, <span class="string">"Error!"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>那么，加载图片将会发生在 IO 线程，而设置图片则被设定在了主线程。这就意味着，即使加载图片耗费了几十甚至几百毫秒的时间，也不会造成丝毫界面的卡顿。</p>
<h4 id="变换（核心用法）"><a href="#变换（核心用法）" class="headerlink" title="变换（核心用法）"></a>变换（核心用法）</h4><p>所谓变换，就是将事件序列中的对象或整个序列进行加工处理，转换成不同</p>
<h5 id="map-：事件对象的直接变换"><a href="#map-：事件对象的直接变换" class="headerlink" title="map()：事件对象的直接变换"></a>map()：事件对象的直接变换</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Observable.just(<span class="string">"/image/haha.jpg"</span>).map(<span class="keyword">new</span> Func1&lt;String, Bitmap&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> Bitmap <span class="title">call</span><span class="params">(String path)</span> </span>&#123;</div><div class="line">                <span class="keyword">return</span> getBitmapFromPath(path);</div><div class="line">            &#125;</div><div class="line">        &#125;).subscribe(<span class="keyword">new</span> Action1&lt;Bitmap&gt;() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">(Bitmap bitmap)</span> </span>&#123;</div><div class="line">                showBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>这里出现了一个叫做 Func1的类。它和Action1非常相似，也是RxJava的一个接口，用于包装带参数的方法。Func1与Action的区别在于，Func1包装的是有返回值的方法。另外，和ActionX一样，FuncX 也有多个，用于不同参数个数的方法。FuncX 和 ActionX 的区别在 FuncX 包装的是有返回值的方法。</p>
<h5 id="flatMap"><a href="#flatMap" class="headerlink" title="flatMap()"></a>flatMap()</h5>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Git 初级教程]]></title>
      <url>http://yoursite.com/2016/09/19/Git-%E5%88%9D%E7%BA%A7%E6%95%99%E7%A8%8B/</url>
      <content type="html"><![CDATA[<p>本文全部内容均来自<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖学峰的官方Git教程</a>，我只是依葫芦画瓢学习了一遍做了个记录。</p>
<p>Git从零开始(初始化)学习(命令行)<br>首先新建一个版本库，即仓库(repository),这个目录里面的所有文件可以被Git管理。</p>
<h3 id="创建版本库"><a href="#创建版本库" class="headerlink" title="创建版本库"></a>创建版本库</h3><p>一、新建一个版本库,就是一个目录</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  mkdir learngit</div><div class="line">➜  cd learngit</div><div class="line">➜  pwd</div><div class="line">/Users/jiayongkai/Documents/learngit</div></pre></td></tr></table></figure>
<p>二、建完空文件夹，剩下的工作就是让他成为一个仓库，具有git的属性</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">Initialized empty Git repository in /Users/jiayongkai/Documents/learngit/.git/</div></pre></td></tr></table></figure>
<p>这样一个空的git版本库就建好了。</p>
<p>将文件添加到版本库</p>
<p>在learngit目录或子目录下 编写一个readme.txt，内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Git is a version control system.</div><div class="line">Git is free software.</div></pre></td></tr></table></figure>
<p>第一步，用命令 git add 告诉Git,把文件添加到仓库</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git add readme.txt</div></pre></td></tr></table></figure>
<p>第二步，用命令 Git commit 告诉Git,把文件提交到仓库</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m <span class="string">"wrote a readme file"</span></div></pre></td></tr></table></figure>
<p>-m后面输入的是本次提交的说明。</p>
<h5 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h5><p>初始化一个Git仓库,使用 git init 命令。</p>
<p>添加文件到git仓库，分两步：</p>
<p>第一步，使用命令 git add <file>,注意，可反复多次使用，添加多个文件。<br>第二步，使用命令 git commit -m “desc”,完成。</file></p>
<h3 id="时光机穿梭"><a href="#时光机穿梭" class="headerlink" title="时光机穿梭"></a>时光机穿梭</h3><p>我们已经成功添加并提交了一个readme.txt文件，我们修改readme.txt文件，改成内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Git is a distributed version control system.</div><div class="line">Git is free software.</div></pre></td></tr></table></figure>
<p>现在，运行 git status 命令看看结果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)</div><div class="line"></div><div class="line">	modified:   readme.<span class="function">txt</span></div><div class="line"></div><div class="line">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></div></pre></td></tr></table></figure>
<p>git status 命令可以让我们时刻掌握仓库当前的状态，上面的命令告诉我们readme.txt被修改过了，但还没有准备提交的修改内容。</p>
<p>我们可以用 git diff 命令查看被修改的内容</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git diff readme.txt</div><div class="line">diff --git a/readme.txt b/readme.txt</div><div class="line">index <span class="number">89680</span>d5..<span class="number">82e834</span>b <span class="number">100644</span></div><div class="line">--- a/readme.txt</div><div class="line">+++ b/readme.txt</div><div class="line">@@ -<span class="number">1</span>,<span class="number">2</span> +<span class="number">1</span>,<span class="number">2</span> @@</div><div class="line">-Git is a version control system.</div><div class="line">+Git is a distributed version control system.</div><div class="line"> Git is free softwore.</div></pre></td></tr></table></figure>
<p>知道了作了什么修改之后，，此时 需要按 Q 键退出 ，再提交</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git add readme.txt</div><div class="line">➜  learngit git:(master) ✗ git commit -m <span class="string">"add distributed"</span></div><div class="line">[master acf3e0a] add distributed</div><div class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</div></pre></td></tr></table></figure>
<p>提交之后，再用 git status 命令查看仓库的当前状态</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git status</div><div class="line">On branch master</div><div class="line">nothing to commit, working directory clean</div></pre></td></tr></table></figure>
<h5 id="小结：-1"><a href="#小结：-1" class="headerlink" title="小结："></a>小结：</h5><p>要随时掌握工作区的状态，使用 git status命令。</p>
<p>如果 git status 告诉你有文件 被修改过，使用 git diff可以查看修改内容。</p>
<h4 id="版本回退"><a href="#版本回退" class="headerlink" title="版本回退"></a>版本回退</h4><p>使用 git log 命令可以查看git commit 历史纪录</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git log</div><div class="line">commit d6a07e5c4043060548a387567b12171e4c46e54d</div><div class="line">Author: iosline &lt;<span class="number">949022813</span><span class="meta">@qq</span>.com&gt;</div><div class="line">Date:   Fri Sep <span class="number">2</span> <span class="number">11</span>:<span class="number">36</span>:<span class="number">41</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    update line two</div><div class="line"></div><div class="line">commit acf3e0ab1dd7aaca3c6259787353b7d736c2ee27</div><div class="line">Author: iosline &lt;<span class="number">949022813</span><span class="meta">@qq</span>.com&gt;</div><div class="line">Date:   Fri Sep <span class="number">2</span> <span class="number">11</span>:<span class="number">28</span>:<span class="number">12</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    add distributed</div><div class="line"></div><div class="line">commit <span class="number">5f</span>b0f7b2da69977cd9d4251729343b40cd28d4ec</div><div class="line">Author: iosline &lt;<span class="number">949022813</span><span class="meta">@qq</span>.com&gt;</div><div class="line">Date:   Fri Sep <span class="number">2</span> <span class="number">10</span>:<span class="number">28</span>:<span class="number">08</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    wrote a readme file</div></pre></td></tr></table></figure>
<p>如果嫌输出信息太多，可以加 –pretty=online参数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git log --pretty=oneline</div><div class="line">d6a07e5c4043060548a387567b12171e4c46e54d update line two</div><div class="line">acf3e0ab1dd7aaca3c6259787353b7d736c2ee27 add distributed</div><div class="line"><span class="number">5f</span>b0f7b2da69977cd9d4251729343b40cd28d4ec wrote a readme file</div></pre></td></tr></table></figure>
<p>一大串乱七八糟的字母数字 那是版本号，是SHA1计算出来的，用十六进制表示。</p>
<p>现在，我们要将readme.txt 回退到上一个版本</p>
<p>首先，Git必须知道当前版本是哪个版本，在Git中，用HEAD表示当前版本，上一个版本就是HEAD^,上上一个版本就是HEAD^^,当然往上100个版本写100个^比较容易数不过来，所以写成HEAD~100。</p>
<p>回退版本使用 git reset 命令：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git reset --hard HEAD^</div><div class="line">HEAD is now at acf3e0a add distributed</div></pre></td></tr></table></figure>
<p>这个时候 ，只能看到最早的两个版本，如果再想回到回退之前的版本，怎么办呢？</p>
<p>办法还是有的，只要上面的命令行串口没有关，顺着网上找，找到那个 update line two的comment id 是d6a07e5c，就能指定回到未来的某个版本：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git reset --hard d6a07e5c</div><div class="line">HEAD is now at d6a07e5 update line two</div></pre></td></tr></table></figure>
<p>果然，又回来最新的版本了。</p>
<p>因为Git在内部有个指向当前版本的HEAD指针，当你回退版本的时候，Git仅仅是把HEAD指向某个版本。</p>
<p>但是，你现在回退到之前的某个版本，关闭电脑之后，又想回到最新版，但是不知道最新版的comment id怎么办？？？？</p>
<p>Git 提供了一个命令 git reflog 用来记录你的每一次命令</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git reflog</div><div class="line">d6a07e5 HEAD@&#123;<span class="number">0</span>&#125;: reset: moving to d6a07e5c</div><div class="line">acf3e0a HEAD@&#123;<span class="number">1</span>&#125;: reset: moving to HEAD^</div><div class="line">d6a07e5 HEAD@&#123;<span class="number">2</span>&#125;: commit: update line two</div><div class="line">acf3e0a HEAD@&#123;<span class="number">3</span>&#125;: commit: add distributed</div><div class="line"><span class="number">5f</span>b0f7b HEAD@&#123;<span class="number">4</span>&#125;: commit (initial): wrote a readme file</div></pre></td></tr></table></figure>
<p>又可以想回到哪个版本，回到哪个版本了~~~</p>
<h5 id="小结：-2"><a href="#小结：-2" class="headerlink" title="小结："></a>小结：</h5><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令：git reset –hard comment id。</p>
<p>穿梭前，用 git log可以查看提交历史，以便确定要回退到哪个版本。</p>
<p>要重返未来，用 git reflog 查看命令历史，以便确定回到未来的哪个版本。</p>
<h4 id="工作区和暂存区"><a href="#工作区和暂存区" class="headerlink" title="工作区和暂存区"></a>工作区和暂存区</h4><p>git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念</p>
<p>工作区(Working Directory)</p>
<p>就是你编辑代码的地方。</p>
<p>版本库(Repository)</p>
<p>工作区有一个隐藏目录 .git ,这个不算工作区，是Git的版本库。</p>
<p>Git的版本库里存了很多东西，其中最重要的就是成为stage(或者index)的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD.<br><img src="http://www.liaoxuefeng.com/files/attachments/001384907702917346729e9afbf4127b6dfbae9207af016000/0"><br>我们将文件往版本库添加的时候，实际上是分两步执行的：<br>第一步，是用 git add命令添加，实际上是把文件添加到暂存区。<br>第二步，git commit 提交更改，实际上是将暂存区的所有内容提交到当前分支上。</p>
<p>因为我们创建版本库时，git自动为我们创建了唯一一个master主分支，所以git commit 就是往master分支上提交。</p>
<p>可以理解为需要提交的文件统统放到暂存区，然后一次性提交所有文件到版本库。</p>
<p>实践：</p>
<p>先对 readme.txt 进行修改，例如加上一句话：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Git is a distributed version control system.</div><div class="line">Git is free softwore distributed under the GPL.</div><div class="line">Git has a mutable index called stage.</div></pre></td></tr></table></figure>
<p>然后在工作区新增一个LICENSE文本文件(内容随便写)。</p>
<p>先用 git status 查看一下状态：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)</div><div class="line"></div><div class="line">	modified:   readme.txt</div><div class="line"></div><div class="line">Untracked files:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to include in what will be committed)</div><div class="line"></div><div class="line">	<span class="function">LICENSE</span></div><div class="line"></div><div class="line">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></div></pre></td></tr></table></figure>
<p>Git 非常清楚的告诉我们，readme.txt被修改了，LICENSE还从来没被添加过，所以状态是 Untracked.</p>
<p>现在,使用两次命令 git add ,把readme.txt 和LICENSE添加后，git status 看一下状态：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git add readme.txt</div><div class="line">➜  learngit git:(master) ✗ git add LICENSE</div><div class="line">➜  learngit git:(master) ✗ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">	<span class="keyword">new</span> file:   LICENSE</div><div class="line">	modified:   readme.txt</div></pre></td></tr></table></figure>
<p>现在，暂存区的状态就变成这样了：<br><img src="http://www.liaoxuefeng.com/files/attachments/001384907720458e56751df1c474485b697575073c40ae9000/0"><br>所以，git add 命令实际上就是把要提交的所有修改放到暂存区，然后执行 git commit 就可以一次性把暂存区的所有修改提交到分支。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git commit -m <span class="string">"understand how stage works"</span></div><div class="line">[master <span class="number">9749</span>d17] understand how stage works</div><div class="line"> <span class="number">2</span> files changed, <span class="number">11</span> insertions(+), <span class="number">1</span> deletion(-)</div><div class="line"> create mode <span class="number">100644</span> LICENSE</div></pre></td></tr></table></figure>
<p>一旦提交后，如果你又没有对工作区进行修改，那么工作区是干净的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git status</div><div class="line">On branch master</div><div class="line">nothing to commit, working directory clean</div></pre></td></tr></table></figure>
<p>现在版本库变成了这样，暂存区就没有内容了：</p>
<p><img src="http://www.liaoxuefeng.com/files/attachments/0013849077337835a877df2d26742b88dd7f56a6ace3ecf000/0"></p>
<h4 id="管理修改"><a href="#管理修改" class="headerlink" title="管理修改"></a>管理修改</h4><p>Git跟踪并管理的是修改，并不是文件。</p>
<p>实践：</p>
<p>第一步：我们对readme.txt 进行修改，修改如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ cat readme.txt</div><div class="line">Git is a distributed version control system.</div><div class="line">Git is free softwore distributed under the GPL.</div><div class="line">Git has a mutable index called stage.</div><div class="line">Git tracks changes.</div></pre></td></tr></table></figure>
<p>然后，添加：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git add readme.txt</div><div class="line">➜  learngit git:(master) ✗ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">	modified:   readme.txt</div></pre></td></tr></table></figure>
<p>然后，在修改readme.txt</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ cat readme.txt</div><div class="line">Git is a distributed version control system.</div><div class="line">Git is free softwore distributed under the GPL.</div><div class="line">Git has a mutable index called stage.</div><div class="line">Git tracks changes of files.</div></pre></td></tr></table></figure>
<p>提交：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git commit -m <span class="string">"git tracks changes"</span></div><div class="line">[master <span class="number">1f</span>2bfae] git tracks changes</div><div class="line"> <span class="number">1</span> file changed, <span class="number">2</span> insertions(+), <span class="number">1</span> deletion(-)</div></pre></td></tr></table></figure>
<p>然后，查看状态：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)</div><div class="line"></div><div class="line">	modified:   readme.<span class="function">txt</span></div><div class="line"></div><div class="line">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></div></pre></td></tr></table></figure>
<p>第二次的修改没有提交？</p>
<p>回顾一下操作过程：</p>
<p>第一次修改 -&gt; git add -&gt;第二次修改 -&gt;git commit</p>
<p>Git管理的是修改，当你用 git add命令后，在工作区的第一次修改放入暂存区，准备提交，但是，在工作区的第二次修改并没有放入暂存区，所以，git commit 只负责把暂存区的修改提交了，也就是第一次的修改被提交了，第二次的修改不会被提交。</p>
<p>提交后，用 git diff HEAD – readme.txt 命令可以查看工作区和版本库里面最新版本的区别：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git diff HEAD -- readme.txt</div><div class="line">diff --git a/readme.txt b/readme.txt</div><div class="line">index <span class="number">3</span>a624ba..ea27de3 <span class="number">100644</span></div><div class="line">--- a/readme.txt</div><div class="line">+++ b/readme.txt</div><div class="line">@@ -<span class="number">1</span>,<span class="number">4</span> +<span class="number">1</span>,<span class="number">4</span> @@</div><div class="line"> Git is a distributed version control system.</div><div class="line"> Git is free softwore distributed under the GPL.</div><div class="line"> Git has a mutable index called stage.</div><div class="line">-Git tracks changes.</div><div class="line">\ No newline at end of file</div><div class="line">+Git tracks changes of files.</div><div class="line">\ No newline at end of file</div></pre></td></tr></table></figure>
<p>可见。第二次修改确实没有被提交。</p>
<p>那怎么提交第二次修改呢？你可以继续 git add 再 git commit ,也可以别着急提交第一次修改，先git add 第二次修改，再 git commit 相当于把两次修改合并后一块提交了：</p>
<p>第一次修改 -&gt; 第二次修改 -&gt; git add -&gt; git commit</p>
<h5 id="小结：-3"><a href="#小结：-3" class="headerlink" title="小结："></a>小结：</h5><p>Git是跟踪修改的，每次修改，如果不 add到暂存区，就不会被加入到commit中。</p>
<h4 id="撤销修改"><a href="#撤销修改" class="headerlink" title="撤销修改"></a>撤销修改</h4><h5 id="一、撤销对工作区的修改"><a href="#一、撤销对工作区的修改" class="headerlink" title="一、撤销对工作区的修改"></a>一、撤销对工作区的修改</h5><p>假如你对readme.txt 进行了修改，修改如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ cat readme.txt</div><div class="line">Git is a distributed version control system.</div><div class="line">Git is free softwore distributed under the GPL.</div><div class="line">Git has a mutable index called stage.</div><div class="line">Git tracks changes of files.</div><div class="line">My stupid boos still prefers SVN.</div></pre></td></tr></table></figure>
<p>在提交之前，进行修改，你可以删掉最后一行，但是使用 git status查看一下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)</div><div class="line"></div><div class="line">	modified:   readme.<span class="function">txt</span></div><div class="line"></div><div class="line">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></div></pre></td></tr></table></figure>
<p>git告诉你，仍然发生了修改， git checkout – file可以丢弃工作区的修改。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -- readme.txt</div></pre></td></tr></table></figure>
<p>意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：<br>一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一样的状态。<br>一种是readme.txt已经添加到暂存区，又做了修改，现在，撤销修改就回到添加到暂存区后的状态。<br>总之，就是让这个文件回到最近一次 git commit 或 git add 的状态。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git checkout -- readme.txt</div><div class="line">➜  learngit git:(master) cat readme.txt</div><div class="line">Git is a distributed version control system.</div><div class="line">Git is free softwore distributed under the GPL.</div><div class="line">Git has a mutable index called stage.</div><div class="line">Git tracks changes.</div></pre></td></tr></table></figure>
<p>git checkout – file 命令中的 – 很重要，没有 – ，就变成了”切换到另一个分支”命令</p>
<h5 id="二、撤销暂存区的修改"><a href="#二、撤销暂存区的修改" class="headerlink" title="二、撤销暂存区的修改"></a>二、撤销暂存区的修改</h5><p>修改和上面一样的reademe.txt ，并且 git add 到了暂存区，在 commit之前撤销，这时 git status 查看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git add readme.txt</div><div class="line">➜  learngit git:(master) ✗ git status</div><div class="line">On branch master</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">	modified:   readme.txt</div></pre></td></tr></table></figure>
<p>这时，Git告诉我们 可以使用 git reset HEAD <file>撤销在暂存区的修改：</file></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git reset HEAD readme.txt</div><div class="line">Unstaged changes after reset:</div><div class="line">M	readme.txt</div></pre></td></tr></table></figure>
<p>git reset 命令既可以回退版本，也可以把暂存区的修改撤销掉(unstage),重现放回工作区：</p>
<p>再用 git status 查看一下，暂存区是干净的，工作区有修改，现在可以撤销对工作区的修改，就ok了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)</div><div class="line"></div><div class="line">	modified:   readme.<span class="function">txt</span></div><div class="line"></div><div class="line">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></div><div class="line">➜  learngit git:<span class="params">(master)</span> ✗ git checkout -- readme.txt</div><div class="line">➜  learngit git:<span class="params">(master)</span> git status</div><div class="line">On branch master</div><div class="line">nothing to commit, working directory clean</div><div class="line">➜  learngit git:<span class="params">(master)</span></div></pre></td></tr></table></figure>
<p>现在，假设将暂存区提交到了版本库，怎么办呢？其实可以版本回退 回退到上一个版本，不过是有条件的，那就是还没有将本地版本库推送到远程。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git reset --hard HEAD^</div><div class="line">HEAD is now at <span class="number">1f</span>2bfae git tracks changes</div></pre></td></tr></table></figure>
<p>查看版本库历史纪录：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git reflog</div><div class="line"><span class="number">1f</span>2bfae HEAD@&#123;<span class="number">0</span>&#125;: reset: moving to HEAD^</div><div class="line"><span class="number">803</span>a918 HEAD@&#123;<span class="number">1</span>&#125;: commit: stupid boss</div><div class="line"><span class="number">1f</span>2bfae HEAD@&#123;<span class="number">2</span>&#125;: commit: git tracks changes</div><div class="line"><span class="number">9749</span>d17 HEAD@&#123;<span class="number">3</span>&#125;: commit: understand how stage works</div><div class="line">d6a07e5 HEAD@&#123;<span class="number">4</span>&#125;: reset: moving to HEAD^</div><div class="line"><span class="number">858</span>d044 HEAD@&#123;<span class="number">5</span>&#125;: commit: add license</div><div class="line">d6a07e5 HEAD@&#123;<span class="number">6</span>&#125;: reset: moving to d6a07e5c</div><div class="line">acf3e0a HEAD@&#123;<span class="number">7</span>&#125;: reset: moving to HEAD^</div><div class="line">d6a07e5 HEAD@&#123;<span class="number">8</span>&#125;: commit: update line two</div><div class="line">acf3e0a HEAD@&#123;<span class="number">9</span>&#125;: commit: add distributed</div><div class="line"><span class="number">5f</span>b0f7b HEAD@&#123;<span class="number">10</span>&#125;: commit (initial): wrote a readme file</div></pre></td></tr></table></figure></p>
<h5 id="小结：-4"><a href="#小结：-4" class="headerlink" title="小结："></a>小结：</h5><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令 git checkout – file.</p>
<p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令 git reset HEAD file,就回到了场景1，第二步按场景1操作。</p>
<p>场景3：已经提交了不合适的修改到版本库时，想撤销本次提交，版本回退 git reset –hard HEAD^ , 不过前提是没有推送到远程库。</p>
<h4 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h4><p>在 Git中，删除也是一个修改操作，添加一个新文件 test.txt到Git并且commit.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git add test.txt</div><div class="line">➜  learngit git:(master) ✗ git commit -m <span class="string">"add test rm"</span></div><div class="line">[master caf26a7] add test rm</div><div class="line"> <span class="number">1</span> file changed, <span class="number">0</span> insertions(+), <span class="number">0</span> deletions(-)</div><div class="line"> create mode <span class="number">100644</span> test.txt</div></pre></td></tr></table></figure>
<p>一般情况下，通常直接在文件管理器中把没用的文件删了，或者用 rm 命令删了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) rm test.txt</div></pre></td></tr></table></figure>
<p>这个时候，Git知道你删除了文件，因此，工作区与版本库不一致了，git status 命令会告诉你哪些文件被删除了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git status</div><div class="line">On branch master</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add/rm &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)</div><div class="line"></div><div class="line">	deleted:    test.<span class="function">txt</span></div><div class="line"></div><div class="line">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></div></pre></td></tr></table></figure></p>
<p>现在你有两个选择，一是 确实要从版本库中删除文件，那就用命令 git rm 删掉，并且 git commit :</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) ✗ git rm test.txt</div><div class="line">rm <span class="string">'test.txt'</span></div><div class="line">➜  learngit git:(master) ✗ git commit -m <span class="string">"rm test"</span></div><div class="line">[master <span class="number">54f</span>1af3] rm test</div><div class="line"> <span class="number">1</span> file changed, <span class="number">0</span> insertions(+), <span class="number">0</span> deletions(-)</div><div class="line"> delete mode <span class="number">100644</span> test.txt</div></pre></td></tr></table></figure>
<p>现在，文件就从版本库中被删除了。</p>
<p>另一种情况就是删除了，工作区不小心将 test.txt 删除了，因为版本库里还有呢，所有可以轻松的将误删的文件恢复到最新版本：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -- test.txt</div></pre></td></tr></table></figure>
<p>git checkout 其实就是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以一键还原。</p>
<h3 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h3><p>Git是分布式版本控制系统，同一个Git仓库，可以分布在不同的机器上，任何一台机器的版本库其实都是一样的。</p>
<p>有现成的提供Git仓库托管服务的，国外的GitHub和国内的Coding(使用方法基本一致)。本地的Git仓库和GitHub之间的传输是通过SSH加密的。需要一点设置：<br>第一步：创建SSH Key。在用户主目录下，看看有没有.ssh目录，如果有，再看看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果已经有了，可以直接下一步。如果没有，打开命令行窗口，创建ssh key:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C <span class="string">"youremail@example.com"</span></div></pre></td></tr></table></figure>
<p>你需要把邮件地址换成你自己的邮件地址，一路回车，默认值即可。</p>
<p>一切顺利的话，可以在用户主目录里找到.ssh 目录，里面有 id_rsa 和 id_rsa.pub 两个文件，这两个就是SSH Key的密钥对，id_rsa是私钥，不能泄露，id_rsa.pub是公钥，没啥事。<br> 第二步：登录 GitHub ,打开 “Account Settings”,”SSH Keys”页面。<br>第三步：点”Add SSH Key”,填上任意 title，在key文本框里粘贴 id_rsa.pub 文件的内容。</p>
<p>为什么GitHub 需要SSH Key呢？因为GitHub需要识别出你推送的提交确实是你推送的，而不是别人。而Git支持SSH协议，所以，GitHub只要知道了你的公钥，就可以确认只有你自己才能推送。</p>
<p>push代码 有两种方式：HTTPS SSH<br>前者每次需要输入用户名 密码。<br>使用SSH Key 是为了 push 代码的时候，使用 SSH 方式访问仓库，就不用每次输入 GitHub 和 Coding 的用户名 密码.</p>
<h4 id="添加远程库"><a href="#添加远程库" class="headerlink" title="添加远程库"></a>添加远程库</h4><p>登录GitHub,然后右上角，”Create a new repo”,创建一个新的仓库：</p>
<p>在Respository name填入 仓库名 learngit,其他保持默认，点击 “Create repository”按钮，就成功地创建了一个新的Git仓库：</p>
<p>目前，GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库。也可以把一个本地仓库与之关联，然后把本地仓库的内容推送到GitHub仓库。</p>
<p>根据GitHub的提示，在本地的learngit仓库目录下运行命令：</p>
<p>这里演示的是Coding，是完全一样的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  Documents cd learngit</div><div class="line">➜  learngit git:(master) git remote add origin git<span class="meta">@git</span>.coding.net:iosline/learngit.git</div></pre></td></tr></table></figure>
<p>添加后，远程库的名字就是origin,这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p>
<p>下一步，就是把本地库的所有内容推送到远程库上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  learngit git:(master) git push -u origin master</div></pre></td></tr></table></figure>
<p>把本地库的内容推送到远程，用git push 命令，实际上是吧当前分支master推送到远程。</p>
<p>由于远程库是空的，我们第一次推送master分支时，加上了 -u 参数，Git不但会把本地的master分支内容推送到远程master分支，并且将两者关联起来，之后的推送和拉取就可以简化命令。</p>
<p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样。</p>
<p>从现在起，只要本地作了提交，就可以通过命令：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin master</div></pre></td></tr></table></figure>
<p>把本地master分支的最新修改推送至GitHub.</p>
<h4 id="从远程库克隆"><a href="#从远程库克隆" class="headerlink" title="从远程库克隆"></a>从远程库克隆</h4><p>之前是先有本地库，后创建远程库，然后本地库与远程库关联。</p>
<p>现在是先创建远程库，然后从 远程库克隆。</p>
<p>登录 Coding ,创建一个新的仓库，名字叫 gitskills:</p>
<p>勾选 启用README.md文件初始化项目，为摩恩自动创建一个README.md文件，创建完毕后可以看到：</p>
<p>现在，远程库已经准备好了，下一步就是用命令 git clone 克隆一个本地库：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">  Documents git clone git<span class="meta">@git</span>.coding.net:iosline/gitskills.git</div><div class="line">Cloning into <span class="string">'gitskills'</span>...</div><div class="line">remote: Counting objects: <span class="number">4</span>, done.</div><div class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</div><div class="line">remote: Total <span class="number">4</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">Receiving objects: <span class="number">100</span>% (<span class="number">4</span>/<span class="number">4</span>), done.</div><div class="line">Checking connectivity... done.</div><div class="line">➜  Documents cd gitskills</div><div class="line">➜  gitskills git:(master) ls</div><div class="line">README.md</div></pre></td></tr></table></figure>
<p>进入本地的gitskills目录，就可以看到 README.md了。</p>
<p>也许你已经注意到，GitHub 或 Coding 给出的地址不止一个，还可以用https 这样的地址。实际上 Git支持多种协议，默认的 git://使用ssh，但也可以使用https 等其他协议。</p>
<p>使用https 除了速度慢以外，还有个最大的麻烦是每次推送都必须输入口令。</p>
<h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><h4 id="创建与合并分支"><a href="#创建与合并分支" class="headerlink" title="创建与合并分支"></a>创建与合并分支</h4><p>在版本回退里，你已经知道，每次提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD严格来说不是指向提交，而是指向master,master才是指向提交的，所以，HEAD指向的就是当前分支。</p>
<p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master,就能确定当前分支，以及当前分支的提交点：<br><img src="http://www.liaoxuefeng.com/files/attachments/0013849087937492135fbf4bbd24dfcbc18349a8a59d36d000/0"><br>每次提交，master分支都会向前移动一步，随着你不断的提交，master分支的线也越来越长：</p>
<p>当我们创建新的分支，例如 dev时，Git新建了一个指针叫dev，指向master相同的提交点，再把HEAD指向dev,就表示当前分支在dev上。<br><img src="http://www.liaoxuefeng.com/files/attachments/001384908811773187a597e2d844eefb11f5cf5d56135ca000/0"><br>Git 创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件没有任何变化。</p>
<p>从现在开始，对工作区的修改和提交就是针对dev分值了，比如新提交一次后，dev指针往前移动一步，而master指针不变。<br><img src="http://www.liaoxuefeng.com/files/attachments/0013849088235627813efe7649b4f008900e5365bb72323000/0"><br>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指针指向dev的当前提交，就完成了合并。<br><img src="http://www.liaoxuefeng.com/files/attachments/00138490883510324231a837e5d4aee844d3e4692ba50f5000/0"><br>所以Git 合并分支也很快！就改改指针，工作区内容也不变！</p>
<p>合并完分支后，甚至可以删除dev分支，删除dev分支就是把dev指针给删掉，删掉后，就剩一条master分支了。<br><img src="http://www.liaoxuefeng.com/files/attachments/001384908867187c83ca970bf0f46efa19badad99c40235000/0"><br>实战：</p>
<p>首先，我们创建 dev 分支，然后切换到dev分支:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git checkout -b dev</div><div class="line">Switched to a <span class="keyword">new</span> branch <span class="string">'dev'</span></div><div class="line">➜  gitskills git:(dev)</div></pre></td></tr></table></figure>
<p>git checkout 命令加上 -b 参数表示创建并切换，相当于一下两条命令：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch dev    <span class="comment">//创建分支</span></div><div class="line">git checkout dev  <span class="comment">//切换分支</span></div></pre></td></tr></table></figure>
<p>然后，用 git branch 命令查看当前分支：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git branch</div><div class="line">* dev</div><div class="line">  master</div></pre></td></tr></table></figure>
<p>git branch 命令会列出所有分支，当前分支前面会标一个*号。</p>
<p>然后，我们就可以在dev 分支上正常提交，比如对 README.md做个修改，加一行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) cat README.md</div><div class="line">#gitskills</div><div class="line">Creating a new branch is quick</div></pre></td></tr></table></figure>
<p>然后提交：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git add README.md</div><div class="line">➜  gitskills git:(dev) ✗ git commit -m <span class="string">"branch test"</span></div><div class="line">[dev <span class="number">58</span>cbcc2] branch test</div><div class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</div></pre></td></tr></table></figure>
<p><img src="http://www.liaoxuefeng.com/files/attachments/001384908892295909f96758654469cad60dc50edfa9abd000/0"></p>
<p>现在，dev分支的工作完成，我们就切换回 master分支：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</div></pre></td></tr></table></figure>
<p>切换回master 分支后，再查看一个 README.md,刚才添加的内容不见了，因为添加到dev 分支上，而master分支此刻的提交点并没有改变;<br><img src="http://www.liaoxuefeng.com/files/attachments/001384908892295909f96758654469cad60dc50edfa9abd000/0"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) cat README.md</div><div class="line">#gitskills</div></pre></td></tr></table></figure>
<p>现在，我们把 dev 分支的工作成果合并到 master分支上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git merge dev</div><div class="line">Updating cfa51b9..<span class="number">58</span>cbcc2</div><div class="line">Fast-forward</div><div class="line"> README.md | <span class="number">1</span> +</div><div class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+)</div></pre></td></tr></table></figure>
<p>git merge 命令用于合并指定分支到当前分支，合并后，再查看README.md就会看到和 dev 分支的一样了：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) cat README.md</div><div class="line">#gitskills</div><div class="line">Creating a new branch is quick</div></pre></td></tr></table></figure>
<p>注意到上面的 Fast-forward 信息，Git告诉我们，这次合并是”快进模式”，也就是直接把 master 指向 dev的当前提交，所以合并速度非常快。</p>
<p>合并完成后，就可以放心的删除 dev分支了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git branch -<span class="function">d dev</span></div><div class="line">Deleted branch <span class="title">dev</span> <span class="params">(was <span class="number">58</span>cbcc2)</span>.</div></pre></td></tr></table></figure>
<h5 id="小结：-5"><a href="#小结：-5" class="headerlink" title="小结："></a>小结：</h5><ul><br> 查看分支：git branch<br> 创建分支：git branch <name><br> 切换分支：git checkout <name><br> 创建+切换分支：git checkout -b <name><br> 合并某分支到当前分支：git merge <name><br> 删除分支：git branch -d <name><br></name></name></name></name></name></ul>

<h4 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h4><p>有时候，同时改了同一个文件，合并分支会出现冲突。</p>
<p>实践：<br>我们在 dev 分支对README.md 进行修改，然后提交：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git checkout -b dev2</div><div class="line">Switched to a new branch 'dev2'                                               ➜  gitskills git:(dev2) cat README.md</div><div class="line">#gitskills</div><div class="line">Creating a new branch is quick AND Simple.%                                     ➜  gitskills git:(dev2) ✗ git add README.md</div><div class="line">➜  gitskills git:(dev2) ✗ git commit -m "add AND Simple"</div><div class="line">[dev2 5391388] add AND Simple</div><div class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</div></pre></td></tr></table></figure>
<p>然后切换到 master 分支，对README.md进行修改，提交：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev2) git checkout master</div><div class="line">Switched to branch 'master'</div><div class="line">Your branch is ahead of 'origin/master' by 1 commit.</div><div class="line">  (use "git push" to publish your local commits)                                                ➜  gitskills git:(master) cat README.md</div><div class="line">#gitskills</div><div class="line">Creating a new branch is quick &amp; Simple.</div><div class="line">➜  gitskills git:(master) ✗ git add README.md</div><div class="line">➜  gitskills git:(master) ✗ git commit -m "add &amp; Simple"</div><div class="line">[master 52a5b42] add &amp; Simple</div><div class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</div></pre></td></tr></table></figure>
<p>两者对同一个地方进行了修改，此时 合并，就会出现冲突：<br><img src="http://www.liaoxuefeng.com/files/attachments/001384909115478645b93e2b5ae4dc78da049a0d1704a41000/0"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git merge dev2</div><div class="line">Auto-merging README.<span class="function">md</span></div><div class="line"><span class="title">CONFLICT</span> <span class="params">(content)</span>: Merge conflict in README.md</div><div class="line">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure></p>
<p>Git告诉我们，README.md文件存在冲突，必须手动解决冲突后再提交，git status也可以告诉我们冲突的文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) ✗ git status</div><div class="line">On branch master</div><div class="line">Your branch is ahead of <span class="string">'origin/master'</span> by <span class="number">2</span> commits.</div><div class="line">  (use <span class="string">"git push"</span> to publish your local commits)</div><div class="line">You have unmerged paths.</div><div class="line">  (fix conflicts and run <span class="string">"git commit"</span>)</div><div class="line"></div><div class="line">Unmerged paths:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to mark resolution)</div><div class="line"></div><div class="line">	both modified:   README.<span class="function">md</span></div><div class="line"></div><div class="line">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></div></pre></td></tr></table></figure>
<p>我们可以直接查看 README.md 的内容：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) ✗ cat README.md</div><div class="line">#gitskills</div><div class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</div><div class="line">Creating a new branch is quick &amp; Simple.</div><div class="line">=======</div><div class="line">Creating a new branch is quick AND Simple.</div><div class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; dev2</div></pre></td></tr></table></figure>
<p>我们手动修改冲突后再提交：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) ✗ git add README.md</div><div class="line">➜  gitskills git:(master) ✗ git commit -m "conflict fixed"</div><div class="line">[master 929131f] conflict fixed</div><div class="line">➜  gitskills git:(master) cat README.md</div><div class="line">#gitskills</div><div class="line"></div><div class="line">Creating a new branch is quick and Simple.</div></pre></td></tr></table></figure>
<p>用带参数的 git log 也可以 看到分支的合并情况： git log –graph</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git log --graph --pretty=oneline --abbrev-commit</div><div class="line">*   <span class="number">929131f</span> conflict fixed</div><div class="line">|\</div><div class="line">| * <span class="number">5391388</span> add AND Simple</div><div class="line">* | <span class="number">52</span>a5b42 add &amp; Simple</div><div class="line">|/</div><div class="line">* <span class="number">58</span>cbcc2 branch test</div><div class="line">* cfa51b9 Initial commit</div></pre></td></tr></table></figure>
<p>最后，删除 dev2 分支：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git branch -<span class="function">d dev2</span></div><div class="line">Deleted branch <span class="title">dev2</span> <span class="params">(was <span class="number">5391388</span>)</span>.</div></pre></td></tr></table></figure>
<h4 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h4><p>通常，合并分支时，如果可能，Git会用 Fast froward 模式，但这种模式下，删除分支后，会丢掉分支信息。</p>
<p>如果要强制禁用Fast forward 模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。</p>
<p>实战 –no-ff 方式的 git merge:</p>
<p>首先 仍然创建并切换dev 分支:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git checkout -b dev</div><div class="line">Switched to a <span class="keyword">new</span> branch <span class="string">'dev'</span></div></pre></td></tr></table></figure>
<p>修改 README.md文件，并提交一个新的 commit:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git add README.md</div><div class="line">➜  gitskills git:(dev) ✗ git commit -m "new merge way"</div><div class="line">[dev 3dc346e] new merge way</div><div class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</div><div class="line">➜  gitskills git:(dev) cat README.md</div><div class="line">#gitskills</div><div class="line"></div><div class="line">Creating a new branch is quick and Simple.</div><div class="line">他妈的又改了，测试一下 新的merge 方式: --no-ff</div></pre></td></tr></table></figure>
<p>现在，切换回 master:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</div></pre></td></tr></table></figure>
<p>准备合并dev分支，注意 –no-ff 参数，表示禁用 Fast forward:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git merge --no-ff -m <span class="string">"merge with no-ff"</span> dev</div><div class="line">Merge made by the <span class="string">'recursive'</span> strategy.</div><div class="line"> README.md | <span class="number">2</span> +-</div><div class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</div></pre></td></tr></table></figure>
<p>因为本次合并要创建一个新的commit,所以加上 -m参数，把commit 描述写进去。</p>
<p>合并后， git log 查看分支历史:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git log --graph --pretty=oneline --abbrev-commit</div><div class="line">*   <span class="number">7</span>c0a3e9 merge with no-ff</div><div class="line">|\</div><div class="line">| * <span class="number">3</span>dc346e <span class="keyword">new</span> merge way</div><div class="line">|/</div><div class="line">*   <span class="number">929131f</span> conflict fixed</div><div class="line">|\</div><div class="line">| * <span class="number">5391388</span> add AND Simple</div><div class="line">* | <span class="number">52</span>a5b42 add &amp; Simple</div><div class="line">|/</div><div class="line">* <span class="number">58</span>cbcc2 branch test</div><div class="line">* cfa51b9 Initial commit</div></pre></td></tr></table></figure>
<p>可以看到，不使用 Fast forward 模式，merge后就这样：<br><img src="http://www.liaoxuefeng.com/files/attachments/001384909222841acf964ec9e6a4629a35a7a30588281bb000/0"></p>
<p>合并分支时，加上 –no-ff 参数就可以用普通模式合并，合并后的历史有分支，能看出来做过合并，而Fast forward合并就看不出来曾经做过合并。</p>
<h4 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h4><p>软件开发中，bug就像家常便饭一样。有了bug就需要修复，在Git中，由于分支是如此的强大，所以，每个bug都可以通过一个新的临时分支来修复，修复后，合并分支，然后将临时分支删除。</p>
<p>当你接到一个修复一个代号101的任务时，很自然的，你想创建一个issus-101来修复它，但是，等等，当前正在 dev上进行的工作还没有提交：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) vi README.md</div><div class="line">➜  gitskills git:(dev) ✗ cat README.md</div><div class="line">#gitskills</div><div class="line"></div><div class="line">Creating a new branch is quick and Simple.</div><div class="line">他妈的又改了，测试一下 新的merge 方式: --no-ff</div><div class="line">测试 bug 分支 此时正在开发新功能，并未完成，需紧急修复一个bug</div><div class="line"></div><div class="line">➜  gitskills git:(dev) ✗ git status</div><div class="line">On branch dev</div><div class="line">Changes not staged for commit:</div><div class="line">  (use "git add &lt;file&gt;..." to update what will be committed)</div><div class="line">  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)</div><div class="line"></div><div class="line">	modified:   README.md</div><div class="line"></div><div class="line">no changes added to commit (use "git add" and/or "git commit -a")</div></pre></td></tr></table></figure>
<p>并不是你想不提交，而是工作只进行到一半，还没发提交，预计完成还需1天时间，但是bug必须2小时内修复，怎么办呢？</p>
<p>幸好，Git还提供了一个 stash 功能，可以把当前工作现场”储藏”起来，等以后恢复现场后继续工作:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) ✗ git stash</div><div class="line">Saved working directory and index state WIP on dev: <span class="number">7</span>c0a3e9 merge with no-ff</div><div class="line">HEAD is now at <span class="number">7</span>c0a3e9 merge with no-ff</div></pre></td></tr></table></figure>
<p>现在，用 git status 查看工作区，就是干净的(除非有没有被Git管理的文件)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git status</div><div class="line">On branch dev</div><div class="line">nothing to commit, working directory clean</div></pre></td></tr></table></figure>
<p>首先确定要在哪个分支上修复bug，假定需要在master 分支上修复：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">Your branch is ahead of <span class="string">'origin/master'</span> by <span class="number">2</span> commits.</div><div class="line">  (use <span class="string">"git push"</span> to publish your local commits)</div><div class="line">➜  gitskills git:(master) git checkout -b issue-<span class="number">101</span></div><div class="line">Switched to a <span class="keyword">new</span> branch <span class="string">'issue-101'</span></div></pre></td></tr></table></figure>
<p>随便改一下内容，提交：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(issue-<span class="number">101</span>) vi README.md</div><div class="line">➜  gitskills git:(issue-<span class="number">101</span>) ✗ git add README.md</div><div class="line">➜  gitskills git:(issue-<span class="number">101</span>) ✗ git commit -m <span class="string">"fix bug 101 "</span></div><div class="line">[issue-<span class="number">101</span> aac4945] fix bug <span class="number">101</span></div><div class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</div></pre></td></tr></table></figure>
<p>修复完成后，切换master分支，并完成合并，最后删除issue-101分支:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜ gitskills git:(issue-<span class="number">101</span>) git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">Your branch is ahead of <span class="string">'origin/master'</span> by <span class="number">2</span> commits.</div><div class="line">  (use <span class="string">"git push"</span> to publish your local commits)</div><div class="line">➜  gitskills git:(master) git merge --no-ff -m <span class="string">"merged bug fix 101"</span> issue-<span class="number">101</span></div><div class="line">Merge made by the <span class="string">'recursive'</span> strategy.</div><div class="line"> README.md | <span class="number">2</span> +-</div><div class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</div><div class="line">➜  gitskills git:(master) git branch -d issue-<span class="number">101</span></div><div class="line">Deleted branch issue-<span class="number">101</span> (was aac4945).</div></pre></td></tr></table></figure>
<p>太棒了，原计划两个小时的bug修复只花了5分钟，现在时候接着回到dev分支干活了！</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git checkout dev</div><div class="line">Switched to branch <span class="string">'dev'</span></div><div class="line">➜  gitskills git:(dev) git status</div><div class="line">On branch dev</div><div class="line">nothing to commit, working directory clean</div></pre></td></tr></table></figure>
<p>工作区是干净的，刚才的工作现场存到哪去了？ 用 git stash list 命令查看：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git stash list</div><div class="line">stash@&#123;<span class="number">0</span>&#125;: WIP on dev: <span class="number">7</span>c0a3e9 merge with no-ff</div></pre></td></tr></table></figure>
<p>工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：<br>一是用 git stash apply 恢复，但是恢复后，stash 内容并不删除，你需要用 git stash drop 来删除：<br>另一种是用 git stash pop,恢复恩同时把 stash 内容也删了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git stash pop</div><div class="line">On branch dev</div><div class="line">Changes not staged <span class="keyword">for</span> commit:</div><div class="line">  (use <span class="string">"git add &lt;file&gt;..."</span> to update what will be committed)</div><div class="line">  (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes in working directory)</div><div class="line"></div><div class="line">	modified:   README.<span class="function">md</span></div><div class="line"></div><div class="line">no changes added to <span class="title">commit</span> <span class="params">(use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span></div><div class="line">Dropped refs/stash@&#123;<span class="number">0</span>&#125; (<span class="number">0</span>a3541b3127b9cf7d536dea28f0a48256bda724e)</div></pre></td></tr></table></figure>
<p>再用 git stash list 查看，就看不到任何 stash 内容了：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) ✗ git stash list</div></pre></td></tr></table></figure>
<p>你可以多次 stash,恢复的时候，先用 git stash list 查看，然后恢复指定的 stash ,用命令：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) ✗ git stash apply stash@&#123;<span class="number">0</span>&#125;</div></pre></td></tr></table></figure>
<h5 id="小结"><a href="#小结" class="headerlink" title="小结:"></a>小结:</h5><ul><br>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除。<br>当手头工作没有完成时，先把工作现场 git stash 一下，然后去修复bug，修复后，再 git stash pop,回到工作现场。<br></ul>

<h4 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h4><p>软件开发中，总有无穷无尽的新的功能要添加进来。</p>
<p>添加一个新功能时，你肯定不希望因为一些实验性质的代码，把主分支搞乱，所以，每添加一个新功能，最好新建一个feature分支，在上面开发，完成后，合并，最后删除改feature分支。</p>
<p>现在，你接到一个新任务，开发代号为Vulcan的新功能，该功能计划用于下一代星际飞船。</p>
<p>于是准备开发：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git checkout -b feature-vulcan</div><div class="line">Switched to a <span class="keyword">new</span> branch <span class="string">'feature-vulcan'</span></div><div class="line">➜  gitskills git:(feature-vulcan) git add vulcan.txt</div><div class="line">➜  gitskills git:(feature-vulcan) ✗ git status</div><div class="line">On branch feature-vulcan</div><div class="line">Changes to be committed:</div><div class="line">  (use <span class="string">"git reset HEAD &lt;file&gt;..."</span> to unstage)</div><div class="line"></div><div class="line">	<span class="keyword">new</span> file:   vulcan.txt</div><div class="line"></div><div class="line">➜  gitskills git:(feature-vulcan) ✗ git commit -m <span class="string">"add feature vulcan"</span></div><div class="line">[feature-vulcan <span class="number">91045</span>c7] add feature vulcan</div><div class="line"> <span class="number">1</span> file changed, <span class="number">7</span> insertions(+)</div><div class="line"> create mode <span class="number">100644</span> vulcan.txt</div></pre></td></tr></table></figure>
<p>开发完毕，切回 dev 准备合并：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(feature-vulcan) git checkout dev</div></pre></td></tr></table></figure>
<p>一切顺利的话，feature分支和bug分支是类似的，合并，然后删除。</p>
<p>但是，就在此刻，接到上级命令，因经费不足，新功能取消！</p>
<p>虽然白干了，但是这个分支必须销毁：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git branch -d feature-vulcan</div><div class="line">error: The branch <span class="string">'feature-vulcan'</span> is not fully merged.</div><div class="line">If you are sure you want to delete it, run <span class="string">'git branch -D feature-vulcan'</span>.</div></pre></td></tr></table></figure>
<p>销毁失败，Git友情提示，feature-vulcan分支还没有被合并，如果删除，将丢失修改，如果强行删除，需要使用命令 git branch -D feature-vulcan.</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git branch -D feature-vulcan</div><div class="line">Deleted branch feature-vulcan (was <span class="number">91045</span>c7).</div></pre></td></tr></table></figure>
<p>删除成功！</p>
<h4 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h4><p>当你从远程仓库克隆时，实际上 Git自动把本地的master分支和远程的master分支对应起来，并且，远程仓库的默认名称是 origin.</p>
<p>要查看远程库的信息，用 git remote:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git remote</div><div class="line">origin</div></pre></td></tr></table></figure>
<p>或者，用 git remote -v 显示更详细的信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git remote -v</div><div class="line">origin	git<span class="meta">@git</span>.coding.net:iosline/gitskills.git (fetch)</div><div class="line">origin	git<span class="meta">@git</span>.coding.net:iosline/gitskills.git (push)</div></pre></td></tr></table></figure>
<p>上面显示了可以抓取和推送的origin的地址。如果没有推送权限，就看不到push的地址。</p>
<h5 id="推送分支"><a href="#推送分支" class="headerlink" title="推送分支"></a>推送分支</h5><p>推送分支，就是把改分支上的所有本地提交推送到远程库。推送时，要指定本地分支，这样，Git就会把该分支推送到远程库对应的远程分支上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git push origin master</div></pre></td></tr></table></figure>
<p>如果要推送其他分支，比如 dev，就改成 ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git push origin dev</div></pre></td></tr></table></figure>
<p>但是，并不是一定要把本地分支往远程推送，那么，哪些分支需要推送，哪些不需要呢?</p>
<p>master 分支是主分支，因此要时刻与远程同步；<br>dev 分支是开发分支，团队所有成员都需要在上面工作，所以也需要远程同步；<br>bug分支只用于本地修复bug，没必要推送到远程了，除非老板要看看你每周到底修复了几个bug；<br>feature分支是否推送到远程，取决于你是否和你的小伙伴合作在上面开发。</p>
<h5 id="抓取分支"><a href="#抓取分支" class="headerlink" title="抓取分支"></a>抓取分支</h5><p>多人协作时，大家都会往master和dev分支上推送各自的修改。</p>
<p>现在，模拟一个你的伙伴，可以在另一台电脑(注意要把SSH Key添加到GitHub)或者同一台电脑的另一个目录下克隆：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">  Documents cd gitskills2</div><div class="line">➜  gitskills2 git clone git<span class="meta">@git</span>.coding.net:iosline/gitskills.git</div><div class="line">Cloning into <span class="string">'gitskills'</span>...</div><div class="line">remote: Counting objects: <span class="number">27</span>, done.</div><div class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">25</span>/<span class="number">25</span>), done.</div><div class="line">remote: Total <span class="number">27</span> (delta <span class="number">6</span>), reused <span class="number">4</span> (delta <span class="number">0</span>)</div><div class="line">Receiving objects: <span class="number">100</span>% (<span class="number">27</span>/<span class="number">27</span>), done.</div><div class="line">Resolving deltas: <span class="number">100</span>% (<span class="number">6</span>/<span class="number">6</span>), done.</div><div class="line">Checking connectivity... done.</div></pre></td></tr></table></figure>
<p>当你的小伙伴从远程库clone时，默认情况下，你的小伙伴只能看到本地master分支。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills2 cd gitskills</div><div class="line">➜  gitskills git:(master) git branch</div><div class="line">* master</div></pre></td></tr></table></figure>
<p>现在，你的小伙伴要在dev分支上开发，就必须创建远程 origin 的 dev 分支到本地，于是他用这个命令创建本地 dev 分支：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git checkout -b dev origin/dev</div><div class="line">Branch dev set up to track remote branch dev from origin.</div><div class="line">Switched to a <span class="keyword">new</span> branch <span class="string">'dev'</span></div></pre></td></tr></table></figure>
<p>现在，他就可以在dev上继续修改，然后时不时地把dev 分支push到远程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) ✗ git add README.md</div><div class="line">➜  gitskills git:(dev) ✗ git commit -m <span class="string">"origin dev push"</span></div><div class="line">[dev <span class="number">3</span>c548eb] origin dev push</div><div class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</div><div class="line">➜  gitskills git:(dev) git push origin dev</div><div class="line">Counting objects: <span class="number">3</span>, done.</div><div class="line">Delta compression using up to <span class="number">8</span> threads.</div><div class="line">Compressing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</div><div class="line">Writing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">365</span> bytes | <span class="number">0</span> bytes/s, done.</div><div class="line">Total <span class="number">3</span> (delta <span class="number">1</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">To git<span class="meta">@git</span>.coding.net:iosline/gitskills.git</div><div class="line">   <span class="number">99f</span>492a..<span class="number">3</span>c548eb  dev -&gt; dev</div></pre></td></tr></table></figure>
<p>你的小伙伴已经向 origin/dev 分支推送了他的提交，而碰巧你也对同样的文件作了修改，并试图推送：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) ✗ git add README.md</div><div class="line">➜  gitskills git:(dev) ✗ git commit -m <span class="string">"mine update"</span></div><div class="line">[dev <span class="number">98</span>b72e8] mine update</div><div class="line"> <span class="number">1</span> file changed, <span class="number">1</span> insertion(+), <span class="number">1</span> deletion(-)</div><div class="line">➜  gitskills git:(dev) git push origin dev</div><div class="line">To git<span class="meta">@git</span>.coding.net:iosline/gitskills.git</div><div class="line"> ! [rejected]        dev -&gt; dev (fetch first)</div><div class="line">error: failed to push some refs to <span class="string">'git@git.coding.net:iosline/gitskills.git'</span></div><div class="line">hint: Updates were rejected because the remote contains work that you do</div><div class="line">hint: not have locally. This is usually caused by another repository pushing</div><div class="line">hint: to the same ref. You may want to first integrate the remote changes</div><div class="line">hint: (e.g., <span class="string">'git pull ...'</span>) before pushing again.</div><div class="line">hint: See the <span class="string">'Note about fast-forwards'</span> in <span class="string">'git push --help'</span> <span class="keyword">for</span> details.</div></pre></td></tr></table></figure>
<p>推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，Git已经提示我们，先用 git pull 把最新的提交从 origin/dev抓下来，然后再本地合并，解决冲突，再推送：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git pull</div><div class="line">remote: Counting objects: <span class="number">3</span>, done.</div><div class="line">remote: Compressing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</div><div class="line">remote: Total <span class="number">3</span> (delta <span class="number">1</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">Unpacking objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</div><div class="line">From git.coding.net:iosline/gitskills</div><div class="line">   <span class="number">99f</span>492a..<span class="number">3</span>c548eb  dev        -&gt; origin/dev</div><div class="line">There is no tracking information <span class="keyword">for</span> the current branch.</div><div class="line">Please specify which branch you want to merge with.</div><div class="line">See git-pull(<span class="number">1</span>) <span class="keyword">for</span> details.</div><div class="line"></div><div class="line">    git pull &lt;remote&gt; &lt;branch&gt;</div><div class="line"></div><div class="line">If you wish to set tracking information <span class="keyword">for</span> <span class="keyword">this</span> branch you can do so with:</div><div class="line"></div><div class="line">    git branch --set-upstream-to=origin/&lt;branch&gt; dev</div></pre></td></tr></table></figure>
<p>git pull 也失败了，原因是没有指定本地 dev 分支与远程 origin/dev分支的连接，根据提示，设置 dev 和 origin/dev 的链接：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git branch --set-upstream dev origin/dev</div><div class="line">The --set-upstream flag is deprecated and will be removed. Consider using --track or --set-upstream-to</div><div class="line">Branch dev set up to track remote branch dev from origin.</div></pre></td></tr></table></figure>
<p>再pull:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git pull</div><div class="line">Auto-merging README.<span class="function">md</span></div><div class="line"><span class="title">CONFLICT</span> <span class="params">(content)</span>: Merge conflict in README.md</div><div class="line">Automatic merge failed; fix conflicts and then commit the result.</div></pre></td></tr></table></figure>
<p>这回 git pull 成功，但是合并有冲突，需要手动解决，解决办法和分支管理的解决冲突一样。解决后，提交，再push:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) ✗ git add README.md</div><div class="line">➜  gitskills git:(dev) ✗ git commit -m <span class="string">"solve origin dev conflict"</span></div><div class="line">[dev d421542] solve origin dev conflict</div><div class="line">➜  gitskills git:(dev) git push origin dev</div><div class="line">Counting objects: <span class="number">6</span>, done.</div><div class="line">Delta compression using up to <span class="number">8</span> threads.</div><div class="line">Compressing objects: <span class="number">100</span>% (<span class="number">6</span>/<span class="number">6</span>), done.</div><div class="line">Writing objects: <span class="number">100</span>% (<span class="number">6</span>/<span class="number">6</span>), <span class="number">684</span> bytes | <span class="number">0</span> bytes/s, done.</div><div class="line">Total <span class="number">6</span> (delta <span class="number">2</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">To git<span class="meta">@git</span>.coding.net:iosline/gitskills.git</div><div class="line">   <span class="number">3</span>c548eb..d421542  dev -&gt; dev</div></pre></td></tr></table></figure>
<p>因此，多人协作的工作模式通常是这样的：<br>首先，先用 git pull 从远程拉代码，检查更新，有冲突解决冲突<br>之后，再用 git push origin branch-name 推送<br>如果 git pull 提示 “no tracking informtion”，则说明本地分支与远程分支的链接关系没有创建，用命令 git branch –set-upstream branch-name origin/branch-name</p>
<h5 id="小结-1"><a href="#小结-1" class="headerlink" title="小结:"></a>小结:</h5><p>查看远程仓库信息: git remote -v</p>
<p>本地新建的分支如果不推送到远程，对其他人是不可见的</p>
<p>从本地推送分支，使用 git push origin branch-name,如果推送失败，先用 git pull抓取远程的心提交</p>
<p>在本地创建和远程分支对应的分支，使用 git checkout -b branch-name origin/branch-name ,本地和远程分支的名称最好一样。</p>
<p>建立本地分支和远程分支的关联，使用 git branch –set-upstream branch-name origin/branch-name。</p>
<p>从远程抓取分支，使用 git pull ,如果有冲突，要先处理冲突。</p>
<h3 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h3><p>发布一个版本时，我们通常现在版本库中打一个标签(tag)，这样，就唯一确定了打标签时刻的版本。将来无论什么时候，取某个标签的版本，就把那个打标签时刻的历史版本取出来。所以，标签也是版本库的一个快照。</p>
<p>Git的标签虽然是版本库的快照，但其实它就是指向某个 commit 的指针(跟分支很想对不对？但分支可以移动，标签不能移动)，所以创建和删除标签都是瞬间完成的。</p>
<p>Git有commit，为什么还要引入tag？</p>
<p>“请把上周一的那个版本打包发布，commit号是6a5819e…”</p>
<p>“一串乱七八糟的数字不好找！”</p>
<p>如果换一个办法：</p>
<p>“请把上周一的那个版本打包发布，版本号是v1.2”</p>
<p>“好的，按照tag v1.2查找commit就行！”</p>
<p>所以，tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。</p>
<h4 id="创建标签"><a href="#创建标签" class="headerlink" title="创建标签"></a>创建标签</h4><p>在Git中打标签非常简单，首先，切换到需要打标签的分支上：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(dev) git branch</div><div class="line">* dev</div><div class="line">  master</div><div class="line">➜  gitskills git:(dev) git checkout master</div><div class="line">Switched to branch <span class="string">'master'</span></div><div class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</div></pre></td></tr></table></figure>
<p>然后，敲命令 git tag <name> 就可以打一个新标签：</name></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git tag v1.0</div></pre></td></tr></table></figure>
<p>可以用命令 git tag 查看所有标签：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git tag</div><div class="line">v1.0</div></pre></td></tr></table></figure>
<p>默认标签是打在最新提交的commit 上的。有时候，如果忘了打标签，比如，现在已经是周五了，但应该在周一打的标签没有打，怎么办呢？</p>
<p>方法是找到历史提交的 commit id,然后打上就可以了:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git log --pretty=oneline --abbrev-commit</div><div class="line"><span class="number">2</span>aca93e merged bug fix <span class="number">101</span></div><div class="line">aac4945 fix bug <span class="number">101</span></div><div class="line"><span class="number">7</span>c0a3e9 merge with no-ff</div><div class="line"><span class="number">3</span>dc346e <span class="keyword">new</span> merge way</div><div class="line"><span class="number">929131f</span> conflict fixed</div><div class="line"><span class="number">52</span>a5b42 add &amp; Simple</div><div class="line"><span class="number">5391388</span> add AND Simple</div><div class="line"></div><div class="line"> branch test</div><div class="line">cfa51b9 Initial commit</div></pre></td></tr></table></figure>
<p>比如说要对 new merge way 这次提交打标签，它对应的 commit id 是 3dc346e，敲入命令 ：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git tag v0.5 <span class="number">3</span>dc346e</div></pre></td></tr></table></figure>
<p>再用命令 git tag 查看标签：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git tag</div><div class="line">v0.5</div><div class="line">v1.0</div></pre></td></tr></table></figure>
<p>注意，标签不是按时间排序列出，而是按字母排序的。 可以用 git show <tagname> 查看标签信息：</tagname></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git show v0.5</div><div class="line">commit <span class="number">3</span>dc346e3dd3a3fae0586ec69a46a59e345dddd6c</div><div class="line">Author: iosline &lt;<span class="number">949022813</span><span class="meta">@qq</span>.com&gt;</div><div class="line">Date:   Sun Sep <span class="number">18</span> <span class="number">16</span>:<span class="number">51</span>:<span class="number">17</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">    <span class="keyword">new</span> merge way</div></pre></td></tr></table></figure>
<p>可以看到，v0.5确实是打在 new merge way 这次提交上。</p>
<p>还可以创建带有说明的标签，用 -a 指定标签名， -m 指定说明文字。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git tag -a v0.1 -m <span class="string">"version 0.1 released"</span> <span class="number">58</span>cbcc2</div></pre></td></tr></table></figure>
<p>用命令 git show <tagname>可以看到说明文字：</tagname></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">tag v0.1</div><div class="line">Tagger: iosline &lt;<span class="number">949022813</span><span class="meta">@qq</span>.com&gt;</div><div class="line">Date:   Mon Sep <span class="number">19</span> <span class="number">15</span>:<span class="number">49</span>:<span class="number">11</span> <span class="number">2016</span> +<span class="number">0800</span></div><div class="line"></div><div class="line">version <span class="number">0.1</span> released</div></pre></td></tr></table></figure>
<h5 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h5><ul><br> 命令 git tag <tagname> 用于新建一个标签，默认为HEAD，也可以指定一个 commit id。<br> git tag -a <tagname> -m “desc” 可以指定标签信息。<br> git tag 可以查看所有标签。<br></tagname></tagname></ul>

<h4 id="操作标签"><a href="#操作标签" class="headerlink" title="操作标签"></a>操作标签</h4><p>如果标签打错了，也可以删除：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git tag -d v0.1</div><div class="line">Deleted tag <span class="string">'v0.1'</span> (was <span class="number">6715e1</span>b)</div></pre></td></tr></table></figure>
<p>因为创建的标签都只存储在本地，不会自动推送到远程。所以，打错的标签可以在本地安全删除。</p>
<p>如果要推送某个标签到远程，使用命令 git push origin <tagname>:</tagname></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git push origin v1.0</div><div class="line">Total <span class="number">0</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">To git<span class="meta">@git</span>.coding.net:iosline/gitskills.git</div><div class="line"> * [<span class="keyword">new</span> tag]         v1.0 -&gt; v1.0</div></pre></td></tr></table></figure>
<p>或者，一次性推送全部尚未推送到远程的本地标签：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git push origin --tags</div><div class="line">Total <span class="number">0</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</div><div class="line">To git<span class="meta">@git</span>.coding.net:iosline/gitskills.git</div><div class="line"> * [<span class="keyword">new</span> tag]         v0.5 -&gt; v0.5</div></pre></td></tr></table></figure>
<p>如果标签已经推送到远程，要删除远程标签就麻烦一点，先从本地删除：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git tag -d v0.5</div><div class="line">Deleted tag <span class="string">'v0.5'</span> (was <span class="number">3</span>dc346e)</div></pre></td></tr></table></figure>
<p>然后，从远程删除。删除命令也是 push ,但是格式如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">➜  gitskills git:(master) git push origin :refs/tags/v0.5</div><div class="line">To git<span class="meta">@git</span>.coding.net:iosline/gitskills.git</div><div class="line"> - [deleted]         v0.5</div></pre></td></tr></table></figure>
<p>要看看是否真的从远程库删除了标签，可以登录 Coding 查看。</p>
<h5 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h5><p>命令 git push origin <tagname>可以推送一个本地标签<br>命令 git push origin –tags 可以推送所有未推送过的本地标签<br>命令 git tag -d <tagname> 可以删除一个本地标签<br>命令 git push origin :refs/tags/<tagname>可以删除一个远程标签</tagname></tagname></tagname></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[初尝Mac工具推荐及开发环境配置]]></title>
      <url>http://yoursite.com/2016/07/07/%E5%88%9D%E5%B0%9DMac%E5%B7%A5%E5%85%B7%E6%8E%A8%E8%8D%90%E5%8F%8A%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
      <content type="html"><![CDATA[<p>销匿了一段时间之后，又基本回到正常的开发工作，随着这次的开始，首先在配置上正所谓步枪换AK了，从之前的Windows升级到了现在到处充满高大上的牛逼MacBook Pro(尤其是价格),其次是从所谓的二三线城市郑州转移到了充满xx与xx的帝都(其实是然并卵)，最后才是最重要的，那就是作者的水平实在是太菜了，有很大的进步空间啊啊啊啊。</p>
<p>废话不多说，书归正传。</p>
<p>经同学的指点，才慢慢熟悉OS系统，都是大神啊，上来就给你玩终端命令，看来是用windows图形化界面比较懒了，以后要多用命令。</p>
<h3 id="推荐环节"><a href="#推荐环节" class="headerlink" title="推荐环节"></a>推荐环节</h3><h4 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2:"></a><a href="http://www.iterm2.com/" target="_blank" rel="external">iTerm2:</a></h4><p>一款终端工具,点此可以跳转到官网下载。</p>
<h4 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew:"></a><a href="http://brew.sh/index_zh-cn.html" target="_blank" rel="external">Homebrew:</a></h4><p>在终端的基础上，推荐一款可以通过终端来下载app的工具,点此连接，即可快速掌握其作用。</p>
<p>通过brew下载的默认安装路径：/usr/local/</p>
<h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a><a href="http://ohmyz.sh/" target="_blank" rel="external">oh-my-zsh</a></h4><p>我们大多数人使用苹果自带的Bash,一般人也就当做terminal来使用了，并没有什么太大的差别。</p>
<p>zsh具有强大的自动补全功能，当然还有很多其他的功能。</p>
<p>zsh虽然很强大，但是特别不容易上手，但是世界之大，能人很多，国外有个人在Github上有个开源项目就是 让你快速上手Zsh的，它叫<a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="external">on my zsh</a>.</p>
<h5 id="zsh的安装-ohmyz"><a href="#zsh的安装-ohmyz" class="headerlink" title="zsh的安装: ohmyz"></a>zsh的安装: <a href="http://ohmyz.sh/" target="_blank" rel="external">ohmyz</a></h5><pre><code>点此链接进入，在终端打入命令即可
</code></pre><h5 id="zsh的使用"><a href="#zsh的使用" class="headerlink" title="zsh的使用"></a>zsh的使用</h5><h5 id="zsh与bash的切换"><a href="#zsh与bash的切换" class="headerlink" title="zsh与bash的切换"></a>zsh与bash的切换</h5><p>bash—-&gt;zsh :</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /bin/zsh</div></pre></td></tr></table></figure>
<p>zsh—–&gt;bash</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chsh -s /bin/bash</div></pre></td></tr></table></figure>
<h4 id="vi"><a href="#vi" class="headerlink" title="vi:"></a><a href="http://www.eepw.com.cn/article/48018.htm" target="_blank" rel="external">vi:</a></h4><p>一款在终端进行编辑的编辑器工具,里面详细的介绍了vi的使用方法，可以点此连接查看。</p>
<h3 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h3><h4 id="Mac下adb不起作用"><a href="#Mac下adb不起作用" class="headerlink" title="Mac下adb不起作用"></a>Mac下adb不起作用</h4><p>原因：是由于zsh的缘故</p>
<p>解决方案：</p>
<p>在.bash_profile中添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export PATH=$&#123;PATH&#125;:/Users/jiayongkai/Library/Android/sdk/platform-tools</div><div class="line">export PATH=$&#123;PATH&#125;:/Users/jiayongkai/Library/Android/sdk/tools</div></pre></td></tr></table></figure>
<p>然后找到User目录下面的.zshrc文件，我的在jiayongkai/.zshrc.在文件最后添加</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">\# Enable my profile</div><div class="line">source ~/.bash_profile</div></pre></td></tr></table></figure>
<p>检查是否成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ source .bash_profile</div><div class="line">$ echo $adb </div><div class="line">$ adb -version</div></pre></td></tr></table></figure>
<h4 id="Mac下JAVA-HOME的配置"><a href="#Mac下JAVA-HOME的配置" class="headerlink" title="Mac下JAVA_HOME的配置"></a>Mac下JAVA_HOME的配置</h4><p>配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">\# 使用vim打开.bash_profile文件，加入java环境变量</div><div class="line">$ vim .bash_profile</div><div class="line">export JAVA_HOME=$(/Library/Java/JavaVirtualMachines/jdk1.8.0_77.jdk/Contents/Home)</div><div class="line">export PATH=$&#123;PATH&#125;:$&#123;JAVA_HOME&#125;/bin</div></pre></td></tr></table></figure>
<p>检查是否成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ source .bash_profile</div><div class="line">$ echo $JAVA_HOME </div><div class="line">$ java -version</div></pre></td></tr></table></figure>
<h4 id="Mac下ANDROID-HOME的配置"><a href="#Mac下ANDROID-HOME的配置" class="headerlink" title="Mac下ANDROID_HOME的配置"></a>Mac下ANDROID_HOME的配置</h4><p>配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim .bash_profile </div><div class="line">export ANDROID_HOME=~/Library/Android/sdk</div><div class="line">export PATH=$PATH:$ANDROID_HOME/tools:$ANDROID_HOME/platform-tools</div></pre></td></tr></table></figure>
<p>检查是否成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ source .bash_profile</div><div class="line">$ echo $ANDROID_HOME </div><div class="line">$ adb</div></pre></td></tr></table></figure>
<h4 id="Mac下Gradle的配置"><a href="#Mac下Gradle的配置" class="headerlink" title="Mac下Gradle的配置"></a>Mac下Gradle的配置</h4><p>Android Studio 自带的gradle路径为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">/Applications/Android\ Studio.app/Contents/gradle/gradle-2.10/bin</div></pre></td></tr></table></figure>
<p>步骤：</p>
<p>1.打开终端</p>
<p>2.输入：vim ~/.bash_profile</p>
<p>3.进入编辑模式</p>
<p>4.在文本末尾添加如下信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export GRADLE_HOME=/Applications/Android\ Studio.app/Contents/gradle/gradle-2.10</div><div class="line">export PATH=$&#123;PATH&#125;:$&#123;GRADLE_HOME&#125;/bin</div></pre></td></tr></table></figure>
<p>5.退出编辑模式，输入:wq退出</p>
<p>6.输入：gradle -v显示如下信息，表明环境变量配置成功</p>
<hr>
<p>Gradle 2.10</p>
<hr>
<p>检查是否成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ source .bash_profile</div><div class="line">$ echo $gradle </div><div class="line">$ gradle -version</div></pre></td></tr></table></figure>
<h4 id="Mac下MAVEN-HOME的配置"><a href="#Mac下MAVEN-HOME的配置" class="headerlink" title="Mac下MAVEN_HOME的配置"></a>Mac下MAVEN_HOME的配置</h4><p>Android Studio自带gradle与maven，所以不用下载，这里演示一下通过brew下载maven,再配置。</p>
<p>1.使用brew下载并配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ brew install maven</div></pre></td></tr></table></figure>
<p>2.去官网下载</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">下载地址：</div><div class="line">Maven：http://maven.apache.org/</div><div class="line"></div><div class="line">将下载的maven解压并复制/移动到你需要的目录 </div><div class="line">比如：/usr/local/maven</div></pre></td></tr></table></figure>
<p>配置环境变量</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ vim .bash_profile</div><div class="line">export MAVEN_HOME=/usr/local/maven/apache-maven-x.x.x</div><div class="line">export PATH=$MAVEN_HOME/bin:$PATH</div></pre></td></tr></table></figure>
<p>检查是否成功：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ source .bash_profile</div><div class="line">$ echo $MAVEN_HOME</div><div class="line">$ mvn -version</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[通知学习之自定义通知]]></title>
      <url>http://yoursite.com/2016/02/24/%E9%80%9A%E7%9F%A5%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E9%80%9A%E7%9F%A5/</url>
      <content type="html"><![CDATA[<p>实现自定义的通知栏效果：</p>
<p>主要要用到RemoteViews这个类</p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>Notification的自定义布局是RemoteViews，和其他RemoteViews一样，在自定义视图布局文件中，仅支持FrameLayout、LinearLayout、RelativeLayout三种布局控件和AnalogClock、Chronometer、Button、ImageButton、ImageView、ProgressBar、TextView、ViewFlipper、ListView、GridView、StackView和AdapterViewFlipper这些显示控件，不支持这些类的子类或Android提供的其他控件。否则会引起ClassNotFoundException异常</p>
<h4 id="步骤如下："><a href="#步骤如下：" class="headerlink" title="步骤如下："></a>步骤如下：</h4><p><li>1）创建自定义视图</li></p>
<p><li>2）获取远程视图对象（注：Notification的contentView不能为空）</li></p>
<p><li>3）设置PendingIntent（来响应各种事件）</li></p>
<p><li>4）发起Notification</li></p>
<h4 id="代码模块："><a href="#代码模块：" class="headerlink" title="代码模块："></a>代码模块：</h4><p>样式：</p>
<h5 id="1-自定义带按钮通知栏-如下样式"><a href="#1-自定义带按钮通知栏-如下样式" class="headerlink" title="1.自定义带按钮通知栏(如下样式)"></a>1.自定义带按钮通知栏(如下样式)</h5><p>正在进行的<br>“正在进行的”通知使用户了解正在运行的后台进程。例如，音乐播放器可以显示正在播放的音乐。也可以用来显示需要长时间处理的操作，例如下载或编码视频。“正在进行的”通知不能被手动删除。<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/notifications_pattern_ongoing_music.png"></p>
<p>实现方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showButtonNotify</span><span class="params">()</span></span>&#123;</div><div class="line">     NotificationCompat.Builder mBuilder = <span class="keyword">new</span> Builder(<span class="keyword">this</span>);</div><div class="line">     RemoteViews mRemoteViews = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.view_custom_button);</div><div class="line">     mRemoteViews.setImageViewResource(R.id.custom_song_icon, R.drawable.sing_icon);</div><div class="line">     <span class="comment">//API3.0 以上的时候显示按钮，否则消失</span></div><div class="line">     mRemoteViews.setTextViewText(R.id.tv_custom_song_singer, <span class="string">"周杰伦"</span>);</div><div class="line">     mRemoteViews.setTextViewText(R.id.tv_custom_song_name, <span class="string">"七里香"</span>);</div><div class="line">     <span class="comment">//如果版本号低于（3。0），那么不显示按钮</span></div><div class="line">     <span class="keyword">if</span>(BaseTools.getSystemVersion() &lt;= <span class="number">9</span>)&#123;</div><div class="line">           mRemoteViews.setViewVisibility(R.id.ll_custom_button, View.GONE);</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">           mRemoteViews.setViewVisibility(R.id.ll_custom_button, View.VISIBLE);</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//</span></div><div class="line">     <span class="keyword">if</span>(isPlay)&#123;</div><div class="line">           mRemoteViews.setImageViewResource(R.id.btn_custom_play, R.drawable.btn_pause);</div><div class="line">     &#125;<span class="keyword">else</span>&#123;</div><div class="line">           mRemoteViews.setImageViewResource(R.id.btn_custom_play, R.drawable.btn_play);</div><div class="line">     &#125;</div><div class="line">     <span class="comment">//点击的事件处理</span></div><div class="line">     Intent buttonIntent = <span class="keyword">new</span> Intent(ACTION_BUTTON);</div><div class="line">     <span class="comment">/* 上一首按钮 */</span></div><div class="line">     buttonIntent.putExtra(INTENT_BUTTONID_TAG, BUTTON_PREV_ID);</div><div class="line">     <span class="comment">//这里加了广播，所及INTENT的必须用getBroadcast方法</span></div><div class="line">     PendingIntent intent_prev = PendingIntent.getBroadcast(<span class="keyword">this</span>, <span class="number">1</span>, buttonIntent, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line">     mRemoteViews.setOnClickPendingIntent(R.id.btn_custom_prev, intent_prev);</div><div class="line">     <span class="comment">/* 播放/暂停  按钮 */</span></div><div class="line">     buttonIntent.putExtra(INTENT_BUTTONID_TAG, BUTTON_PALY_ID);</div><div class="line">     PendingIntent intent_paly = PendingIntent.getBroadcast(<span class="keyword">this</span>, <span class="number">2</span>, buttonIntent, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line">     mRemoteViews.setOnClickPendingIntent(R.id.btn_custom_play, intent_paly);</div><div class="line">     <span class="comment">/* 下一首 按钮  */</span></div><div class="line">     buttonIntent.putExtra(INTENT_BUTTONID_TAG, BUTTON_NEXT_ID);</div><div class="line">     PendingIntent intent_next = PendingIntent.getBroadcast(<span class="keyword">this</span>, <span class="number">3</span>, buttonIntent, PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line">     mRemoteViews.setOnClickPendingIntent(R.id.btn_custom_next, intent_next);</div><div class="line"> </div><div class="line">     mBuilder.setContent(mRemoteViews)</div><div class="line">             .setContentIntent(getDefalutIntent(Notification.FLAG_ONGOING_EVENT))</div><div class="line">             .setWhen(System.currentTimeMillis())<span class="comment">// 通知产生的时间，会在通知信息里显示</span></div><div class="line">             .setTicker(<span class="string">"正在播放"</span>)</div><div class="line">             .setPriority(Notification.PRIORITY_DEFAULT)<span class="comment">// 设置该通知优先级</span></div><div class="line">             .setOngoing(<span class="keyword">true</span>)</div><div class="line">             .setSmallIcon(R.drawable.sing_icon);</div><div class="line">     Notification notify = mBuilder.build();</div><div class="line">     notify.flags = Notification.FLAG_ONGOING_EVENT;</div><div class="line">     mNotificationManager.notify(notifyId, notify);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：带按钮的布局相应点击事件在3.0以下版本没有用，所以这边作了系统版本判断，来显示消失按钮。</p>
<h5 id="2-自定义不带按钮通知栏"><a href="#2-自定义不带按钮通知栏" class="headerlink" title="2.自定义不带按钮通知栏"></a>2.自定义不带按钮通知栏</h5><p>实现方法如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">//先设定RemoteViews</span></div><div class="line">	RemoteViews view_custom = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.view_custom);</div><div class="line">	<span class="comment">//设置对应IMAGEVIEW的ID的资源图片</span></div><div class="line">	view_custom.setImageViewResource(R.id.custom_icon, R.drawable.icon);</div><div class="line">	<span class="comment">//view_custom.setInt(R.id.custom_icon,"setBackgroundResource",R.drawable.icon);</span></div><div class="line">	view_custom.setTextViewText(R.id.tv_custom_title, <span class="string">"今日头条"</span>);</div><div class="line">	view_custom.setTextViewText(R.id.tv_custom_content, <span class="string">"金州勇士官方宣布球队已经解雇了主帅马克-杰克逊"</span>);</div><div class="line">```	</div><div class="line"></div><div class="line">之后调用：</div><div class="line"></div><div class="line">```java</div><div class="line">	mBuilder.setContent(view_custom)</div></pre></td></tr></table></figure>
<p>来设定自定义的这个布局。</p>
<h5 id="最近遇到的代码例子："><a href="#最近遇到的代码例子：" class="headerlink" title="最近遇到的代码例子："></a>最近遇到的代码例子：</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//final String STATUS_BAR_COVER_CLICK_ACTION="download";</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showNotification</span><span class="params">()</span> </span>&#123;</div><div class="line">       </div><div class="line">        <span class="keyword">final</span> NotificationManager mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div><div class="line">        NotificationCompat.Builder mBuilder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>);</div><div class="line">        <span class="keyword">final</span> RemoteViews mRemoteViews = <span class="keyword">new</span> RemoteViews(getPackageName(), R.layout.layout_notification_custom);</div><div class="line">       </div><div class="line"></div><div class="line"><span class="comment">//        Intent buttonIntent=new Intent(this, SendNewsActivity.class);</span></div><div class="line"><span class="comment">//        buttonIntent.putExtra("key", 1456546);</span></div><div class="line"><span class="comment">//        buttonIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</span></div><div class="line"></div><div class="line">        mBuilder.setContent(mRemoteViews)</div><div class="line">                .setWhen(System.currentTimeMillis())<span class="comment">// 通知产生的时间，会在通知信息里显示</span></div><div class="line">                .setPriority(Notification.PRIORITY_DEFAULT)<span class="comment">// 设置该通知优先级</span></div><div class="line">                .setSmallIcon(R.drawable.myicon).setAutoCancel(<span class="keyword">true</span>);</div><div class="line"></div><div class="line"><span class="comment">//        BroadcastReceiver onClickReceiver = new BroadcastReceiver() &#123;</span></div><div class="line"><span class="comment">//            private boolean flag = false;</span></div><div class="line"><span class="comment">//            @Override</span></div><div class="line"><span class="comment">//            public void onReceive(Context context, Intent intent) &#123;</span></div><div class="line"><span class="comment">//                if (intent.getAction().equals(STATUS_BAR_COVER_CLICK_ACTION)) &#123;</span></div><div class="line"><span class="comment">//                 //在这里处理点击事件</span></div><div class="line"><span class="comment">//                   ToastUtil.show("========wobeidianjile");</span></div><div class="line"><span class="comment">//                 //取消通知栏</span></div><div class="line"><span class="comment">////                    mNotificationManager.cancel(0);</span></div><div class="line"><span class="comment">//                &#125;</span></div><div class="line"><span class="comment">//            &#125;&#125;;</span></div><div class="line"></div><div class="line"><span class="comment">//        IntentFilter filter = new IntentFilter();</span></div><div class="line"><span class="comment">//        filter.addAction(STATUS_BAR_COVER_CLICK_ACTION);</span></div><div class="line"><span class="comment">//        registerReceiver(onClickReceiver, filter);</span></div><div class="line"><span class="comment">//        Intent buttonIntent = new Intent(STATUS_BAR_COVER_CLICK_ACTION);</span></div><div class="line"></div><div class="line">        Intent buttonIntent=<span class="keyword">new</span> Intent();</div><div class="line">        buttonIntent.setAction(Intent.ACTION_VIEW);</div><div class="line">        buttonIntent.setData(Uri.parse(<span class="string">"http://img.zcool.cn/community/01b28d554bcd6e000001bf72eacf96.jpg"</span>));</div><div class="line">        PendingIntent pendingIntent=PendingIntent.getActivity(<span class="keyword">this</span>,<span class="number">0</span>,buttonIntent,PendingIntent.FLAG_UPDATE_CURRENT);</div><div class="line"><span class="comment">//        PendingIntent pendingIntent=PendingIntent.getBroadcast(this, 0, buttonIntent, 0);</span></div><div class="line">        mBuilder.setContentIntent(pendingIntent);</div><div class="line"><span class="comment">//        mRemoteViews.setOnClickPendingIntent(R.id.image,pendingIntent);</span></div><div class="line">        Notification notify = mBuilder.build();</div><div class="line">Picasso.with(<span class="keyword">this</span>).load(bean.getImg()).into(mRemoteViews,R.id.image,<span class="number">0</span>,notify);</div><div class="line">        mNotificationManager.notify(<span class="number">0</span>, notify);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="Android-5-0之后通知栏图标为白色的解决方案："><a href="#Android-5-0之后通知栏图标为白色的解决方案：" class="headerlink" title="Android 5.0之后通知栏图标为白色的解决方案："></a>Android 5.0之后通知栏图标为白色的解决方案：</h4><h5 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h5><p>Android 5.0(API23)针对targetSdkVersion&gt;=21（Build.VERSION_CODES.LOLLIPOP是21，非23 )， 通知栏图标均自动做了过滤处理，为了统一整个系统的风格。 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (entry.icon != <span class="keyword">null</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (entry.targetSdk &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">                entry.icon.setColorFilter(mContext.getResources().getColor(android.R.color.white));</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                entry.icon.setColorFilter(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div></pre></td></tr></table></figure>
<p>目前可行的就是把AndroidManifest.xml uses-sdk节点的targetSdkVersion属性设置为21以下（不含21）。</p>
<h5 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h5><p>在5.0之前的版本用一个图片，在之后的版本用另一张只有白色和透明的颜色，然后再设置一个背景颜色</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (android.os.Build.VERSION.SDK_INT &lt; <span class="number">21</span>) 						</div><div class="line">     nf.icon = R.drawable.ic_launcher; 					</div><div class="line"><span class="keyword">else</span> &#123; 						</div><div class="line">     nf.icon = R.drawable.ic_launcher_notification; 						</div><div class="line">     Class&lt;?&gt; clazz = nf.getClass(); 						</div><div class="line">     Field field = clazz.getDeclaredField(<span class="string">"color"</span>); 						</div><div class="line">     field.setAccessible(<span class="keyword">true</span>); 						</div><div class="line">     field.set(nf, context.getResources().getColor(R.color.red_launcher)); 		</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="知识点示例代码"><a href="#知识点示例代码" class="headerlink" title="知识点示例代码"></a><a href="https://github.com/iosline/Notification" target="_blank" rel="external">知识点示例代码</a></h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android通知详解学习]]></title>
      <url>http://yoursite.com/2016/02/24/Android%E9%80%9A%E7%9F%A5%E8%AF%A6%E8%A7%A3%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<p>Notification状态通知栏：</p>
<h3 id="功能作用"><a href="#功能作用" class="headerlink" title="功能作用"></a>功能作用</h3><ol>
<li>显示接收到短消息、即使消息等信息 （如QQ、微信、新浪、短信）</li>
<li>显示客户端的推送消息（如有新版本发布，广告，推荐新闻等）</li>
<li>显示正在进行的事物（例如：后台运行的程序）（如音乐播放器、版本更新时候的下载进度等）</li>
</ol>
<h3 id="思维导图结构"><a href="#思维导图结构" class="headerlink" title="思维导图结构"></a>思维导图结构</h3><p>Notificaiton — service   – BroadcastReceiver  – Intent（flag、Action等属性应用） —  PendingIntent</p>
<h3 id="联系："><a href="#联系：" class="headerlink" title="联系："></a>联系：</h3><ol>
<li><p>由于service 是在后台运行，所以它意图做什么我们看不到，可以通过Notificaiton 来显示提醒（如音乐的后台播放）。</p>
</li>
<li><p>service服务和BroadcastReceiver广播相结合，在加上Notificaiton 显示（如程序的后台更新）。</p>
</li>
<li><p>Intent作为意图处理，和Notificaiton的点击时间紧密结合在了一起，并且与BroadcastReceiver和service的联系也紧密不可以分割。</p>
</li>
</ol>
<p>（service 在后台之后通过BroadcastReceiver来通知Notificaiton 显示相关东西，在通过Intent完成用户的意图操作）</p>
<h3 id="大体了解"><a href="#大体了解" class="headerlink" title="大体了解"></a>大体了解</h3><p>Notification支持文字内容显示、震动、三色灯、铃声等多种提示形式，在默认情况下，Notification仅显示消息标题、消息内容、送达时间这3项内容。以下就是通知的基本布局。</p>
<h4 id="通知的基本布局："><a href="#通知的基本布局：" class="headerlink" title="通知的基本布局："></a>通知的基本布局：</h4><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/notifications_pattern_anatomy.png"></p>
<h4 id="元素："><a href="#元素：" class="headerlink" title="元素："></a>元素：</h4><ol>
<li><p>标题   Title/Name</p>
</li>
<li><p>大图标  Icon/Photo</p>
</li>
<li><p>内容文字</p>
</li>
<li><p>内容信息   MESSAGE</p>
</li>
<li><p>小图标 Secondary Icon</p>
</li>
<li><p>通知的时间 Timestamp,默认为系统发出通知的时间，也可通过setWhen()来设置</p>
</li>
</ol>
<h3 id="相关分析："><a href="#相关分析：" class="headerlink" title="相关分析："></a>相关分析：</h3><p>状态通知栏主要涉及到2个类：  Notification 和 NotificationManager</p>
<p>Notification为通知信息类，它里面对应了通知栏的各个属性</p>
<p>NotificationManager ：  是状态栏通知的管理类，负责发通知、清除通知等操作。</p>
<p>注意：NotificationManager 是一个系统Service，所以必须通过 getSystemService(NOTIFICATION_SERVICE)方法来获取，方法如下。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NotificationManager mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div></pre></td></tr></table></figure>
<h3 id="使用步骤："><a href="#使用步骤：" class="headerlink" title="使用步骤："></a>使用步骤：</h3><h4 id="流程模块："><a href="#流程模块：" class="headerlink" title="流程模块："></a>流程模块：</h4><p><li>第一步：创建一个通知栏的Builder构造类  （Create a Notification Builder）</li></p>
<p><li>第二步：定义通知栏的Action  （Define the Notification’s Action）</li></p>
<p><li>第三步：设置通知栏点击事件    （Set the Notification’s Click Behavior）</li></p>
<p><li>第四步：通知   （Issue the Notification）</li></p>
<h4 id="代码模块："><a href="#代码模块：" class="headerlink" title="代码模块："></a>代码模块：</h4><p>实现系统默认的通知栏效果：</p>
<p><li>第一步：获取状态通知栏管理：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NotificationManager mNotificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);</div></pre></td></tr></table></figure>
<p><li>第二步：实例化通知栏构造器NotificationCompat.Builder：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NotificationCompat.Builder mBuilder = <span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>);</div></pre></td></tr></table></figure>
<p><li>第三步：对Builder进行配置：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">	mBuilder.setContentTitle(<span class="string">"测试标题"</span>)<span class="comment">//设置通知栏标题</span></div><div class="line">        .setContentText(<span class="string">"测试内容"</span>) <span class="comment">//设置通知栏显示内容</span></div><div class="line">        .setContentIntent(getDefalutIntent(Notification.FLAG_AUTO_CANCEL)) <span class="comment">//设置通知栏点击意图</span></div><div class="line">        <span class="comment">//  .setNumber(number) //设置通知集合的数量</span></div><div class="line">        .setTicker(<span class="string">"测试通知来啦"</span>) <span class="comment">//通知首次出现在通知栏，带上升动画效果的</span></div><div class="line">        .setWhen(System.currentTimeMillis())<span class="comment">//通知产生的时间，会在通知信息里显示，一般是系统获取到的时间</span></div><div class="line">        .setPriority(Notification.PRIORITY_DEFAULT) <span class="comment">//设置该通知优先级</span></div><div class="line">        <span class="comment">//  .setAutoCancel(true)//设置这个标志当用户单击面板就可以让通知将自动取消</span></div><div class="line">        .setOngoing(<span class="keyword">false</span>)<span class="comment">//true，设置他为一个正在进行的通知。他们通常是用来表示一个后台任务,用户积极参与(如播放音乐)或以某种方式正在等待,因此占用设备(如一个文件下载,同步操作,主动网络连接)</span></div><div class="line">        .setDefaults(Notification.DEFAULT_VIBRATE)<span class="comment">//向通知添加声音、闪灯和振动效果的最简单、最一致的方式是使用当前的用户默认设置，使用defaults属性，可以组合</span></div><div class="line">        <span class="comment">//Notification.DEFAULT_ALL  Notification.DEFAULT_SOUND 添加声音 // requires VIBRATE permission</span></div><div class="line">        .setSmallIcon(R.drawable.ic_launcher);<span class="comment">//设置通知小ICON</span></div><div class="line">```        </div><div class="line">        </div><div class="line">&lt;li&gt;第四步：设置通知栏PendingIntent（点击动作事件等都包含在这里）</div><div class="line"></div><div class="line">```java</div><div class="line">	mBuilder.setContentIntent(PendingIntent intent)</div></pre></td></tr></table></figure>
<p>PendingIntent和Intent略有不同，它可以设置执行次数，主要用于远程服务通信、闹铃、通知、启动器、短信中，在一般情况下用的比较少。</p>
<p>相关属性和方法</p>
<p>属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">PendingIntent的位标识符：</div><div class="line">FLAG_ONE_SHOT   表示返回的PendingIntent仅能执行一次，执行完后自动取消</div><div class="line">FLAG_NO_CREATE     表示如果描述的PendingIntent不存在，并不创建相应的PendingIntent，而是返回NULL</div><div class="line">FLAG_CANCEL_CURRENT      表示相应的PendingIntent已经存在，则取消前者，然后创建新的PendingIntent，这个有利于数据保持为最新的，可以用于即时通信的通信场景</div><div class="line">FLAG_UPDATE_CURRENT     表示更新的PendingIntent</div></pre></td></tr></table></figure>
<p>方法：<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/20140511193432625.jpg"><br>可以看出，它支持多种相应方式，有Activity、Broadcast、Service，就根据你自身需求去选择。</p>
<p>在各种情况下情况下它还会根据各种情况出发效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">	contentIntent：在通知窗口区域，Notification被单击时的响应事件由该intent触发；</div><div class="line">	deleteIntent：当用户点击全部清除按钮时，响应该清除事件的Intent；</div><div class="line">	fullScreenIntent：响应紧急状态的全屏事件（例如来电事件），也就是说通知来的时候，跳过在通知区域点击通知这一步，直接执行fullScreenIntent代表的事件。</div><div class="line">例如：在执行了点击通知之后要跳转到指定的XXX的Activity的时候，可以设置以下方法来相应点击事件：</div><div class="line"></div><div class="line">	Intent intent = <span class="keyword">new</span> Intent(context,XXX.class);</div><div class="line">	PendingIntent pendingIntent = PendingIntent.getActivity(context, <span class="number">0</span>, intent, <span class="number">0</span>);</div><div class="line">	mBuilder.setContentIntent(pendingIntent)</div></pre></td></tr></table></figure>
<p>例如：在执行了清空全部的通知操作时候，可以设置以下方法来相应这个事件：</p>
<p>采用setDeleteIntent(PendingIntent intent)方法或按照以下写法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent deleteIntent = <span class="keyword">new</span> Intent();</div><div class="line">deleteIntent.setClass(context, XXXReceiver.class);</div><div class="line">deleteIntent.setAction(DELETE_ACTION);</div><div class="line">notification.deleteIntent = PendingIntent.getBroadcast(context, <span class="number">0</span>, deleteIntent, <span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>例如：在响应紧急事件（如来电）时候，可以设置以下方法来相应这个事件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setFullScreenIntent(PendingIntent intent, <span class="keyword">boolean</span> highPriority)</div></pre></td></tr></table></figure>
<p><li>第五步，最简单的一部，发送通知请求</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mNotificationManager.notify(notifyId, mBuilder.build());</div></pre></td></tr></table></figure>
<h4 id="对应的各个方法的属性（部分方法以上代码中已经作注释，就不再介绍）："><a href="#对应的各个方法的属性（部分方法以上代码中已经作注释，就不再介绍）：" class="headerlink" title="对应的各个方法的属性（部分方法以上代码中已经作注释，就不再介绍）："></a>对应的各个方法的属性（部分方法以上代码中已经作注释，就不再介绍）：</h4><p>#####（1）方法：设置提醒标志符Flags<br>功能：提醒标志符，向通知添加声音、闪灯和振动效果等设置达到通知提醒效果，可以组合多个属性</p>
<p>有2种设置方法：</p>
<p>1.实例化通知栏之后通过给他添加.flags属性赋值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Notification notification = mBuilder.build();</div><div class="line">notification.flags = Notification.FLAG_AUTO_CANCEL;</div></pre></td></tr></table></figure>
<p>2.通过setContentIntent(PendingIntent intent)方法中的意图设置对应的flags</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> PendingIntent <span class="title">getDefalutIntent</span><span class="params">(<span class="keyword">int</span> flags)</span></span>&#123;</div><div class="line">      PendingIntent pendingIntent= PendingIntent.getActivity(<span class="keyword">this</span>, <span class="number">1</span>, <span class="keyword">new</span> Intent(), flags);</div><div class="line">      <span class="keyword">return</span> pendingIntent;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>提醒标志符成员：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Notification.FLAG_SHOW_LIGHTS              <span class="comment">//三色灯提醒，在使用三色灯提醒时候必须加该标志符</span></div><div class="line">Notification.FLAG_ONGOING_EVENT          <span class="comment">//发起正在运行事件（活动中）</span></div><div class="line">Notification.FLAG_INSISTENT   <span class="comment">//让声音、振动无限循环，直到用户响应 （取消或者打开）</span></div><div class="line">Notification.FLAG_ONLY_ALERT_ONCE  <span class="comment">//发起Notification后，铃声和震动均只执行一次</span></div><div class="line">Notification.FLAG_AUTO_CANCEL      <span class="comment">//用户单击通知后自动消失</span></div><div class="line">Notification.FLAG_NO_CLEAR          <span class="comment">//只有全部清除时，Notification才会清除 ，不清楚该通知(QQ的通知无法清除，就是用的这个)</span></div><div class="line">Notification.FLAG_FOREGROUND_SERVICE    <span class="comment">//表示正在运行的服务</span></div></pre></td></tr></table></figure>
<p>#####（2）方法：.setDefaults(int defaults)     （NotificationCompat.Builder中的方法，用于提示）</p>
<p>功能：向通知添加声音、闪灯和振动效果的最简单、使用默认（defaults）属性，可以组合多个属性（和方法1中提示效果一样的）<br>对应属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Notification.DEFAULT_VIBRATE    <span class="comment">//添加默认震动提醒  需要 VIBRATE permission</span></div><div class="line">Notification.DEFAULT_SOUND    <span class="comment">// 添加默认声音提醒</span></div><div class="line">Notification.DEFAULT_LIGHTS<span class="comment">// 添加默认三色灯提醒</span></div><div class="line">Notification.DEFAULT_ALL<span class="comment">// 添加默认以上3种全部提醒</span></div></pre></td></tr></table></figure>
<p>#####（3）方法：setVibrate(long[] pattern)</p>
<p>功能：设置震动方式。<br>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mBuilder.setVibrate(<span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">0</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">700</span>&#125;);</div></pre></td></tr></table></figure>
<p>实现效果：延迟0ms，然后振动300ms，在延迟500ms，接着在振动700ms。</p>
<p>以上方法的还有种写法是</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mBuilder.build().vibrate = <span class="keyword">new</span> <span class="keyword">long</span>[] &#123;<span class="number">0</span>,<span class="number">300</span>,<span class="number">500</span>,<span class="number">700</span>&#125;;</div></pre></td></tr></table></figure>
<p>以此类推，2种写法都可以。</p>
<p>如果希望设置默认振动方式，设置了方法（2）中默认为DEFAULT_VIBRATE 即可。</p>
<p>#####（4）方法：.setLights(intledARGB ,intledOnMS ,intledOffMS )</p>
<p>功能：android支持三色灯提醒，这个方法就是设置不同场景下的不同颜色的灯。<br>描述：其中ledARGB 表示灯光颜色、 ledOnMS 亮持续时间、ledOffMS 暗的时间。<br>注意：</p>
<p>1）只有在设置了标志符Flags为Notification.FLAG_SHOW_LIGHTS的时候，才支持三色灯提醒。<br>2）这边的颜色跟设备有关，不是所有的颜色都可以，要看具体设备。<br>使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mBuilder.setLights(<span class="number">0xff0000ff</span>, <span class="number">300</span>, <span class="number">0</span>)</div></pre></td></tr></table></figure>
<p>同理，以下方法也可以设置同样效果：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Notification notify = mBuilder.build();</div><div class="line">notify.flags = Notification.FLAG_SHOW_LIGHTS;</div><div class="line">notify.ledARGB = <span class="number">0xff0000ff</span>;</div><div class="line">notify.ledOnMS = <span class="number">300</span>;</div><div class="line">notify.ledOffMS = <span class="number">300</span>;</div></pre></td></tr></table></figure>
<p>如果希望使用默认的三色灯提醒，设置了方法（2）中默认为DEFAULT_LIGHTS即可。</p>
<p>#####（5）方法：.setSound(Uri sound)</p>
<p>功能：设置默认或则自定义的铃声，来提醒。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取默认铃声</span></div><div class="line">.setDefaults(Notification.DEFAULT_SOUND)</div><div class="line"><span class="comment">//获取自定义铃声</span></div><div class="line">.setSound(Uri.parse(<span class="string">"file:///sdcard/xx/xx.mp3"</span>))</div><div class="line"><span class="comment">//获取Android多媒体库内的铃声</span></div><div class="line">.setSound(Uri.withAppendedPath(Audio.Media.INTERNAL_CONTENT_URI, <span class="string">"5"</span>))</div></pre></td></tr></table></figure>
<p>同理相同效果的另一种设置方法这边就不讲， 和上面的都是一样的。</p>
<p>#####（6）方法：.setPriority(int pri)</p>
<p>功能：设置优先级</p>
<p>对应属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Notification.PRIORITY_DEFAULT</div><div class="line">Notification.PRIORITY_HIGH</div><div class="line">Notification.PRIORITY_LOW</div><div class="line">Notification.PRIORITY_MAX</div><div class="line">Notification.PRIORITY_MIN</div></pre></td></tr></table></figure>
<p>#####（7）方法：setOngoing(boolean ongoing)</p>
<p>功能：设置为ture，表示它为一个正在进行的通知。他们通常是用来表示一个后台任务,用户积极参与(如播放音乐)或以某种方式正在等待,因此占用设备(如一个文件下载,同步操作,主动网络连接)</p>
<p>#####（8）方法：setProgress(int max, int progress,boolean indeterminate)</p>
<p>属性：max:进度条最大数值  、progress:当前进度、indeterminate:表示进度是否不确定，true为不确定，false为确定</p>
<p>功能：设置带进度条的通知，可以在下载中使用</p>
<p>注意：此方法在4.0及以后版本才有用，如果为早期版本：需要自定义通知布局，其中包含ProgressBar视图</p>
<p>使用：如果为确定的进度条：调用setProgress(max, progress, false)来设置通知，在更新进度的时候在此发起通知更新progress，并且在下载完成后要移除进度条，通过调用setProgress(0, 0, false)既可。</p>
<p>如果为不确定（持续活动）的进度条，这是在处理进度无法准确获知时显示活动正在持续，所以调用setProgress(0, 0, true) ，操作结束时，调用setProgress(0, 0, false)并更新通知以移除指示条</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义ViewPager实现无限轮播]]></title>
      <url>http://yoursite.com/2016/02/17/%E8%87%AA%E5%AE%9A%E4%B9%89ViewPager%E5%AE%9E%E7%8E%B0%E6%97%A0%E9%99%90%E8%BD%AE%E6%92%AD/</url>
      <content type="html"><![CDATA[<p>ViewPager实现的轮播图广告自定义视图，如京东首页的广告轮播图效果；<br>既支持自动轮播页面也支持手势滑动切换页面</p>
<a id="more"></a>
<p><b>CustomViewPager.java</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomViewPager</span> <span class="keyword">extends</span> <span class="title">FrameLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">//自动轮播的时间间隔</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">int</span> TIME_INTERVAL = <span class="number">5</span>;</div><div class="line"></div><div class="line">    <span class="comment">//放轮播图片的ImageView 的list</span></div><div class="line">    <span class="keyword">private</span> List&lt;ImageView&gt; imageViewsList;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;LunbotuBean&gt; newsList;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> ViewPager viewPager;</div><div class="line">    <span class="keyword">private</span> TextView title;</div><div class="line">    <span class="keyword">private</span> LinearLayout pointGroup;</div><div class="line">    <span class="comment">//当前轮播页</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> currentItem = <span class="number">0</span>;</div><div class="line">    <span class="comment">//定时任务</span></div><div class="line">    <span class="keyword">private</span> ScheduledExecutorService scheduledExecutorService;</div><div class="line">    <span class="comment">//Handler</span></div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            viewPager.setCurrentItem(currentItem);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, <span class="keyword">null</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>(context, attrs, <span class="number">0</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomViewPager</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyle)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(List&lt;LunbotuBean&gt; newsList, <span class="keyword">boolean</span> isAutoPlay)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.newsList = newsList;</div><div class="line">        initView();</div><div class="line">        initData();</div><div class="line">        <span class="keyword">if</span> (isAutoPlay) &#123;</div><div class="line">            startPlay();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始轮播图切换</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">startPlay</span><span class="params">()</span> </span>&#123;</div><div class="line">        scheduledExecutorService = Executors.newSingleThreadScheduledExecutor();</div><div class="line">        scheduledExecutorService.scheduleAtFixedRate(<span class="keyword">new</span> SlideShowTask(), <span class="number">5</span>, <span class="number">4</span>, TimeUnit.SECONDS);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 停止轮播图切换</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">stopPlay</span><span class="params">()</span> </span>&#123;</div><div class="line">        scheduledExecutorService.shutdown();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDetachedFromWindow</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDetachedFromWindow();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化Views等UI</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">()</span> </span>&#123;</div><div class="line">        imageViewsList = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">        title.setText(newsList.get(<span class="number">0</span>).getTitle());</div><div class="line">       </div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newsList.size(); i++) &#123;</div><div class="line">            ImageView view = <span class="keyword">new</span> ImageView(getContext());</div><div class="line">            <span class="keyword">final</span> LunbotuBean bean = newsList.get(i);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</div><div class="line">            Ion.with(view).placeholder(R.drawable.img_options_wait_list).load(bean.getImage());</div><div class="line">            view.setScaleType(ScaleType.CENTER_CROP);</div><div class="line">            view.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    String[] arr = <span class="keyword">new</span> String[newsList.size() - finalI];</div><div class="line">                    String[] images = <span class="keyword">new</span> String[newsList.size() - finalI];</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; newsList.size(); j++) &#123;</div><div class="line">                        <span class="keyword">if</span> (j &gt;= finalI) &#123;</div><div class="line">                            arr[j - finalI] = newsList.get(j).getId();</div><div class="line">                            images[j - finalI] = newsList.get(j).getImage();</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    NoteActivity_.intent(getContext()).array(arr).titleImages(images).start();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">            imageViewsList.add(view);</div><div class="line"></div><div class="line">            ImageView point = <span class="keyword">new</span> ImageView(getContext());</div><div class="line">            point.setBackgroundResource(R.drawable.point_bg);</div><div class="line">            <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                point.setEnabled(<span class="keyword">true</span>);</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                point.setEnabled(<span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">            LinearLayout.LayoutParams layoutParams = <span class="keyword">new</span> LinearLayout.LayoutParams(LinearLayout.LayoutParams.WRAP_CONTENT, -<span class="number">2</span>);</div><div class="line">            layoutParams.leftMargin = <span class="number">10</span>;</div><div class="line">            pointGroup.addView(point, layoutParams);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        viewPager = (ViewPager) findViewById(R.id.viewPager);</div><div class="line">        viewPager.setFocusable(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">        viewPager.setAdapter(<span class="keyword">new</span> CustomPagerAdapter(imageViewsList));</div><div class="line">        viewPager.setOnPageChangeListener(<span class="keyword">new</span> MyPageChangeListener());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initView</span><span class="params">()</span> </span>&#123;</div><div class="line">        LayoutInflater.from(getContext()).inflate(R.layout.layout_custom_viewpager, <span class="keyword">this</span>, <span class="keyword">true</span>);</div><div class="line">        viewPager = (ViewPager) findViewById(R.id.viewPager);</div><div class="line">        title = (TextView) findViewById(R.id.lunbo_title);</div><div class="line">        pointGroup = (LinearLayout) findViewById(R.id.ll_point_container);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> lastPosition;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * ViewPager的监听器</div><div class="line">     * 当ViewPager中页面的状态发生改变时调用</div><div class="line">     *</div><div class="line">     * <span class="doctag">@author</span> caizhiming</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPageChangeListener</span> <span class="keyword">implements</span> <span class="title">OnPageChangeListener</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">boolean</span> isAutoPlay = <span class="keyword">false</span>;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> arg0)</span> </span>&#123;</div><div class="line">            <span class="keyword">switch</span> (arg0) &#123;</div><div class="line">                <span class="keyword">case</span> <span class="number">1</span>:<span class="comment">// 手势滑动，空闲中</span></div><div class="line">                    isAutoPlay = <span class="keyword">false</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">2</span>:<span class="comment">// 界面切换中</span></div><div class="line">                    isAutoPlay = <span class="keyword">true</span>;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                <span class="keyword">case</span> <span class="number">0</span>:<span class="comment">// 滑动结束，即切换完毕或者加载完毕</span></div><div class="line">                    <span class="comment">// 当前为最后一张，此时从右向左滑，则切换到第一张</span></div><div class="line">                    <span class="keyword">if</span> (viewPager.getCurrentItem() == viewPager.getAdapter().getCount() - <span class="number">1</span> &amp;&amp; !isAutoPlay) &#123;</div><div class="line">                        viewPager.setCurrentItem(<span class="number">0</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="comment">// 当前为第一张，此时从左向右滑，则切换到最后一张</span></div><div class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (viewPager.getCurrentItem() == <span class="number">0</span> &amp;&amp; !isAutoPlay) &#123;</div><div class="line">                        viewPager.setCurrentItem(viewPager.getAdapter().getCount() - <span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> arg0, <span class="keyword">float</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;</div><div class="line">            <span class="comment">// TODO Auto-generated method stub</span></div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</div><div class="line">            title.setText(newsList.get(pos).getTitle());</div><div class="line">            pointGroup.getChildAt(lastPosition).setEnabled(<span class="keyword">false</span>);</div><div class="line">            pointGroup.getChildAt(pos).setEnabled(<span class="keyword">true</span>);</div><div class="line">            lastPosition = pos;</div><div class="line"></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 执行轮播图切换任务</div><div class="line">     *</div><div class="line">     * <span class="doctag">@author</span> caizhiming</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">SlideShowTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">synchronized</span> (viewPager) &#123;</div><div class="line">                currentItem = (currentItem + <span class="number">1</span>) % imageViewsList.size();</div><div class="line">                handler.obtainMessage().sendToTarget();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 销毁ImageView资源，回收内存</div><div class="line">     *</div><div class="line">     * <span class="doctag">@author</span> caizhiming</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">destoryBitmaps</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imageViewsList.size(); i++) &#123;</div><div class="line">            ImageView imageView = imageViewsList.get(i);</div><div class="line">            Drawable drawable = imageView.getDrawable();</div><div class="line">            <span class="keyword">if</span> (drawable != <span class="keyword">null</span>) &#123;</div><div class="line">                <span class="comment">//解除drawable对view的引用</span></div><div class="line">                drawable.setCallback(<span class="keyword">null</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><b>布局文件</b></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v4.view.ViewPager</div><div class="line">        android:id="@+id/viewPager"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="150dp" /&gt;</div><div class="line"></div><div class="line">    &lt;RelativeLayout</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:padding="5dp"&gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id="@+id/lunbo_title"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_toLeftOf="@+id/ll_point_container"</div><div class="line">            android:singleLine="true"</div><div class="line">            android:textColor="@color/black"</div><div class="line">            android:textSize="16sp"</div><div class="line">            /&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:id="@+id/ll_point_container"</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_alignParentRight="true"</div><div class="line">            android:layout_centerVertical="true"</div><div class="line">            android:orientation="horizontal" /&gt;</div><div class="line">    &lt;/RelativeLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p><b>CustomPagerAdapter.java</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomPagerAdapter</span> <span class="keyword">extends</span> <span class="title">PagerAdapter</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> List&lt;ImageView&gt; imageViewList;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomPagerAdapter</span><span class="params">(List&lt;ImageView&gt; imageViewsList)</span></span>&#123;</div><div class="line">       <span class="keyword">this</span>.imageViewList=imageViewsList;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroyItem</span><span class="params">(View container, <span class="keyword">int</span> position, Object object)</span> </span>&#123;</div><div class="line">        ((ViewPager)container).removeView(imageViewList.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isViewFromObject</span><span class="params">(View view, Object object)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> view == object;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">instantiateItem</span><span class="params">(View container, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        ((ViewPager)container).addView(imageViewList.get(position));</div><div class="line">        <span class="keyword">return</span> imageViewList.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> imageViewList.size();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[EventBus使用详解]]></title>
      <url>http://yoursite.com/2016/02/16/EventBus%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>EventBus是一款针对Android优化的发布/订阅事件总线。</p>
<p>主要功能是替代Intent、Handler、BroadCast在Fragment、Activity、Service、线程之间传递消息。</p>
<p>优点是，开销小，代码更优雅，以及将发送者和接受者解耦。</p>
<p>作为一个消息总线，有三个主要的元素：</p>
<p><li>Event：事件</li></p>
<pre><code>Event 可以是任意类型的对象
</code></pre><p><li>Subscriber:事件订阅者，接收特定的事件</li></p>
<p>   在EventBus中，使用约定来指定事件订阅者以简化使用。即所有事件订阅都都是以onEvent开头的函数，具体来说，函数的名字是onEvent，onEventMainThread，onEventBackgroundThread，onEventAsync这四个，这个和ThreadMode有关</p>
<p><li>Publisher:事件发布者，用于通知Subscriber有事件发生</li></p>
<p>可以在任意线程任意位置发送事件，直接调用EventBus的<code>post(Object)</code>方法，可以自己实例化EventBus对象，但一般使用默认的单例就好了：<code>EventBus.getDefault()</code>，根据post函数参数的类型，会自动调用订阅相应类型事件的函数。</p>
<p><li>ThreadMode</li></p>
<p>前面说了，Subscriber函数的名字只能是那4个，因为每个事件订阅函数都是和一个<code>ThreadMode</code>相关联的，ThreadMode指定了会调用的函数。有以下四个ThreadMode：</p>
<ul><li>PostThread：事件的处理在和事件的发送在相同的进程，所以事件处理时间不应太长，不然影响事件的发送线程，而这个线程可能是UI线程。对应的函数名是onEvent。<br><br></li><li>MainThread: 事件的处理会在UI线程中执行。事件处理时间不能太长，这个不用说的，长了会ANR的，对应的函数名是onEventMainThread。<br><br></li><li>BackgroundThread：事件的处理会在一个后台线程中执行，对应的函数名是onEventBackgroundThread，虽然名字是BackgroundThread，事件处理是在后台线程，但事件处理时间还是不应该太长，因为如果发送事件的线程是后台线程，会直接执行事件，如果当前线程是UI线程，事件会被加到一个队列中，由一个线程依次处理这些事件，如果某个事件处理时间太长，会阻塞后面的事件的派发或处理。<br><br></li><li>Async：事件处理会在单独的线程中执行，主要用于在后台线程中执行耗时操作，每个事件会开启一个线程（有线程池），但最好限制线程的数目。</li></ul>

<p>根据事件订阅都函数名称的不同，会使用不同的ThreadMode，比如果在后台线程加载了数据想在UI线程显示，订阅者只需把函数命名为onEventMainThread。</p>
<h3 id="二、基本使用"><a href="#二、基本使用" class="headerlink" title="二、基本使用"></a>二、基本使用</h3><p>导入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'de.greenrobot:eventbus:2.4.0'</span></div></pre></td></tr></table></figure>
<p>使用方法：</p>
<p>在EventBus中，获取实例的方法一般是采用EventBus.getInstance()来获取默认的EventBus实例</p>
<p>①.定义事件类型：<br><code>public class MyEvent {}</code></p>
<p>②.定义事件处理方法：<br><code>public void onEventMainThread</code></p>
<p>③.注册订阅者：<br><code>EventBus.getDefault().register(this)</code></p>
<p>③.解除注册订阅者：<br><code>EventBus.getDefault().unregister(this)</code></p>
<p>④.发送事件：<br><code>EventBus.getDefault().post(new MyEvent())</code></p>
<p>注册/解除订阅者，是在对事件进行处理的Activity或者Fragment等的onCreate()、onDestoty()中进行的。<br>发送事件的页面中不用注册。</p>
<h3 id="三、实战"><a href="#三、实战" class="headerlink" title="三、实战"></a>三、实战</h3><p>现在我们的需求是这样的，两个Fragment组成主界面，左边的Fragment是个目录、即列表，右边的Fragment是详细信息面板；</p>
<p>a、目录的列表是从网络获取的。</p>
<p>b、当点击目录上的条目时，动态更新详细信息面板；</p>
<p>效果图：</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/greendao.gif"></p>
<p>有了这个需求，我们传统的做法是：</p>
<p>a、目录Fragment在onCreate中去开启线程去访问网络获取数据，获取完成以后，通过handler去更新界面。</p>
<p>b、在目录的Fragment中提供一个接口，然后详细信息面板去注册这个接口，当发生点击时，去回调这个接口，让详细信息面板发生改变。</p>
<p>这种做法不错的，但是有了EventBus之后，我们有….</p>
<h4 id="1-MainActivity及其布局"><a href="#1-MainActivity及其布局" class="headerlink" title="1.MainActivity及其布局"></a>1.MainActivity及其布局</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        setContentView(R.layout.activity_main);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>布局</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"  </div><div class="line">    xmlns:tools="http://schemas.android.com/tools"  </div><div class="line">    android:layout_width="match_parent"  </div><div class="line">    android:layout_height="match_parent"  </div><div class="line">    android:baselineAligned="false"  </div><div class="line">    android:divider="?android:attr/dividerHorizontal"  </div><div class="line">    android:orientation="horizontal"  </div><div class="line">    android:showDividers="middle" &gt;  </div><div class="line">  </div><div class="line">    &lt;fragment  </div><div class="line">        android:id="@+id/item_list"  </div><div class="line">        android:name="com.angeldevil.eventbusdemo.ItemListFragment"  </div><div class="line">        android:layout_width="0dip"  </div><div class="line">        android:layout_height="match_parent"  </div><div class="line">        android:layout_weight="1" /&gt;  </div><div class="line">  </div><div class="line">    &lt;fragment  </div><div class="line">        android:id="@+id/item_detail_container"  </div><div class="line">        android:name="com.angeldevil.eventbusdemo.ItemDetailFragment"  </div><div class="line">        android:layout_width="0dip"  </div><div class="line">        android:layout_height="match_parent"  </div><div class="line">        android:layout_weight="2" /&gt;  </div><div class="line">  </div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>可以看到，我们MainActvity可以说没有一行代码，布局文件即两个Fragment组成；</p>
<h4 id="2-ItemListFragment"><a href="#2-ItemListFragment" class="headerlink" title="2.ItemListFragment"></a>2.ItemListFragment</h4><p>首先看个实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Item</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="keyword">public</span> String id;  </div><div class="line">    <span class="keyword">public</span> String content;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> List&lt;Item&gt; ITEMS = <span class="keyword">new</span> ArrayList&lt;Item&gt;();  </div><div class="line">    <span class="keyword">static</span>  </div><div class="line">    &#123;  </div><div class="line">        <span class="comment">// Add 6 sample items.  </span></div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"1"</span>, <span class="string">"Item 1"</span>));  </div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"2"</span>, <span class="string">"Item 2"</span>));  </div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"3"</span>, <span class="string">"Item 3"</span>));  </div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"4"</span>, <span class="string">"Item 4"</span>));  </div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"5"</span>, <span class="string">"Item 5"</span>));  </div><div class="line">        addItem(<span class="keyword">new</span> Item(<span class="string">"6"</span>, <span class="string">"Item 6"</span>));  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">addItem</span><span class="params">(Item item)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        ITEMS.add(item);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Item</span><span class="params">(String id, String content)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">this</span>.id = id;  </div><div class="line">        <span class="keyword">this</span>.content = content;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">return</span> content;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其次，ItemListFragment</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemListFragment</span> <span class="keyword">extends</span> <span class="title">ListFragment</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        <span class="comment">// Register  </span></div><div class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        <span class="comment">// Unregister  </span></div><div class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onViewCreated</span><span class="params">(View view, Bundle savedInstanceState)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onViewCreated(view, savedInstanceState);  </div><div class="line">        <span class="comment">// 开启线程加载列表  </span></div><div class="line">        <span class="keyword">new</span> Thread()  </div><div class="line">        &#123;  </div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span>  </span></div><div class="line">            &#123;  </div><div class="line">                <span class="keyword">try</span>  </div><div class="line">                &#123;  </div><div class="line">                    Thread.sleep(<span class="number">2000</span>); <span class="comment">// 模拟延时  </span></div><div class="line">                    <span class="comment">// 发布事件，在后台线程发的事件  </span></div><div class="line">                    EventBus.getDefault().post(<span class="keyword">new</span> ItemListEvent(Item.ITEMS));  </div><div class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e)  </div><div class="line">                &#123;  </div><div class="line">                    e.printStackTrace();  </div><div class="line">                &#125;  </div><div class="line">            &#125;;  </div><div class="line">        &#125;.start();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(ItemListEvent event)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        setListAdapter(<span class="keyword">new</span> ArrayAdapter&lt;Item&gt;(getActivity(),  </div><div class="line">                android.R.layout.simple_list_item_activated_1,  </div><div class="line">                android.R.id.text1, event.getItems()));  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onListItemClick</span><span class="params">(ListView listView, View view, <span class="keyword">int</span> position,  </span></span></div><div class="line">            <span class="keyword">long</span> id)  </div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onListItemClick(listView, view, position, id);  </div><div class="line">        EventBus.getDefault().post(getListView().getItemAtPosition(position));  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ItemListFragment里面在onCreate里面进行了事件的订阅，onDestroy里面进行了事件的取消；onViewCreated中我们模拟了一个子线程去网络加载数据，获取成功后我们调用<br>了EventBus.getDefault().post(new ItemListEvent(Item.ITEMS));发布了一个事件；</p>
<p>onListItemClick则是ListView的点击事件，我们调用了EventBus.getDefault().post(getListView().getItemAtPosition(position));去发布一个事件，</p>
<p>getListView().getItemAtPosition(position)的类型为Item类型；</p>
<p>细心的你一定发现了一些诡异的事，直接new Thread()获取到数据以后，竟然没有使用handler；我们界面竟然发生了变化，那么List是何时绑定的数据？</p>
<p>仔细看下代码，发现这个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(ItemListEvent event)</span></span></div><div class="line">	&#123;</div><div class="line">		setListAdapter(<span class="keyword">new</span> ArrayAdapter&lt;Item&gt;(getActivity(),</div><div class="line">				android.R.layout.simple_list_item_activated_1,</div><div class="line">				android.R.id.text1, event.getItems()));</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>应该是这个方法为List绑定的数据。那么这个方法是怎么被调用的呢？<br>现在就可以细谈订阅事件与发布事件了：</p>
<p>如果方法名以onEvent开头，则代表要订阅一个事件，MainThread意思，这个方法最终要在UI线程执行；当事件发布的时候，这个方法就会被执行。<br>那么这个事件什么时候发布呢？</p>
<p>我们的onEventMainThread触发时机应该在new Thread()执行完成之后，可以看到子线程执行完成之后，执行了EventBus.getDefault().post(new ItemListEvent(Item.ITEMS));</p>
<p>意味着发布了一个事件，当这个事件发布，我们的onEventMainThread就执行了，那么二者的关联关系是什么呢？</p>
<p>其实和参数的类型，我们onEventMainThread需要接收一个ItemListEvent ，我们也发布了一个ItemListEvent的实例。</p>
<p>现在我们完整的理一下：</p>
<p>在onCreate里面执行    EventBus.getDefault().register(this);意思是让EventBus扫描当前类，把所有onEvent开头的方法记录下来，如何记录呢？使用Map，Key为方法的参数类型，Value中包含我们的方法。<br>这样在onCreate执行完成以后，我们的onEventMainThread就已经以键值对的方式被存储到EventBus中了。</p>
<p>然后当子线程执行完毕，调用EventBus.getDefault().post(new ItemListEvent(Item.ITEMS))时，EventBus会根据post中实参的类型，去Map中查找对于的方法，于是找到了我们的onEventMainThread，最终调用反射去执行我们的方法。</p>
<p>现在应该明白了，整个运行的流程了；那么没有接口却能发生回调应该也能解释了。</p>
<p>现在我们在看看代码，当Item点击的时候EventBus.getDefault().post(getListView().getItemAtPosition(position));我们同样发布了一个事件，参数为Item；这个事件是为了让详细信息的Fragment去更新数据，不用说，按照上面的推测，详细信息的Fragment里面一个有个这样的方法：    public void onEventMainThread(Item item) ； 是不是呢？我们去看看。</p>
<h4 id="3-ItemDetailFragment"><a href="#3-ItemDetailFragment" class="headerlink" title="3.ItemDetailFragment"></a>3.ItemDetailFragment</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDetailFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span>  </span></div><div class="line">&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> TextView tvDetail;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </div><div class="line">        <span class="comment">// register  </span></div><div class="line">        EventBus.getDefault().register(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">super</span>.onDestroy();  </div><div class="line">        <span class="comment">// Unregister  </span></div><div class="line">        EventBus.getDefault().unregister(<span class="keyword">this</span>);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">/** List点击时会发送些事件，接收到事件后更新详情 */</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onEventMainThread</span><span class="params">(Item item)</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">if</span> (item != <span class="keyword">null</span>)  </div><div class="line">            tvDetail.setText(item.content);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container,  </span></span></div><div class="line">            Bundle savedInstanceState)  </div><div class="line">    &#123;  </div><div class="line">        View rootView = inflater.inflate(R.layout.fragment_item_detail,  </div><div class="line">                container, <span class="keyword">false</span>);  </div><div class="line">        tvDetail = (TextView) rootView.findViewById(R.id.item_detail);  </div><div class="line">        <span class="keyword">return</span> rootView;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>果然不出我们的所料，真的存在onEventMainThread(Item item)的方法。当然了，必须在onCreate里面首先书写EventBus.getDefault().register(this);让EventBus扫描再说。</p>
<p>那么这个Fragment的流程就是：onCreate时，EventBus扫描当前类，将onEventMainThread以键值对的形式进行存储，键为Item.class ，值为包含该方法的对象。</p>
<p>然后当ItemListFragment中Item被点击时，发布了一个事件：EventBus.getDefault().post(getListView().getItemAtPosition(position));实参的类型恰好是Item，于是触发我们的<br>onEventMainThread方法，并把Item实参传递进来，我们更新控件。</p>
<h4 id="4-Event"><a href="#4-Event" class="headerlink" title="4.Event"></a>4.Event</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Event</span>  </span></div><div class="line">&#123;  </div><div class="line">    <span class="comment">/** 列表加载事件 */</span>  </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemListEvent</span>  </span></div><div class="line">    &#123;  </div><div class="line">        <span class="keyword">private</span> List&lt;Item&gt; items;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ItemListEvent</span><span class="params">(List&lt;Item&gt; items)</span>  </span></div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">this</span>.items = items;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="function"><span class="keyword">public</span> List&lt;Item&gt; <span class="title">getItems</span><span class="params">()</span>  </span></div><div class="line">        &#123;  </div><div class="line">            <span class="keyword">return</span> items;  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个Event 可以是任意类型 可以是个类，还可以是个枚举等，只要参数不同，针对参数的事件做相应的处理。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Listview列表中视频的播放与暂停及之间的牵制]]></title>
      <url>http://yoursite.com/2016/01/18/Android-Listview%E5%88%97%E8%A1%A8%E4%B8%AD%E8%A7%86%E9%A2%91%E7%9A%84%E6%92%AD%E6%94%BE%E4%B8%8E%E6%9A%82%E5%81%9C%E5%8F%8A%E4%B9%8B%E9%97%B4%E7%9A%84%E7%89%B5%E5%88%B6/</url>
      <content type="html"><![CDATA[<p>实现的效果：</p>
<p>   在列表中播放视频，同时播放这个视频的同时，打开列表中另一个视频，当前视频停止播放,控制视频的进度。</p>
<p>实现方式：</p>
<p>   android原生的videoview及系统的mediaControll，自带的进度条会在当前页面的下方，不能达到我们每个视频一个进度条的效果， 还有进度条位置的效果。</p>
<p>解决：</p>
<p>  自定义视频播放组件，就是将videoview和seekbar整合到一个组件中，自己控制进度，不使用系统的mediaControll。</p>
<p>思路：</p>
<p> 检查 定时器任务是否继续进行，定时器任务（videoview播放进度 控制seekbar的进度），定时器任务关掉，否则会一直进行，退出的时候会崩溃</p>
<p>没写完，回来了解透彻之后在写。</p>
<p>具体代码见：<a href="https://github.com/iosline/videoplayer" target="_blank" rel="external">源码地址</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中WebView使用之二（JavaScript代码使用）]]></title>
      <url>http://yoursite.com/2015/12/17/Android%E4%B8%ADWebView%E4%BD%BF%E7%94%A8%E4%B9%8B%E4%BA%8C%EF%BC%88JavaScript%E4%BB%A3%E7%A0%81%E4%BD%BF%E7%94%A8%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="本文主要讲的是-JS代码与Android代码的互相调用"><a href="#本文主要讲的是-JS代码与Android代码的互相调用" class="headerlink" title="本文主要讲的是 JS代码与Android代码的互相调用"></a>本文主要讲的是 JS代码与Android代码的互相调用</h3><h4 id="一、在WebView中使用JavaScript"><a href="#一、在WebView中使用JavaScript" class="headerlink" title="一、在WebView中使用JavaScript"></a>一、在WebView中使用JavaScript</h4><p>如果你想要载入的页面中用了JavaScript，你必须为你的WebView使用JavaScript。</p>
<p>一旦使用之后，你也可以自己创建接口在你的应用和JavaScript代码间进行交互。</p>
<h5 id="前情提要：使用JavaScript"><a href="#前情提要：使用JavaScript" class="headerlink" title="前情提要：使用JavaScript"></a>前情提要：使用JavaScript</h5><p>上一篇文章已经说过，可以通过getSettings()获得WebSettings，然后用setJavaScriptEnabled()使能JavaScript：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class="line">WebSettings webSettings = myWebView.getSettings();</div><div class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<h5 id="绑定JavaScript与Android代码"><a href="#绑定JavaScript与Android代码" class="headerlink" title="绑定JavaScript与Android代码"></a>绑定JavaScript与Android代码</h5><p>当你为你的Android应用中的WebView专门开发一个网页应用时，你可以创建你的JavaScript代码和你的客户端的Android代码之间的接口。</p>
<p>比如，你可以用JavaScript代码调用Android代码中的方法，来展现一个对话框之类，而不是使用alert()方法（JS中的对话框方法）。</p>
<p>在JS和Android代码间绑定一个新的接口，需要调用 addJavascriptInterface()方法。</p>
<p>方法参数传入一个Java对象实例和一个字符串，该字符串是一个名字（interface name，注意此接口不是通常所说的那个用来实现的接口，而是传入的这个对象在JS中的别名），在JS代码中用此名字调用该Java对象的方法。</p>
<p>注意这个方法可以让JS代码控制宿主程序，这是一个非常有力的特性，但是同时也存在一些安全问题，因为进一步JS代码可以通过反射访问到注入对象的公有域。攻击者可能会在HTML和JavaScript中包含了有威胁性的代码。</p>
<p>所以Android 4.1，API 17，也就是JELLY_BEAN 开始，只有被JavascriptInterface 注解标识的公有方法可以被JS代码访问。</p>
<p>另外，因为JS代码和Java对象在这个WebView所私有的后台线程交互，所以还需要注意线程安全性问题。</p>
<p>注意，与JS代码绑定的的这个Java对象运行在另一个线程中，与创建它的线程不是一个线程。</p>
<p>注意，这个Java对象的域是不可访问的。</p>
<h5 id="绑定JavaScript与Android代码的例子"><a href="#绑定JavaScript与Android代码的例子" class="headerlink" title="绑定JavaScript与Android代码的例子"></a>绑定JavaScript与Android代码的例子</h5><p>比如可以定义这么一个类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 自定义的Android代码和JavaScript代码之间的桥梁类</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> 1</div><div class="line"> * </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppInterface</span></span></div><div class="line">&#123;</div><div class="line">    Context mContext;</div><div class="line"></div><div class="line">    <span class="comment">/** Instantiate the interface and set the context */</span></div><div class="line">    WebAppInterface(Context c)</div><div class="line">    &#123;</div><div class="line">        mContext = c;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/** Show a toast from the web page */</span></div><div class="line">    <span class="comment">// 如果target 大于等于API 17，则需要加上如下注解</span></div><div class="line">    <span class="comment">// @JavascriptInterface</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showToast</span><span class="params">(String toast)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// Toast.makeText(mContext, toast, Toast.LENGTH_SHORT).show();</span></div><div class="line">        Toast.makeText(mContext, toast, Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后将这个类和你的WebView中的JS代码绑定：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WebView webView = (WebView) findViewById(R.id.webview);</div><div class="line">webView.addJavascriptInterface(<span class="keyword">new</span> WebAppInterface(<span class="keyword">this</span>), <span class="string">"Android"</span>);</div></pre></td></tr></table></figure>
<p>　　给这个对象起的别名叫“Android”。</p>
<p>　　这个就创立了一个接口名，叫“Android”，运行在WebView中的JS代码可以通过这个名字调用WebAppInterface类中的showToast()方法：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;input type="button" value="Say hello" onClick="showAndroidToast('Hello Android!')" /&gt;</div><div class="line"></div><div class="line">&lt;script type="text/javascript"&gt;</div><div class="line">    function showAndroidToast(toast) </div><div class="line">    &#123;</div><div class="line">        Android.showToast(toast);</div><div class="line">    &#125;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h5 id="特别注意：需要设置chrome-handler"><a href="#特别注意：需要设置chrome-handler" class="headerlink" title="特别注意：需要设置chrome handler"></a>特别注意：需要设置chrome handler</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 如果不设置这个，JS代码中的按钮会显示，但是按下去却不弹出对话框</span></div><div class="line">  <span class="comment">// Sets the chrome handler. This is an implementation of WebChromeClient</span></div><div class="line">  <span class="comment">// for use in handling JavaScript dialogs, favicons, titles, and the</span></div><div class="line">  <span class="comment">// progress. This will replace the current handler.</span></div><div class="line">  myWebView.setWebChromeClient(<span class="keyword">new</span> WebChromeClient()</div><div class="line">  &#123;</div><div class="line">	</div><div class="line">      <span class="meta">@Override</span></div><div class="line">      <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onJsAlert</span><span class="params">(WebView view, String url, String message,</span></span></div><div class="line">              JsResult result)</div><div class="line">      &#123;</div><div class="line">          <span class="comment">// TODO Auto-generated method stub</span></div><div class="line">          <span class="keyword">return</span> <span class="keyword">super</span>.onJsAlert(view, url, message, result);</div><div class="line">      &#125;</div><div class="line">	</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h4 id="二、Android-调用JavaScript代码"><a href="#二、Android-调用JavaScript代码" class="headerlink" title="二、Android 调用JavaScript代码"></a>二、Android 调用JavaScript代码</h4><p>这个还比较简单，需要调用的时候只需要一行代码：　　</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myWebView.loadUrl(<span class="string">"javascript:myFunction()"</span>);<span class="comment">//其中myFunction()是JS函数。</span></div></pre></td></tr></table></figure>
<p>　　这里要补充一下，如果JavaScript函数是带参数的，那么调用时要特别注意。</p>
<p>　　比如下面这个JS函数，在原来内容上加入一行：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">    function writeLine(string)</div><div class="line">    &#123;</div><div class="line">        console.log("Write a new Line");//调试信息</div><div class="line">        document.getElementById("content").innerHTML += string + "&lt;br /&gt;";//在content标签段落加入新行</div><div class="line">    &#125;</div><div class="line">```    </div><div class="line">    </div><div class="line">　　注：其中content是自定义的标签，html中有一个段落是：</div><div class="line"></div><div class="line">```java</div><div class="line">    &lt;p id="content"&gt;&lt;/p&gt;</div></pre></td></tr></table></figure>
<p>那么在Android代码中调用这个writeLine()函数时，需要传入一个字符串参数，比如，想要传入一个叫name的String：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myWebView.loadUrl(<span class="string">"javascript:writeLine('"</span>+name+<span class="string">"')"</span>);<span class="comment">//JS代码要是带参数</span></div></pre></td></tr></table></figure>
<p>　　还有就是要注意双引号中的函数名一定不要写错。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android中WebView使用之一（基础用法）]]></title>
      <url>http://yoursite.com/2015/12/17/Android%E4%B8%ADWebView%E4%BD%BF%E7%94%A8%E4%B9%8B%E4%B8%80%EF%BC%88%E5%9F%BA%E7%A1%80%E7%94%A8%E6%B3%95%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="WebView基础使用"><a href="#WebView基础使用" class="headerlink" title="WebView基础使用"></a>WebView基础使用</h3><p>WebView是View的一个子类，可以让你在activity中显示网页。</p>
<a id="more"></a>
<p>　　可以在布局文件中写入WebView：比如下面这个写了一个填满整个屏幕的WebView：　</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">	&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">	&lt;WebView  xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">	    android:id=<span class="string">"@+id/webview"</span></div><div class="line">	    android:layout_width=<span class="string">"fill_parent"</span></div><div class="line">	    android:layout_height=<span class="string">"fill_parent"</span></div><div class="line">	/&gt;</div><div class="line">``` </div><div class="line"></div><div class="line">　　加载一个网页，使用loadUrl()：</div><div class="line"></div><div class="line">```java</div><div class="line">	WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class="line">	myWebView.loadUrl(<span class="string">"http://www.example.com"</span>);</div></pre></td></tr></table></figure>
<h4 id="设置WebView要现实的网页"><a href="#设置WebView要现实的网页" class="headerlink" title="设置WebView要现实的网页"></a>设置WebView要现实的网页</h4><p>设置WevView要显示的网页方法有很多：</p>
<p>　　互联网页面直接用：<br>　　　<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">myWebView.loadUrl(<span class="string">"http://www.google.com"</span>);</div></pre></td></tr></table></figure></p>
<p>   本地文件用：<br>　　<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">	myWebView.loadUrl(<span class="string">"file:///android_asset/XX.html"</span>); </div><div class="line">```	 </div><div class="line">　　本地文件存放在：assets文件中。</div><div class="line"></div><div class="line">　　还可以直接载入html的字符串，如：</div><div class="line"></div><div class="line">```java</div><div class="line">	String htmlString = <span class="string">"&lt;h1&gt;Title&lt;/h1&gt;&lt;p&gt;This is HTML text&lt;br /&gt;&lt;i&gt;Formatted in italics&lt;/i&gt;&lt;br /&gt;Anothor Line&lt;/p&gt;"</span>;</div><div class="line">	<span class="comment">// 载入这个html页面</span></div><div class="line">	myWebView.loadData(htmlString, <span class="string">"text/html"</span>, <span class="string">"utf-8"</span>);</div></pre></td></tr></table></figure></p>
<p>打开页面时， 自适应屏幕：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">WebSettings webSettings =   mWebView .getSettings();       </div><div class="line">webSettings.setUseWideViewPort(<span class="keyword">true</span>);<span class="comment">//设置此属性，可任意比例缩放</span></div><div class="line">webSettings.setLoadWithOverviewMode(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>便页面支持缩放：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">WebSettings webSettings =   mWebView .getSettings();       </div><div class="line">webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);  </div><div class="line">webSettings.setBuiltInZoomControls(<span class="keyword">true</span>);</div><div class="line">webSettings.setSupportZoom(<span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>如果webView中需要用户手动输入用户名、密码或其他，则webview必须设置支持获取手势焦点。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webview.requestFocusFromTouch();</div></pre></td></tr></table></figure>
<h4 id="在WebView中使用JavaScript"><a href="#在WebView中使用JavaScript" class="headerlink" title="在WebView中使用JavaScript"></a>在WebView中使用JavaScript</h4><p>如果你想要载入的页面中用了JavaScript，你必须为你的WebView使用JavaScript。</p>
<p>一旦使用之后，你也可以自己创建接口在你的应用和JavaScript代码间进行交互。</p>
<p>使用JavaScript可以通过getSettings()获得WebSettings，然后用setJavaScriptEnabled()使能JavaScript：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">	WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class="line">	WebSettings webSettings = myWebView.getSettings();</div><div class="line">	webSettings.setJavaScriptEnabled(<span class="keyword">true</span>);</div><div class="line">``` </div><div class="line"></div><div class="line">WebSettings中提供了很多有用的设置。</div><div class="line"></div><div class="line">```<span class="function">java</span></div><div class="line">	<span class="title">setJavaScriptEnabled</span><span class="params">(<span class="keyword">true</span>)</span>;  <span class="comment">//支持js</span></div><div class="line">	</div><div class="line">	setPluginsEnabled(<span class="keyword">true</span>);  <span class="comment">//支持插件 </span></div><div class="line">	</div><div class="line">	setUseWideViewPort(<span class="keyword">false</span>);  <span class="comment">//将图片调整到适合webview的大小 </span></div><div class="line">	</div><div class="line">	setSupportZoom(<span class="keyword">true</span>);  <span class="comment">//支持缩放 </span></div><div class="line">	</div><div class="line">	setLayoutAlgorithm(LayoutAlgorithm.SINGLE_COLUMN); <span class="comment">//支持内容重新布局  </span></div><div class="line">	</div><div class="line">	supportMultipleWindows();  <span class="comment">//多窗口 </span></div><div class="line">	</div><div class="line">	setCacheMode(WebSettings.LOAD_CACHE_ELSE_NETWORK);  <span class="comment">//关闭webview中缓存 </span></div><div class="line">	</div><div class="line">	setAllowFileAccess(<span class="keyword">true</span>);  <span class="comment">//设置可以访问文件 </span></div><div class="line">	</div><div class="line">	setNeedInitialFocus(<span class="keyword">true</span>); <span class="comment">//当webview调用requestFocus时为webview设置节点</span></div><div class="line">	</div><div class="line">	webview webSettings.setBuiltInZoomControls(<span class="keyword">true</span>); <span class="comment">//设置支持缩放 </span></div><div class="line">	</div><div class="line">	setJavaScriptCanOpenWindowsAutomatically(<span class="keyword">true</span>); <span class="comment">//支持通过JS打开新窗口 </span></div><div class="line">	</div><div class="line">	setLoadWithOverviewMode(<span class="keyword">true</span>); <span class="comment">// 缩放至屏幕的大小</span></div><div class="line">	</div><div class="line">	setLoadsImagesAutomatically(<span class="keyword">true</span>);  <span class="comment">//支持自动加载图片</span></div></pre></td></tr></table></figure>
<h4 id="处理页面浏览"><a href="#处理页面浏览" class="headerlink" title="处理页面浏览"></a>处理页面浏览</h4><p>当用户点击了你的WebView中的一个链接，默认的行为是Android启动一个处理URL的应用，通常，默认的浏览器打开并下载目标URL。</p>
<p>但是，你可以在你的WebView中覆盖这一行为，使得连接仍在你的WebView中打开。</p>
<p>之后，根据在WebView中维护的网页浏览历史，你可以允许用户向前或向后浏览他们的网页。</p>
<h5 id="在WebView中打开所有链接"><a href="#在WebView中打开所有链接" class="headerlink" title="在WebView中打开所有链接"></a>在WebView中打开所有链接</h5><p>要打开用户点击的链接，只需要用setWebViewClient()方法向你的WebView提供一个WebViewClient 比如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class="line">myWebView.setWebViewClient(<span class="keyword">new</span> WebViewClient());</div></pre></td></tr></table></figure>
<p>此时就OK了， 就可以在你的WebView中打开链接了。</p>
<h5 id="关于打开链接位置的更多控制"><a href="#关于打开链接位置的更多控制" class="headerlink" title="关于打开链接位置的更多控制"></a>关于打开链接位置的更多控制</h5><p>如果你对在哪里打开链接需要更多的控制，你可以创建自己的类，继承 WebViewClient，然后覆写shouldOverrideUrlLoading() 方法。</p>
<p>　　比如下面这个：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebViewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span></span></div><div class="line">&#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">shouldOverrideUrlLoading</span><span class="params">(WebView view, String url)</span></span></div><div class="line">    &#123;</div><div class="line">	</div><div class="line">	　　　　　　　<span class="keyword">if</span>(Uri.parse(url).getHost().equals(www.example.com))</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">        &#125;</div><div class="line">        Intent intent = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW, Uri.parse(url));</div><div class="line">        startActivity(intent);</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将特定的链接用自己的WebView打开，其他链接用浏览器（intent启动了默认的处理URL的Activity）。</p>
<p>定义完之后把这个类的对象传入setWebViewClient()方法即可。　</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">WebView myWebView = (WebView) findViewById(R.id.webview);</div><div class="line">myWebView.setWebViewClient(<span class="keyword">new</span> MyWebViewClient());</div></pre></td></tr></table></figure>
<h5 id="浏览网页历史回退"><a href="#浏览网页历史回退" class="headerlink" title="浏览网页历史回退"></a>浏览网页历史回退</h5><p>当你的WebView覆写了URL载入的行为，它会自动地对访问过的网页积累一个历史，你可以利用 goBack() 和 goForward()方法在这个历史中前进或后退。</p>
<p>比如说使用后退键进行网页后退：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 按键响应，在WebView中查看网页时，按返回键的时候按浏览历史退回,如果不做此项处理则整个WebView返回退出</div><div class="line"> */</div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// Check if the key event was the Back button and if there's history</span></div><div class="line">    <span class="keyword">if</span> ((keyCode == KeyEvent.KEYCODE_BACK) &amp;&amp; myWebView.canGoBack())</div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 返回键退回</span></div><div class="line">        myWebView.goBack();</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>canGoBack() 方法在网页可以后退时返回true。</p>
<p>类似的，canGoForward()方法可以检查是否有可以前进的历史记录。</p>
<p>如果你不执行这种检查，一旦 goBack() 和 goForward()方法到达历史记录顶端，它们将什么也不做。</p>
<p>如果不加这种设置，在用户按下Back键时，如果是WebView显示网页，则会将WebView作为整体返回。</p>
<h5 id="WebViewClient方法详解"><a href="#WebViewClient方法详解" class="headerlink" title="WebViewClient方法详解"></a>WebViewClient方法详解</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">	doUpdateVisitedHistory(WebView view, String url, boolean isReload)  //(更新历史记录) </div><div class="line">	</div><div class="line">	onFormResubmission(WebView view, Message dontResend, Message resend) //(应用程序重新请求网页数据) </div><div class="line">	</div><div class="line">	onLoadResource(WebView view, String url) // 在加载页面资源时会调用，每一个资源（比如图片）的加载都会调用一次。 </div><div class="line">	</div><div class="line">	onPageStarted(WebView view, String url, Bitmap favicon) //这个事件就是开始载入页面调用的，通常我们可以在这设定一个loading的页面，告诉用户程序在等待网络响应。 </div><div class="line">	</div><div class="line">	onPageFinished(WebView view, String url) //在页面加载结束时调用。同样道理，我们知道一个页面载入完成，于是我们可以关闭loading 条，切换程序动作。 </div><div class="line">	</div><div class="line">	onReceivedError(WebView view, int errorCode, String description, String failingUrl)// (报告错误信息) </div><div class="line">	</div><div class="line">	onReceivedHttpAuthRequest(WebView view, HttpAuthHandler handler, String host,String realm)//（获取返回信息授权请求） </div><div class="line">	 </div><div class="line">	onReceivedSslError(WebView view, SslErrorHandler handler, SslError error) //重写此方法可以让webview处理https请求。</div><div class="line">	 </div><div class="line">	onScaleChanged(WebView view, float oldScale, float newScale) // (WebView发生改变时调用) </div><div class="line">	</div><div class="line">	onUnhandledKeyEvent(WebView view, KeyEvent event) //（Key事件未被加载时调用） </div><div class="line">	</div><div class="line">	shouldOverrideKeyEvent(WebView view, KeyEvent event)//重写此方法才能够处理在浏览器中的按键事件。 </div><div class="line">	</div><div class="line">	shouldOverrideUrlLoading(WebView view, String url) </div><div class="line">	//在点击请求的是链接是才会调用，重写此方法返回true表明点击网页里面的链接还是在当前的webview里跳转，不跳到浏览器那边。这个函数我们可以做很多操作，比如我们读取到某些特殊的URL，于是就可以不打开地址，取消这个操作，进行预先定义的其他操作，这对一个程序是非常必要的。</div><div class="line">```	</div><div class="line"></div><div class="line">#### WebView记录上次访问位置</div><div class="line"></div><div class="line">##### 实现原理</div><div class="line"></div><div class="line">就是用webview.getScrollY记录你当前的webview已经滑动的位置  onPause()</div><div class="line">下次再进入这个页面时，在网页加载完成时调用：webview.scrollTo(int x, int y)方法即可。</div><div class="line"></div><div class="line">##### 实现步骤</div><div class="line">1,用SharedPreferences或者数据库保存当前webview滑动的位置，如果多个页面都要记录访问位置，就需要用</div><div class="line">集合把url和位置都保存起来</div><div class="line"></div><div class="line">```java</div><div class="line">protected void onPause() &#123;</div><div class="line">    super.onPause();</div><div class="line">    PreferencesUtils.putInt(gankItem.getUrl(),mWebView.getScrollY());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>2，获取保存的位置，用webview.scrollTo(int x, int y)定位到上次访问的位置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">webviewClient</span> <span class="keyword">extends</span> <span class="title">WebViewClient</span> </span>&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageStarted</span><span class="params">(WebView view, String url, Bitmap favicon)</span> </span>&#123;</div><div class="line">            <span class="comment">//</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageFinished</span><span class="params">(WebView view, String url)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.onPageFinished(view, url);</div><div class="line">            <span class="comment">//获取保存的位置position</span></div><div class="line">            <span class="keyword">int</span> position = PreferencesUtils.getInt(gankItem.getUrl());</div><div class="line">       mWebView.scrollTo(<span class="number">0</span>,position);;<span class="comment">//webview加载完成后直接定位到上次访问的位置</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="webview-缓存"><a href="#webview-缓存" class="headerlink" title="webview 缓存"></a>webview 缓存</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//有网 就默认的加载网络数据  没有 就加载缓存</span></div><div class="line"><span class="keyword">if</span> (NetStatusUtil.isNetworkAvailable(<span class="keyword">this</span>))&#123;</div><div class="line">    webSetting.setCacheMode(WebSettings.LOAD_DEFAULT);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    webSetting.setCacheMode(</div><div class="line">            WebSettings.LOAD_CACHE_ELSE_NETWORK);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[仿QQ好友列表]]></title>
      <url>http://yoursite.com/2015/12/15/%E4%BB%BFQQ%E5%A5%BD%E5%8F%8B%E5%88%97%E8%A1%A8/</url>
      <content type="html"><![CDATA[<p>前段时间，朋友不经意间就说起了那天发生的事，一个ios面试者去他公司面试，让他直接做一个QQ好友列表，那哥们不会，被他彻底的鄙视了一番，马丹，我一听，草，我也不会啊，然后我就默默的记住了，回来去查了下资料写了下。</p>
<h4 id="唉，我太菜了，学无止境啊"><a href="#唉，我太菜了，学无止境啊" class="headerlink" title="唉，我太菜了，学无止境啊"></a>唉，我太菜了，学无止境啊</h4><p>进入正题：</p>
<p>其实就是用到了<b>ExpandableListView</b>这个组件，用法和listview相似。</p>
<h4 id="一、默认图标"><a href="#一、默认图标" class="headerlink" title="一、默认图标"></a>一、默认图标</h4><p>在Activity的布局文件中</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;RelativeLayout </div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    &gt;</div><div class="line"></div><div class="line">    &lt;ExpandableListView</div><div class="line">        android:id="@+id/expanded_list"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        android:divider="@null"</div><div class="line">        android:scrollbars="none"/&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>然后在Activity中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</div><div class="line"></div><div class="line">    ExpandableListView expandablelistview;</div><div class="line">    <span class="comment">//群组名称</span></div><div class="line">    <span class="keyword">private</span> String[] group = <span class="keyword">new</span> String[] &#123; <span class="string">"在线好友"</span>, <span class="string">"我的好友"</span>, <span class="string">"我的同事"</span>&#125;;</div><div class="line">    <span class="comment">//好友名称</span></div><div class="line">    <span class="keyword">private</span> String[][] buddy = <span class="keyword">new</span> String[][] &#123;</div><div class="line">            &#123; <span class="string">"元芳"</span>, <span class="string">"雷丶小贱"</span>, <span class="string">"狄大人"</span>&#125;,</div><div class="line">            &#123;<span class="string">"高太后"</span>, <span class="string">"士兵甲"</span>, <span class="string">"士兵乙"</span>, <span class="string">"士兵丙"</span> &#125;,</div><div class="line">            &#123; <span class="string">"艺术家"</span>, <span class="string">"叫兽"</span>, <span class="string">"攻城师"</span>, <span class="string">"职业玩家"</span> &#125;&#125;;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">       </div><div class="line"></div><div class="line">        expandablelistview= (ExpandableListView) findViewById(R.id.expanded_list);</div><div class="line">        ExpandableListAdapter adapter=<span class="keyword">new</span> BuddyAdapter();</div><div class="line">        expandablelistview.setAdapter(adapter);</div><div class="line">        expandablelistview.setOnChildClickListener(<span class="keyword">new</span> ExpandableListView.OnChildClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onChildClick</span><span class="params">(ExpandableListView parent, View v, <span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition, <span class="keyword">long</span> id)</span> </span>&#123;</div><div class="line">                Toast.makeText(MainActivity.<span class="keyword">this</span>,buddy[groupPosition][childPosition].toString(),Toast.LENGTH_SHORT).show();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BuddyAdapter</span> <span class="keyword">extends</span> <span class="title">BaseExpandableListAdapter</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getGroupCount</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> group.length;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getChildrenCount</span><span class="params">(<span class="keyword">int</span> groupPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> buddy[groupPosition].length;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getGroup</span><span class="params">(<span class="keyword">int</span> groupPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> group[groupPosition];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> Object <span class="title">getChild</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> buddy[groupPosition][childPosition];</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getGroupId</span><span class="params">(<span class="keyword">int</span> groupPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> groupPosition;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getChildId</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> childPosition;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasStableIds</span><span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">getGroupView</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">boolean</span> isExpanded, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">            TextView textView = getTextView();<span class="comment">//调用定义的getTextView()方法</span></div><div class="line">            textView.setText(getGroup(groupPosition).toString());<span class="comment">//添加数据</span></div><div class="line">            <span class="keyword">return</span> textView;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> View <span class="title">getChildView</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition, <span class="keyword">boolean</span> isLastChild, View convertView, ViewGroup parent)</span> </span>&#123;</div><div class="line">            LinearLayout ll = <span class="keyword">new</span> LinearLayout(MainActivity.<span class="keyword">this</span>);</div><div class="line">            ll.setOrientation(LinearLayout.HORIZONTAL);<span class="comment">//定义为纵向排列</span></div><div class="line">            ImageView logo = <span class="keyword">new</span> ImageView(MainActivity.<span class="keyword">this</span>);</div><div class="line">            logo.setImageResource(R.mipmap.ic_launcher);<span class="comment">//添加图片</span></div><div class="line">            ll.addView(logo);</div><div class="line">            TextView textView = getTextView();<span class="comment">//调用定义的getTextView()方法</span></div><div class="line">            LinearLayout.LayoutParams params=<span class="keyword">new</span> LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class="line">            params.gravity= Gravity.CENTER;</div><div class="line">            textView.setLayoutParams(params);</div><div class="line">            textView.setText(getChild(groupPosition,childPosition).toString());<span class="comment">//添加数据</span></div><div class="line">            ll.addView(textView);</div><div class="line">            <span class="keyword">return</span> ll;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isChildSelectable</span><span class="params">(<span class="keyword">int</span> groupPosition, <span class="keyword">int</span> childPosition)</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> TextView <span class="title">getTextView</span><span class="params">()</span> </span>&#123;</div><div class="line">        AbsListView.LayoutParams lp = <span class="keyword">new</span> AbsListView.LayoutParams(ViewGroup.LayoutParams.FILL_PARENT,<span class="number">100</span>);</div><div class="line">        TextView textView = <span class="keyword">new</span> TextView(MainActivity.<span class="keyword">this</span>);</div><div class="line">        textView.setLayoutParams(lp);</div><div class="line">        textView.setPadding(<span class="number">100</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">        textView.setTextSize(<span class="number">20</span>);</div><div class="line">        <span class="keyword">return</span> textView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>效果图：<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/仿QQ好友列表.gif"></p>
<h4 id="二、自定义列表图标"><a href="#二、自定义列表图标" class="headerlink" title="二、自定义列表图标"></a>二、自定义列表图标</h4><p><li>1、更改自定义图标</li></p>
<p>在drawable文件夹下新建expandablelistview_change.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version = "1.0"   encoding = "utf-8"?&gt;</div><div class="line">&lt;selector   xmlns:android = "http://schemas.android.com/apk/res/android" &gt;      </div><div class="line">     &lt;item android:state_expanded = "true"   android:drawable = "@drawable/w2"/&gt;      </div><div class="line">     &lt;item android:drawable = "@drawable/w1"/&gt;      </div><div class="line">&lt;/selector &gt;</div></pre></td></tr></table></figure>
<p><li>2.修改布局文件中Expandablelistview的属性等</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;ExpandableListView</div><div class="line">    android:id=<span class="string">"@+id/expanded_list"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:divider=<span class="string">"@null"</span></div><div class="line">    android:scrollbars=<span class="string">"none"</span></div><div class="line">    android:groupIndicator=<span class="string">"@drawable/expandablelistview_change"</span>/&gt;   <span class="comment">//就是添加这个</span></div></pre></td></tr></table></figure>
<p><li>3.如果想让图标放在右边可以这样做：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 得到屏幕的大小</span></div><div class="line">DisplayMetrics dm = <span class="keyword">new</span> DisplayMetrics();</div><div class="line">getWindowManager().getDefaultDisplay().getMetrics(dm);</div><div class="line"><span class="comment">//图标设置在右边</span></div><div class="line">getExpandableListView().setIndicatorBounds(dm.widthPixels-<span class="number">60</span>, dm.widthPixels); <span class="comment">// 设置指示图标的位置</span></div></pre></td></tr></table></figure>
<h4 id="引以为戒"><a href="#引以为戒" class="headerlink" title="引以为戒"></a>引以为戒</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 夜间模式的简单实现]]></title>
      <url>http://yoursite.com/2015/10/31/Android-%E5%A4%9C%E9%97%B4%E6%A8%A1%E5%BC%8F%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      <content type="html"><![CDATA[<p>夜间模式的实现，是关于Theme的设置。在Activity中有一个方法叫setTheme()，可以设置Activity的Theme，当然Application类中也有相同的方法，也可以在Application中设置当前应用的Theme。就好像我们可以在Manifest文件中通过android:theme=“”来设置主题一样。</p>
<p>实现流程：</p>
<h3 id="一、创建属性名"><a href="#一、创建属性名" class="headerlink" title="一、创建属性名"></a>一、创建属性名</h3><p>在<code>res/value</code>目录下新建一个attr文件，并添加两个item，如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;attr name="text_color" format="reference|color" /&gt;</div><div class="line">    &lt;attr name="text_bg_color" format="reference|color" /&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure>
<p>其中text_bg和text_bg_color就是我们定义的两个属性名，后面的format是指的这个属性名的类型，这里我是用reference|color表示既可以是一个引用，也可以是一个argb颜色值。除了这些你还可以选择int，boolan，string等数据类型。</p>
<h3 id="二、定义资源样式"><a href="#二、定义资源样式" class="headerlink" title="二、定义资源样式"></a>二、定义资源样式</h3><p>创建完属性名后就需要创建主题样式了。依旧在res/values/下新建一个xml文件，或者也可以在原style.xml中写，是一样的。 我们需要在这里定义步骤一中定义的各属性名在当前主题下的值。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;style name="Dark" parent="AppTheme"&gt;</div><div class="line">    &lt;item name="text_color"&gt;@color/black_text&lt;/item&gt;</div><div class="line">    &lt;item name="text_bg_color"&gt;@color/white&lt;/item&gt;</div><div class="line">&lt;/style&gt;</div><div class="line"></div><div class="line"> &lt;style name="Light" parent="AppTheme"&gt;</div><div class="line">    &lt;item name="text_color"&gt;@color/black_text&lt;/item&gt;</div><div class="line">    &lt;item name="text_bg_color"&gt;@color/white&lt;/item&gt;    //也可以选择器</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<h3 id="三、布局中使用"><a href="#三、布局中使用" class="headerlink" title="三、布局中使用"></a>三、布局中使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">      android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">      android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">      android:text=<span class="string">"第一"</span></div><div class="line">      android:layout_margin=<span class="string">"5dp"</span></div><div class="line">      android:background=<span class="string">"?text_bg_color"</span>      <span class="comment">//这样使用</span></div><div class="line">      android:textColor=<span class="string">"?text_color"</span></div><div class="line">      android:textSize=<span class="string">"25sp"</span> /&gt;</div></pre></td></tr></table></figure>
<p>因为应用夜间模式的Textview控件很多，抽取为一个样式在引用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;style name="TextStyle"&gt;</div><div class="line">       &lt;item name="android:background"&gt;?text_bg_color&lt;/item&gt;</div><div class="line">       &lt;item name="android:textColor"&gt;?text_color&lt;/item&gt;</div><div class="line">   &lt;/style&gt;</div></pre></td></tr></table></figure>
<p>然后这样使用</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">	 &lt;TextView</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:text="第一"</div><div class="line">        style="@style/TextStyle"</div><div class="line">        android:layout_margin="5dp"</div><div class="line">        android:textSize="25sp" /&gt;</div><div class="line">``` </div><div class="line">       </div><div class="line">### 四、代码中使用</div><div class="line">在要切换夜间模式的Activity使用`setTheme`方法：</div><div class="line"></div><div class="line">```java</div><div class="line">	    /**</div><div class="line">	     * 设置为日间模式</div><div class="line">	     */</div><div class="line">	</div><div class="line">	    public void setLight() &#123;</div><div class="line">	        LLogUtils.i("设置为日间模式");</div><div class="line">	        setTheme(R.style.Light);</div><div class="line">	        CacheUtil.save(IS_NIGHT, false);</div><div class="line">	        super.recreate();</div><div class="line">	    &#125;</div><div class="line">	</div><div class="line">	    /**</div><div class="line">	     * 设置为夜间模式</div><div class="line">	     */</div><div class="line">	    public void setNight() &#123;</div><div class="line">	        LLogUtils.i("设置为夜间模式");</div><div class="line">	        setTheme(R.style.Dark);</div><div class="line">	        CacheUtil.save(IS_NIGHT, true);</div><div class="line">	        super.recreate();</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
<p>效果图：</p>
<p><img src="http://7xniib.com1.z0.glb.clouddn.com/darkandnight.gif"></p>
<p>如果需要在开启Activity的时候根据以前的配置，需要重写Activity中的<code>setContentView</code>方法中调用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContentView</span><span class="params">(<span class="keyword">int</span> layoutResID)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (CacheUtil.getBoolean(IS_NIGHT)) &#123;</div><div class="line">        LLogUtils.i(<span class="string">"设置为夜间模式"</span>);</div><div class="line">        setTheme(R.style.Dark);</div><div class="line">        CacheUtil.save(IS_NIGHT, <span class="keyword">true</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">super</span>.setContentView(layoutResID);</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android如何从系统图库中选择图片]]></title>
      <url>http://yoursite.com/2015/10/29/Android%E5%A6%82%E4%BD%95%E4%BB%8E%E7%B3%BB%E7%BB%9F%E5%9B%BE%E5%BA%93%E4%B8%AD%E9%80%89%E6%8B%A9%E5%9B%BE%E7%89%87/</url>
      <content type="html"><![CDATA[<h4 id="给按钮一个点击事件，重定向到图片库的代码："><a href="#给按钮一个点击事件，重定向到图片库的代码：" class="headerlink" title="给按钮一个点击事件，重定向到图片库的代码："></a>给按钮一个点击事件，重定向到图片库的代码：</h4><a id="more"></a>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Intent i = <span class="keyword">new</span> Intent(</div><div class="line">Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);</div><div class="line">  </div><div class="line">startActivityForResult(i, RESULT_LOAD_IMAGE);</div></pre></td></tr></table></figure>
<p>注意：这里要传一个整形的常量<b>RESULT_LOAD_IMAGE</b>到startActivityForResult()方法。</p>
<h4 id="一旦用户选择了一张图片，onActivityResult-方法将会被调用。我们需要处理这个方法得到的数据，代码如下："><a href="#一旦用户选择了一张图片，onActivityResult-方法将会被调用。我们需要处理这个方法得到的数据，代码如下：" class="headerlink" title="一旦用户选择了一张图片，onActivityResult()方法将会被调用。我们需要处理这个方法得到的数据，代码如下："></a>一旦用户选择了一张图片，onActivityResult()方法将会被调用。我们需要处理这个方法得到的数据，代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onActivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">    <span class="keyword">super</span>.onActivityResult(requestCode, resultCode, data);</div><div class="line"> </div><div class="line">    <span class="keyword">if</span> (requestCode == RESULT_LOAD_IMAGE &amp;&amp; resultCode == RESULT_OK &amp;&amp; <span class="keyword">null</span> != data) &#123;</div><div class="line">        Uri selectedImage = data.getData();</div><div class="line">        String[] filePathColumn = &#123; MediaStore.Images.Media.DATA &#125;;</div><div class="line"> </div><div class="line">        Cursor cursor = getContentResolver().query(selectedImage,</div><div class="line">                filePathColumn, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">        cursor.moveToFirst();</div><div class="line"> </div><div class="line">        <span class="keyword">int</span> columnIndex = cursor.getColumnIndex(filePathColumn[<span class="number">0</span>]);</div><div class="line">        String picturePath = cursor.getString(columnIndex);    <span class="comment">//此处就获得了选中图片的路径，可以对其进行操作</span></div><div class="line">        cursor.close();</div><div class="line"> </div><div class="line">        <span class="comment">// String picturePath contains the path of selected Image</span></div><div class="line">           Log.i(picturePath)  </div><div class="line"> 	&#125;</div></pre></td></tr></table></figure>
<p>注意：onActivityResult()方法只有当图片被选中后才会调用。</p>
<p>在这个方法中，我们需要检查requestCode是否是我们之前传给startActivityForResult()方法的<b>RESULT_LOAD_IMAGE</b>。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android-RecyclerView使用全解析(二)]]></title>
      <url>http://yoursite.com/2015/10/27/Android-RecyclerView%E4%BD%BF%E7%94%A8%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      <content type="html"><![CDATA[<h4 id="多Item布局实现-MultipleItem"><a href="#多Item布局实现-MultipleItem" class="headerlink" title="多Item布局实现(MultipleItem)"></a>多Item布局实现(MultipleItem)</h4><p>如果之前你用过ListView实现过此功能，那么你一定对下面这两个方法并不陌生</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getItemViewType(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewTypeCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getViewTypeCount();</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>其中<b>getItemViewType</b>方法是用来获取当前项Item(position参数)是哪种类型的布局</p>
<p><b>getViewTypeCount</b>方法是用来获取当前listview总共有多少种类型的布局。</p>
<p>如果你用RecyclerView，你会发现getViewTypeCount这个方法没有了，只有一个<b>getItemViewType</b>方法，用法和listview没有任何区别，这里要注意的就是这个函数<b>onCreateViewHolder(ViewGroup parent, int viewType)</b>这里的第二个参数就是View的类型，可以根据这个类型判断去创建不同item的ViewHolder。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MultipleItemAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">RecyclerView</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> ITEM_TYPE &#123;</div><div class="line">        ITEM_TYPE_IMAGE,</div><div class="line">        ITEM_TYPE_TEXT</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LayoutInflater mLayoutInflater;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Context mContext;</div><div class="line">    <span class="keyword">private</span> String[] mTitles;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MultipleItemAdapter</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        mTitles = context.getResources().getStringArray(R.array.titles);</div><div class="line">        mContext = context;</div><div class="line">        mLayoutInflater = LayoutInflater.from(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="keyword">public</span> RecyclerView.<span class="function">ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (viewType == ITEM_TYPE.ITEM_TYPE_IMAGE.ordinal()) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ImageViewHolder(mLayoutInflater.inflate(R.layout.item_image, parent, <span class="keyword">false</span>));</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">new</span> TextViewHolder(mLayoutInflater.inflate(R.layout.item_text, parent, <span class="keyword">false</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(RecyclerView.ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (holder <span class="keyword">instanceof</span> TextViewHolder) &#123;</div><div class="line">            ((TextViewHolder) holder).mTextView.setText(mTitles[position]);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (holder <span class="keyword">instanceof</span> ImageViewHolder) &#123;</div><div class="line">            ((ImageViewHolder) holder).mTextView.setText(mTitles[position]);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> position % <span class="number">2</span> == <span class="number">0</span> ? ITEM_TYPE.ITEM_TYPE_IMAGE.ordinal() : ITEM_TYPE.ITEM_TYPE_TEXT.ordinal();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mTitles == <span class="keyword">null</span> ? <span class="number">0</span> : mTitles.length;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TextViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        <span class="meta">@InjectView</span>(R.id.text_view)</div><div class="line">        TextView mTextView;</div><div class="line"></div><div class="line">        TextViewHolder(View view) &#123;</div><div class="line">            <span class="keyword">super</span>(view);</div><div class="line">            ButterKnife.inject(<span class="keyword">this</span>, view);</div><div class="line">            view.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    Log.d(<span class="string">"TextViewHolder"</span>, <span class="string">"onClick--&gt; position = "</span> + getPosition());</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</div><div class="line">        <span class="meta">@InjectView</span>(R.id.text_view)</div><div class="line">        TextView mTextView;</div><div class="line">        <span class="meta">@InjectView</span>(R.id.image_view)</div><div class="line">        ImageView mImageView;</div><div class="line"></div><div class="line">        ImageViewHolder(View view) &#123;</div><div class="line">            <span class="keyword">super</span>(view);</div><div class="line">            ButterKnife.inject(<span class="keyword">this</span>, view);</div><div class="line">            view.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    Log.d(<span class="string">"ImageViewHolder"</span>, <span class="string">"onClick--&gt; position = "</span> + getPosition());</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>怎么样，是不是很简单，没错，就是这么简单，但是只要会了这个多Item，那么你就可以做出很多效果了，比如HeaderView和BottomView也是可以通过这种方式来实现的。(<a href="https://github.com/Frank-Zhu/AndroidRecyclerViewDemo/blob/master/app/src/main/java/com/frankzhu/recyclerviewdemo/adapter/HeaderBottomItemAdapter.java" target="_blank" rel="external">HeaderView Adapter</a>)</p>
<h4 id="嵌套RecyclerView-不好，会出各种问题：例，底部下方会有大量空白空间等"><a href="#嵌套RecyclerView-不好，会出各种问题：例，底部下方会有大量空白空间等" class="headerlink" title="嵌套RecyclerView(不好，会出各种问题：例，底部下方会有大量空白空间等)"></a>嵌套RecyclerView(不好，会出各种问题：例，底部下方会有大量空白空间等)</h4><p>一般是不推荐使用嵌套RecycleView的，和ListView是类似的，遇到这种需要嵌套的View一般都是想别的办法来规避，比如<b>动态AddView</b>，或者通过<b>RecycleView的MultipleItemAdapter</b>来实现，通过设置不同的ItemType布局不同的View，但是有时候会闲麻烦，想直接就用嵌套的方式来做，那么和ListView实现方式不同的是，ListView的实现一般都是继承ListView然后复写onMeasure方法，如下所示：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; <span class="number">2</span>, MeasureSpec.AT_MOST);</div><div class="line">       <span class="keyword">super</span>.onMeasure(widthMeasureSpec, expandSpec);</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>但是RecycleView的实现方式不再是继承RecycleView来做，而是通过<b>修改LayoutManager</b>的方式，即通过继承LinearLayoutManager GridLayoutManager StaggeredGridLayoutManager来修改子控件的测量，下面给出主要代码：</p>
<h4 id="FullyLinearLayoutManager"><a href="#FullyLinearLayoutManager" class="headerlink" title="FullyLinearLayoutManager"></a>FullyLinearLayoutManager</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] mMeasuredDimension = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state,</span></span></div><div class="line">                          <span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec) &#123;</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthMode = View.MeasureSpec.getMode(widthSpec);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightMode = View.MeasureSpec.getMode(heightSpec);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> widthSize = View.MeasureSpec.getSize(widthSpec);</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> heightSize = View.MeasureSpec.getSize(heightSpec);</div><div class="line"></div><div class="line">        Log.i(TAG, <span class="string">"onMeasure called. \nwidthMode "</span> + widthMode</div><div class="line">                + <span class="string">" \nheightMode "</span> + heightSpec</div><div class="line">                + <span class="string">" \nwidthSize "</span> + widthSize</div><div class="line">                + <span class="string">" \nheightSize "</span> + heightSize</div><div class="line">                + <span class="string">" \ngetItemCount() "</span> + getItemCount());</div><div class="line"></div><div class="line">        <span class="keyword">int</span> width = <span class="number">0</span>;</div><div class="line">        <span class="keyword">int</span> height = <span class="number">0</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; getItemCount(); i++) &#123;</div><div class="line">            measureScrapChild(recycler, i,</div><div class="line">                    View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),</div><div class="line">                    View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),</div><div class="line">                    mMeasuredDimension);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (getOrientation() == HORIZONTAL) &#123;</div><div class="line">                width = width + mMeasuredDimension[<span class="number">0</span>];</div><div class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                    height = mMeasuredDimension[<span class="number">1</span>];</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                height = height + mMeasuredDimension[<span class="number">1</span>];</div><div class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</div><div class="line">                    width = mMeasuredDimension[<span class="number">0</span>];</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">switch</span> (widthMode) &#123;</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:</div><div class="line">                width = widthSize;</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">switch</span> (heightMode) &#123;</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:</div><div class="line">                height = heightSize;</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:</div><div class="line">            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension(width, height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureScrapChild</span><span class="params">(RecyclerView.Recycler recycler, <span class="keyword">int</span> position, <span class="keyword">int</span> widthSpec,</span></span></div><div class="line">                                   <span class="keyword">int</span> heightSpec, <span class="keyword">int</span>[] measuredDimension) &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            View view = recycler.getViewForPosition(<span class="number">0</span>);<span class="comment">//fix 动态添加时报IndexOutOfBoundsException</span></div><div class="line"></div><div class="line">            <span class="keyword">if</span> (view != <span class="keyword">null</span>) &#123;</div><div class="line">                RecyclerView.LayoutParams p = (RecyclerView.LayoutParams) view.getLayoutParams();</div><div class="line"></div><div class="line">                <span class="keyword">int</span> childWidthSpec = ViewGroup.getChildMeasureSpec(widthSpec,</div><div class="line">                        getPaddingLeft() + getPaddingRight(), p.width);</div><div class="line"></div><div class="line">                <span class="keyword">int</span> childHeightSpec = ViewGroup.getChildMeasureSpec(heightSpec,</div><div class="line">                        getPaddingTop() + getPaddingBottom(), p.height);</div><div class="line"></div><div class="line">                view.measure(childWidthSpec, childHeightSpec);</div><div class="line">                measuredDimension[<span class="number">0</span>] = view.getMeasuredWidth() + p.leftMargin + p.rightMargin;</div><div class="line">                measuredDimension[<span class="number">1</span>] = view.getMeasuredHeight() + p.bottomMargin + p.topMargin;</div><div class="line">                recycler.recycleView(view);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; <span class="keyword">finally</span> &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<h4 id="FullyGridLayoutManager"><a href="#FullyGridLayoutManager" class="headerlink" title="FullyGridLayoutManager"></a>FullyGridLayoutManager</h4><pre><code class="java"><span class="keyword">private</span> <span class="keyword">int</span>[] mMeasuredDimension = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>];

    <span class="meta">@Override</span>
    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(RecyclerView.Recycler recycler, RecyclerView.State state, <span class="keyword">int</span> widthSpec, <span class="keyword">int</span> heightSpec)</span> </span>{
        <span class="keyword">final</span> <span class="keyword">int</span> widthMode = View.MeasureSpec.getMode(widthSpec);
        <span class="keyword">final</span> <span class="keyword">int</span> heightMode = View.MeasureSpec.getMode(heightSpec);
        <span class="keyword">final</span> <span class="keyword">int</span> widthSize = View.MeasureSpec.getSize(widthSpec);
        <span class="keyword">final</span> <span class="keyword">int</span> heightSize = View.MeasureSpec.getSize(heightSpec);

        <span class="keyword">int</span> width = <span class="number">0</span>;
        <span class="keyword">int</span> height = <span class="number">0</span>;
        <span class="keyword">int</span> count = getItemCount();
        <span class="keyword">int</span> span = getSpanCount();
        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) {
            measureScrapChild(recycler, i,
                    View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),
                    View.MeasureSpec.makeMeasureSpec(i, View.MeasureSpec.UNSPECIFIED),
                    mMeasuredDimension);

            <span class="keyword">if</span> (getOrientation() == HORIZONTAL) {
                <span class="keyword">if</span> (i % span == <span class="number">0</span>) {
                    width = width + mMeasuredDimension[<span class="number">0</span>];
                }
                <span class="keyword">if</span> (i == <span class="number">0</span>) {
                    height = mMeasuredDimension[<span class="number">1</span>];
                }
            } <span class="keyword">else</span> {
                <span class="keyword">if</span> (i % span == <span class="number">0</span>) {
                    height = height + mMeasuredDimension[<span class="number">1</span>];
                }
                <span class="keyword">if</span> (i == <span class="number">0</span>) {
                    width = mMeasuredDimension[<span class="number">0</span>];
                }
            }
        }

        <span class="keyword">switch</span> (widthMode) {
            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:
                width = widthSize;
            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:
            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:
        }

        <span class="keyword">switch</span> (heightMode) {
            <span class="keyword">case</span> View.MeasureSpec.EXACTLY:
                height = heightSize;
            <span class="keyword">case</span> View.MeasureSpec.AT_MOST:
            <span class="keyword">case</span> View.MeasureSpec.UNSPECIFIED:
        }

        setMeasuredDimension(width, height);
    }

    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">measureScrapChild</span><span class="params">(RecyclerView.Recycler recycler, <span class="keyword">int</span> position, <span class="keyword">int</span> widthSpec,
                                   <span class="keyword">int</span> heightSpec, <span class="keyword">int</span>[] measuredDimension)</span> </span>{
        <span class="keyword">if</span> (position &lt; getItemCount()) {
            <span class="keyword">try</span> {
                View view = recycler.getViewForPosition(<span class="number">0</span>);<span class="comment">//fix 动态添加时报IndexOutOfBoundsException</span>
                <span class="keyword">if</span> (view != <span class="keyword">null</span>) {
                    RecyclerView.LayoutParams p = (RecyclerView.LayoutParams) view.getLayoutParams();
                    <span class="keyword">int</span> childWidthSpec = ViewGroup.getChildMeasureSpec(widthSpec,
                            getPaddingLeft() + getPaddingRight(), p.width);
                    <span class="keyword">int</span> childHeightSpec = ViewGroup.getChildMeasureSpec(heightSpec,
                            getPaddingTop() + getPaddingBottom(), p.height);
                    view.measure(childWidthSpec, childHeightSpec);
                    measuredDimension[<span class="number">0</span>] = view.getMeasuredWidth() + p.leftMargin + p.rightMargin;
                    measuredDimension[<span class="number">1</span>] = view.getMeasuredHeight() + p.bottomMargin + p.topMargin;
                    recycler.recycleView(view);
                }
            } <span class="keyword">catch</span> (Exception e) {
                e.printStackTrace();
            }
        }
    }
</code></pre>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio如何导入第三方类库]]></title>
      <url>http://yoursite.com/2015/10/17/Android-Studio%E5%A6%82%E4%BD%95%E5%AF%BC%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9%E7%B1%BB%E5%BA%93/</url>
      <content type="html"><![CDATA[<h1 id="Android-Studio导入第三方类库"><a href="#Android-Studio导入第三方类库" class="headerlink" title="Android Studio导入第三方类库"></a>Android Studio导入第三方类库</h1><h3 id="一、第一种情况是：-jar的第三方包"><a href="#一、第一种情况是：-jar的第三方包" class="headerlink" title="一、第一种情况是：*.jar的第三方包"></a>一、第一种情况是：*.jar的第三方包</h3><p>这一种情况比较简单：有两步</p>
<p><li>在项目中新建一个名字叫<b>libs</b>的文件夹</li></p>
<p><li>将jar包复制到这个文件夹下，然后在这个jar包上右键————&gt;Add as Library  搞定</li></p>
<p>最后可以点住项目 按<b> F12 ——&gt;dependedices</b> 查看 包是否导入</p>
<h3 id="二、导入第三方java类库含源代码包（重点）"><a href="#二、导入第三方java类库含源代码包（重点）" class="headerlink" title="二、导入第三方java类库含源代码包（重点）"></a>二、导入第三方java类库含源代码包（重点）</h3><p><a href="http://pan.baidu.com/s/1bndTFRL" target="_blank" rel="external">slidingmenu第三方类库</a></p>
<h4 id="1-像导入一个项目那样导入类库"><a href="#1-像导入一个项目那样导入类库" class="headerlink" title="1.像导入一个项目那样导入类库"></a>1.像导入一个项目那样导入类库</h4><p>File——&gt;New——&gt;import Module  选中要导入的类库<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/import_library_1.png"></p>
<p>这个时候工程中setting.gradle中就会多一个类库</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">include <span class="string">':app'</span>, <span class="string">':slidingmenu_library'</span></div></pre></td></tr></table></figure>
<h4 id="2-这时就会在library项目中自动生成build-gradle这个文件，就对它就行各种编译版本等的修改"><a href="#2-这时就会在library项目中自动生成build-gradle这个文件，就对它就行各种编译版本等的修改" class="headerlink" title="2.这时就会在library项目中自动生成build.gradle这个文件，就对它就行各种编译版本等的修改"></a>2.这时就会在library项目中自动生成build.gradle这个文件，就对它就行各种编译版本等的修改</h4><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/import_library_3.png" width="600"></p>
<h4 id="3-对app项目添加对库的依赖"><a href="#3-对app项目添加对库的依赖" class="headerlink" title="3.对app项目添加对库的依赖"></a>3.对app项目添加对库的依赖</h4><p>点住app——&gt;F12——&gt;dependenices——&gt;+Module Library  即可<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/import_library_2.png"></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android 最火的快速开发框架AndroidAnnotations使用详解]]></title>
      <url>http://yoursite.com/2015/10/14/Android-%E6%9C%80%E7%81%AB%E7%9A%84%E5%BF%AB%E9%80%9F%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6AndroidAnnotations%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
      <content type="html"><![CDATA[<h3 id="一、配置（Android-Studio）"><a href="#一、配置（Android-Studio）" class="headerlink" title="一、配置（Android Studio）"></a>一、配置（Android Studio）</h3><p><li>1.在Model的build.gradle中添加</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">apply plugin: <span class="string">'com.android.application'</span></div><div class="line">apply plugin: <span class="string">'android-apt'</span></div><div class="line">def AAVersion = <span class="string">'XXX'</span></div><div class="line"></div><div class="line">dependencies &#123;</div><div class="line">    apt <span class="string">"org.androidannotations:androidannotations:$AAVersion"</span></div><div class="line">    compile <span class="string">"org.androidannotations:androidannotations-api:$AAVersion"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">apt &#123;</div><div class="line">    arguments &#123;</div><div class="line">        androidManifestFile variant.outputs[<span class="number">0</span>].processResources.manifestFile</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><li>2.在Project的build.gradle中添加 （就一行）</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">buildscript &#123;</div><div class="line">    repositories &#123;</div><div class="line">      mavenCentral()</div><div class="line">    &#125;</div><div class="line">    dependencies &#123;</div><div class="line">        <span class="comment">// replace with the current version of the Android plugin</span></div><div class="line">        classpath <span class="string">'com.android.tools.build:gradle:1.2.2'</span></div><div class="line">        <span class="comment">// replace with the current version of the android-apt plugin</span></div><div class="line">        classpath <span class="string">'com.neenbedankt.gradle.plugins:android-apt:1.4'</span>    <span class="comment">//就这一行</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">repositories &#123;</div><div class="line">    mavenCentral()</div><div class="line">    mavenLocal()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>详细使用看github上的中文介绍：<a href="https://github.com/mrljdx/AndroidAnnotaions/blob/master/androidannotation_zh_CN/1.0.1_%E5%B8%B8%E7%94%A8%E6%B3%A8%E9%87%8A.markdown" target="_blank" rel="external">简单使用</a></p>
<p>最最最要注意的一点就是：</p>
<p>使用AndroidAnnotations千万要记得，编译的时候会生成一个子类，这个子类的名称就是在<br>原来的类之后加了一个下划线“<em>”，比如这个例子产生的子类名称为“MyActivity</em>”，这就需要你在注册这个Activity的时候，在<br>AndroidManifest.xml中将 MyActivity 改为 MyActivity<em> ，使用的时候也是使用MyActivity</em>来表示此类，如从另一个Activity跳转<br>到此节目就要这样用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivity(<span class="keyword">new</span> Intent(<span class="keyword">this</span>,MyActivity_.class));</div></pre></td></tr></table></figure>
<p>注意，是MyActivity_.class 不是 MyActivity.class;</p>
<h4 id="EActivity"><a href="#EActivity" class="headerlink" title="@EActivity"></a>@EActivity</h4><p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EActivity</span>(R.layout.main)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：清单文件中Activity的注册(Service、Receiver、Provider的注册一样)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Activity name=<span class="string">"com.quwenleiqi.ui.MyActivity_.class"</span>/&gt;</div></pre></td></tr></table></figure>
<h4 id="EFragment"><a href="#EFragment" class="headerlink" title="@EFragment"></a>@EFragment</h4><p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EFragment</span>(R.layout.my_fragment_layout)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注册：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;fragment</div><div class="line">        android:id=<span class="string">"@+id/myFragment"</span></div><div class="line">        android:name=<span class="string">"com.company.MyFragment_"</span></div><div class="line">        android:layout_width=<span class="string">"fill_parent"</span></div><div class="line">        android:layout_height=<span class="string">"fill_parent"</span> /&gt;</div></pre></td></tr></table></figure>
<p>创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyFragment fragment = <span class="keyword">new</span> MyFragment_();</div></pre></td></tr></table></figure>
<h4 id="FragmentArg"><a href="#FragmentArg" class="headerlink" title="@FragmentArg"></a>@FragmentArg</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EFragment</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;<span class="comment">//等同于 Fragment Argument</span></div><div class="line"></div><div class="line">  <span class="meta">@FragmentArg</span>(<span class="string">"myStringArgument"</span>)</div><div class="line">  String myMessage;</div><div class="line"></div><div class="line">  <span class="meta">@FragmentArg</span></div><div class="line">  String anotherStringArgument;</div><div class="line"></div><div class="line">  <span class="meta">@FragmentArg</span>(<span class="string">"myDateExtra"</span>)</div><div class="line">  Date myDateArgumentWithDefaultValue = <span class="keyword">new</span> Date();</div><div class="line"></div><div class="line">&#125;</div><div class="line">MyFragment myFragment = MyFragment_.builder()</div><div class="line">  .myMessage(<span class="string">"Hello"</span>)</div><div class="line">  .anotherStringArgument(<span class="string">"World"</span>)</div><div class="line">  .build();</div></pre></td></tr></table></figure>
<h4 id="OptionsMenu和OptionsItem"><a href="#OptionsMenu和OptionsItem" class="headerlink" title="@OptionsMenu和OptionsItem"></a>@OptionsMenu和OptionsItem</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="meta">@OptionsMenu</span>(R.menu.my_menu)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@OptionMenuItem</span></div><div class="line">    MenuItem menuSearch;</div><div class="line"></div><div class="line">    <span class="meta">@OptionsItem</span>(R.id.menuShare)</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">          <span class="comment">// You can specify the ID in the annotation, or use the naming convention</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OptionsItem</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">homeSelected</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// home was selected in the action bar</span></div><div class="line">          <span class="comment">// The "Selected" keyword is optional</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OptionsItem</span></div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">menuSearch</span><span class="params">()</span> </span>&#123;</div><div class="line">          menuSearch.setVisible(<span class="keyword">false</span>);</div><div class="line">          <span class="comment">// menuSearch was selected</span></div><div class="line">          <span class="comment">// the return type may be void or boolean (false to allow normal menu processing to proceed, true to consume it here)</span></div><div class="line">          <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OptionsItem</span>(&#123; R.id.menu_search, R.id.menu_delete &#125;)</div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">multipleMenuItems</span><span class="params">()</span> </span>&#123;</div><div class="line">      <span class="comment">// You can specify multiple menu item IDs in @OptionsItem</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@OptionsItem</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">menu_add</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">      <span class="comment">// You can add a MenuItem parameter to access it</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="meta">@OptionsMenu</span>(&#123;R.menu.my_menu1, R.menu.my_menu2&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="RestService"><a href="#RestService" class="headerlink" title="@RestService"></a>@RestService</h4><p>声明：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestService</span></div><div class="line">BookmarkClient restClient;</div></pre></td></tr></table></figure>
<p>请求数据的url获取数据的服务</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Rest</span>(<span class="string">"http://www.bookmarks.com"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookmarkClient</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="meta">@Get</span>(<span class="string">"/bookmarks/&#123;userId&#125;?search=&#123;search&#125;"</span>)</div><div class="line">  <span class="function">Bookmarks <span class="title">getBookmarks</span><span class="params">(String search, String userId)</span></span>;</div><div class="line"> </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在background中执行 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">restClient.getBookmarks();</div></pre></td></tr></table></figure>
<h4 id="Background"><a href="#Background" class="headerlink" title="@Background"></a>@Background</h4><p>执行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    someBackgroundWork(<span class="string">"hello"</span>, <span class="number">42</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Background</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">someBackgroundWork</span><span class="params">(String aParam, <span class="keyword">long</span> anotherParam)</span> </span>&#123;</div><div class="line">    [...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>取消：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    someCancellableBackground(<span class="string">"hello"</span>, <span class="number">42</span>);</div><div class="line">    [...]</div><div class="line">    <span class="keyword">boolean</span> mayInterruptIfRunning = <span class="keyword">true</span>;</div><div class="line">    BackgroundExecutor.cancelAll(<span class="string">"cancellable_task"</span>, mayInterruptIfRunning);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Background</span>(id=<span class="string">"cancellable_task"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">someCancellableBackground</span><span class="params">(String aParam, <span class="keyword">long</span> anotherParam)</span> </span>&#123;</div><div class="line">    [...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非并发执行：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</div><div class="line">        someSequentialBackgroundMethod(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Background</span>(serial = <span class="string">"test"</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">someSequentialBackgroundMethod</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</div><div class="line">    SystemClock.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">2000</span>)+<span class="number">1000</span>);</div><div class="line">    Log.d(<span class="string">"AA"</span>, <span class="string">"value : "</span> + i);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>延迟：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Background</span>(delay=<span class="number">2000</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doInBackgroundAfterTwoSeconds</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="UiThread"><a href="#UiThread" class="headerlink" title="@UiThread"></a>@UiThread</h4><p>UI线程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">myMethod</span><span class="params">()</span> </span>&#123;</div><div class="line">    doInUiThread(<span class="string">"hello"</span>, <span class="number">42</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@UiThread</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doInUiThread</span><span class="params">(String aParam, <span class="keyword">long</span> anotherParam)</span> </span>&#123;</div><div class="line">    [...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>延迟：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="meta">@UiThread</span>(delay=<span class="number">2000</span>)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">doInUiThreadAfterTwoSeconds</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>优化UI线程：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@UiThread</span>(propagation = Propagation.REUSE)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">runInSameThreadIfOnUiThread</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>进度值改变：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Background</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">doSomeStuffInBackground</span><span class="params">()</span> </span>&#123;</div><div class="line">    publishProgress(<span class="number">0</span>);</div><div class="line">    <span class="comment">// Do some stuff</span></div><div class="line">    publishProgress(<span class="number">10</span>);</div><div class="line">    <span class="comment">// Do some stuff</span></div><div class="line">    publishProgress(<span class="number">100</span>);</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="meta">@UiThread</span></div><div class="line">  <span class="function"><span class="keyword">void</span> <span class="title">publishProgress</span><span class="params">(<span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">    <span class="comment">// Update progress views</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="OnActivityResult"><a href="#OnActivityResult" class="headerlink" title="@OnActivityResult"></a>@OnActivityResult</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@OnActivityResult</span>(REQUEST_CODE)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onResult</span><span class="params">(<span class="keyword">int</span> resultCode, Intent data)</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@OnActivityResult</span>(REQUEST_CODE)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onResult</span><span class="params">(<span class="keyword">int</span> resultCode)</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@OnActivityResult</span>(ANOTHER_REQUEST_CODE)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onResult</span><span class="params">(Intent data)</span> </span>&#123;</div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@OnActivityResult</span>(ANOTHER_REQUEST_CODE)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onResult</span><span class="params">()</span> </span>&#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="EBean"><a href="#EBean" class="headerlink" title="@EBean"></a>@EBean</h4><p>普通类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EBean</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注意：这个类必须仅仅只能有一个构造函数，参数最多有一个context。</p>
<p>Activity中使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Bean</span></div><div class="line">  MyOtherClass myOtherClass;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>也可以用来声明接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Bean</span>(MyImplementation.class)   <span class="comment">//接口的实现类</span></div><div class="line">MyInterface myInterface;        <span class="comment">//接口</span></div></pre></td></tr></table></figure>
<p>在普通类中还可以注入根环境:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EBean</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@RootContext</span></div><div class="line">  Context context;</div><div class="line"></div><div class="line">  <span class="comment">// Only injected if the root context is an activity</span></div><div class="line">  <span class="meta">@RootContext</span></div><div class="line">  Activity activity;</div><div class="line"></div><div class="line">  <span class="comment">// Only injected if the root context is a service</span></div><div class="line">  <span class="meta">@RootContext</span></div><div class="line">  Service service;</div><div class="line"></div><div class="line">  <span class="comment">// Only injected if the root context is an instance of MyActivity</span></div><div class="line">  <span class="meta">@RootContext</span></div><div class="line">  MyActivity myActivity;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果想在类创建时期做一些操作可以：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">	<span class="meta">@AfterInject</span></div><div class="line">	  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethingAfterInjection</span><span class="params">()</span> </span>&#123;</div><div class="line">	    <span class="comment">// notificationManager and dependency are set</span></div><div class="line">	  &#125;</div><div class="line"></div><div class="line">单例类需要如下声明：</div><div class="line"></div><div class="line"></div><div class="line">	<span class="meta">@EBean</span>(scope = Scope.Singleton)</div><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySingleton</span> </span>&#123;</div><div class="line">	</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>注意：在单例类里面不可以注入view和事件绑定，因为单例的生命周期比Activity和Service的要长，以免发生内存溢出。</p>
<h4 id="EView"><a href="#EView" class="headerlink" title="@EView"></a>@EView</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EView</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomButton</span> <span class="keyword">extends</span> <span class="title">Button</span> </span>&#123;</div><div class="line"></div><div class="line">        <span class="meta">@App</span></div><div class="line">        MyApplication application;</div><div class="line"></div><div class="line">        <span class="meta">@StringRes</span></div><div class="line">        String someStringResource;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CustomButton</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注册：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;com.androidannotations.view.CustomButton_</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure>
<p>创建：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CustomButton button = CustomButton_.build(context);</div></pre></td></tr></table></figure>
<h4 id="EViewGroup"><a href="#EViewGroup" class="headerlink" title="@EViewGroup"></a>@EViewGroup</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EViewGroup</span>(R.layout.title_with_subtitle)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TitleWithSubtitle</span> <span class="keyword">extends</span> <span class="title">RelativeLayout</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ViewById</span></div><div class="line">    <span class="keyword">protected</span> TextView title, subtitle;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TitleWithSubtitle</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setTexts</span><span class="params">(String titleText, String subTitleText)</span> </span>&#123;</div><div class="line">        title.setText(titleText);</div><div class="line">        subtitle.setText(subTitleText);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注册：</p>
<figure class="highlight java"><figcaption><span><com.androidannotations.viewgroup.titlewithsubtitle_< span=""></com.androidannotations.viewgroup.titlewithsubtitle_<></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">android:id=<span class="string">"@+id/firstTitle"</span></div><div class="line">android:layout_width=<span class="string">"match_parent"</span></div><div class="line">android:layout_height=<span class="string">"wrap_content"</span> /&gt;</div></pre></td></tr></table></figure>
<h4 id="EApplication"><a href="#EApplication" class="headerlink" title="@EApplication"></a>@EApplication</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@EApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyApplication</span> <span class="keyword">extends</span> <span class="title">Application</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Activity中使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@App</span></div><div class="line">  MyApplication application;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="EService"><a href="#EService" class="headerlink" title="@EService"></a>@EService</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EService</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>跳转service：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyService_.intent(getApplication()).start();</div></pre></td></tr></table></figure>
<p>停止service：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyService_.intent(getApplication()).stop();</div></pre></td></tr></table></figure>
<h4 id="EReceiver"><a href="#EReceiver" class="headerlink" title="@EReceiver"></a>@EReceiver</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EReceiver</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Receiver"><a href="#Receiver" class="headerlink" title="@Receiver"></a>@Receiver</h4><p>可以替代声明BroadcastReceiver</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Receiver</span>(actions = <span class="string">"org.androidannotations.ACTION_1"</span>)</div><div class="line">  <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onAction1</span><span class="params">()</span> </span>&#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="EProvider"><a href="#EProvider" class="headerlink" title="@EProvider"></a>@EProvider</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EProvider</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyContentProvider</span> <span class="keyword">extends</span> <span class="title">ContentProvider</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ViewById"><a href="#ViewById" class="headerlink" title="@ViewById"></a>@ViewById</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// Injects R.id.myEditText，变量名称必须和布局的id名称一致</span></div><div class="line">  <span class="meta">@ViewById</span></div><div class="line">  EditText myEditText;</div><div class="line"></div><div class="line">  <span class="meta">@ViewById</span>(R.id.myTextView)</div><div class="line">  TextView textView;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AfterViews"><a href="#AfterViews" class="headerlink" title="@AfterViews"></a>@AfterViews</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span>(R.layout.main)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@ViewById</span></div><div class="line">    TextView myTextView;</div><div class="line"></div><div class="line">    <span class="meta">@AfterViews</span></div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">updateTextWithDate</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//一定要在这里进行view的一些设置，不要在oncreate()中设置，因为oncreate()在执行时 view还没有注入</span></div><div class="line">        myTextView.setText(<span class="string">"Date: "</span> + <span class="keyword">new</span> Date());    &#125;[...]</div></pre></td></tr></table></figure>
<h4 id="StringRes"><a href="#StringRes" class="headerlink" title="@StringRes"></a>@StringRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@StringRes</span>(R.string.hello)</div><div class="line">  String myHelloString;<span class="comment">//不能设置成私有变量</span></div><div class="line"></div><div class="line">  <span class="meta">@StringRes</span></div><div class="line">  String hello;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="ColorRes"><a href="#ColorRes" class="headerlink" title="@ColorRes"></a>@ColorRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@ColorRes</span>(R.color.backgroundColor)</div><div class="line">  <span class="keyword">int</span> someColor;</div><div class="line"></div><div class="line">  <span class="meta">@ColorRes</span></div><div class="line">  <span class="keyword">int</span> backgroundColor;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AnimationRes"><a href="#AnimationRes" class="headerlink" title="@AnimationRes"></a>@AnimationRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@AnimationRes</span>(R.anim.fadein)</div><div class="line">  XmlResourceParser xmlResAnim;</div><div class="line"></div><div class="line">  <span class="meta">@AnimationRes</span></div><div class="line">  Animation fadein;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DimensionRes"><a href="#DimensionRes" class="headerlink" title="@DimensionRes"></a>@DimensionRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionRes</span>(R.dimen.fontsize)</div><div class="line">  <span class="keyword">float</span> fontSizeDimension;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionRes</span></div><div class="line">  <span class="keyword">float</span> fontsize;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DImensionPixelOffsetRes"><a href="#DImensionPixelOffsetRes" class="headerlink" title="@DImensionPixelOffsetRes"></a>@DImensionPixelOffsetRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionPixelOffsetRes</span>(R.string.fontsize)</div><div class="line">  <span class="keyword">int</span> fontSizeDimension;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionPixelOffsetRes</span></div><div class="line">  <span class="keyword">int</span> fontsize;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="DimensionPixelSizeRes"><a href="#DimensionPixelSizeRes" class="headerlink" title="@DimensionPixelSizeRes"></a>@DimensionPixelSizeRes</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionPixelSizeRes</span>(R.string.fontsize)</div><div class="line">  <span class="keyword">int</span> fontSizeDimension;</div><div class="line"></div><div class="line">  <span class="meta">@DimensionPixelSizeRes</span></div><div class="line">  <span class="keyword">int</span> fontsize;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="其他的Res："><a href="#其他的Res：" class="headerlink" title="其他的Res："></a>其他的Res：</h4><p><li>@BooleanRes<br></li><li>@ColorStateListRes<br></li><li>@DrawableRes<br></li><li>@IntArrayRes<br></li><li>@IntegerRes<br></li><li>@LayoutRes<br></li><li>@MovieRes<br></li><li>@TextRes<br></li><li>@TextArrayRes<br></li><li>@StringArrayRes</li></p>
<h4 id="Extra"><a href="#Extra" class="headerlink" title="@Extra"></a>@Extra</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="meta">@Extra</span>(<span class="string">"myStringExtra"</span>)</div><div class="line">  String myMessage;</div><div class="line"></div><div class="line">  <span class="meta">@Extra</span>(<span class="string">"myDateExtra"</span>)</div><div class="line">  Date myDateExtraWithDefaultValue = <span class="keyword">new</span> Date();</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或者：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">// The name of the extra will be "myMessage"，名字必须一致</span></div><div class="line">  <span class="meta">@Extra</span></div><div class="line">  String myMessage;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>传值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">MyActivity_.intent().myMessage(<span class="string">"hello"</span>).start() ;</div></pre></td></tr></table></figure>
<h4 id="SystemService"><a href="#SystemService" class="headerlink" title="@SystemService"></a>@SystemService</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> @EActivity</div><div class="line">public class MyActivity extends Activity &#123;//</div><div class="line">  @SystemService</div><div class="line">  NotificationManager notificationManager;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Click"><a href="#Click" class="headerlink" title="@Click"></a>@Click</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@Click</span>(R.id.myButton)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">myButtonWasClicked</span><span class="params">()</span> </span>&#123;</div><div class="line">    [...]</div><div class="line">&#125;</div><div class="line"><span class="meta">@Click</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">anotherButton</span><span class="params">()</span> </span>&#123;<span class="comment">//如果不指定则函数名和id对应</span></div><div class="line">    [...]</div><div class="line">&#125;</div><div class="line"><span class="meta">@Click</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">yetAnotherButton</span><span class="params">(View clickedView)</span> </span>&#123;</div><div class="line">    [...]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其他点击事件：</p>
<p><li>Clicks with @Click</li></p>
<p><li>Long clicks with @LongClick</li></p>
<p><li>Touches with @Touch</li></p>
<h4 id="AdapterViewEvents"><a href="#AdapterViewEvents" class="headerlink" title="AdapterViewEvents"></a>AdapterViewEvents</h4><p><li>Item clicks with @ItemClick</li></p>
<p><li>Long item clicks with @ItemLongClick</li></p>
<p><li>Item selection with @ItemSelect</li></p>
<p>有两种方式调用：</p>
<p><li>1.</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span>(R.layout.my_list)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="meta">@ItemClick</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemClicked</span><span class="params">(MyItem clickedItem)</span> </span>&#123;<span class="comment">//MyItem是adapter的实体类，等同于adapter.getItem(position)</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ItemLongClick</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemLongClicked</span><span class="params">(MyItem clickedItem)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ItemSelect</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemSelected</span><span class="params">(<span class="keyword">boolean</span> selected, MyItem selectedItem)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><li>2.</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@EActivity</span>(R.layout.my_list)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyListActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">// ...</span></div><div class="line"></div><div class="line">    <span class="meta">@ItemClick</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemClicked</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;<span class="comment">//位置id</span></div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ItemLongClick</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemLongClicked</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@ItemSelect</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">myListItemSelected</span><span class="params">(<span class="keyword">boolean</span> selected, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="SeekBarProgressChange"><a href="#SeekBarProgressChange" class="headerlink" title="@SeekBarProgressChange"></a>@SeekBarProgressChange</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//等同于SeekBar.OnSeekBarChangeListener.onProgressChanged(SeekBar, int, boolean)</span></div><div class="line">    <span class="meta">@SeekBarProgressChange</span>(R.id.seekBar)</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">onProgressChangeOnSeekBar</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> progress, <span class="keyword">boolean</span> fromUser)</span> </span>&#123;</div><div class="line">    <span class="comment">// Something Here</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@SeekBarProgressChange</span>(R.id.seekBar)</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">onProgressChangeOnSeekBar</span><span class="params">(SeekBar seekBar, <span class="keyword">int</span> progress)</span> </span>&#123;</div><div class="line">    <span class="comment">// Something Here</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@SeekBarProgressChange</span>(&#123;R.id.seekBar1, R.id.seekBar2&#125;)</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">onProgressChangeOnSeekBar</span><span class="params">(SeekBar seekBar)</span> </span>&#123;</div><div class="line">    <span class="comment">// Something Here</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="meta">@SeekBarProgressChange</span>(&#123;R.id.seekBar1, R.id.seekBar2&#125;)</div><div class="line"> <span class="function"><span class="keyword">void</span> <span class="title">onProgressChangeOnSeekBar</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// Something Here</span></div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>@SeekBarTouchStart 和 @SeekBarTouchStop<br>接受开始和结束事件的监听</p>
<h4 id="HttpsClient"><a href="#HttpsClient" class="headerlink" title="@HttpsClient"></a>@HttpsClient</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"> <span class="meta">@HttpsClient</span></div><div class="line">HttpClient httpsClient;</div></pre></td></tr></table></figure>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="meta">@EActivity</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@HttpsClient</span>(trustStore=R.raw.cacerts,</div><div class="line">        trustStorePwd=<span class="string">"changeit"</span>, </div><div class="line">        hostnameVerif=<span class="keyword">true</span>)</div><div class="line">    HttpClient httpsClient;</div><div class="line"></div><div class="line">    <span class="meta">@AfterInject</span></div><div class="line">    <span class="meta">@Background</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">securedRequest</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            HttpGet httpget = <span class="keyword">new</span> HttpGet(<span class="string">"https://www.verisign.com/"</span>);</div><div class="line">            HttpResponse response = httpsClient.execute(httpget);</div><div class="line">            doSomethingWithResponse(response);</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@UiThread</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomethingWithResponse</span><span class="params">(HttpResponse resp)</span> </span>&#123;</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"HTTP status "</span> + resp.getStatusLine().getStatusCode(), Toast.LENGTH_LONG).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="TextChange"><a href="#TextChange" class="headerlink" title="@TextChange"></a>@TextChange</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@TextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onTextChangesOnHelloTextView</span><span class="params">(CharSequence text, TextView hello, <span class="keyword">int</span> before, <span class="keyword">int</span> start, <span class="keyword">int</span> count)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@TextChange</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">helloTextViewTextChanged</span><span class="params">(TextView hello)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@TextChange</span>(&#123;R.id.editText, R.id.helloTextView&#125;)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onTextChangesOnSomeTextViews</span><span class="params">(TextView tv, CharSequence text)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@TextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">onTextChangesOnHelloTextView</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="BeforeTextChange"><a href="#BeforeTextChange" class="headerlink" title="@BeforeTextChange"></a>@BeforeTextChange</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@BeforeTextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">beforeTextChangedOnHelloTextView</span><span class="params">(TextView hello, CharSequence text, <span class="keyword">int</span> start, <span class="keyword">int</span> count, <span class="keyword">int</span> after)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@BeforeTextChange</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">helloTextViewBeforeTextChanged</span><span class="params">(TextView hello)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@BeforeTextChange</span>(&#123;R.id.editText, R.id.helloTextView&#125;)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">beforeTextChangedOnSomeTextViews</span><span class="params">(TextView tv, CharSequence text)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@BeforeTextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">beforeTextChangedOnHelloTextView</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="AfterTextChange"><a href="#AfterTextChange" class="headerlink" title="@AfterTextChange"></a>@AfterTextChange</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@AfterTextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterTextChangedOnHelloTextView</span><span class="params">(Editable text, TextView hello)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@AfterTextChange</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">helloTextViewAfterTextChanged</span><span class="params">(TextView hello)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@AfterTextChange</span>(&#123;R.id.editText, R.id.helloTextView&#125;)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterTextChangedOnSomeTextViews</span><span class="params">(TextView tv, Editable text)</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div><div class="line">	</div><div class="line"><span class="meta">@AfterTextChange</span>(R.id.helloTextView)</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">afterTextChangedOnHelloTextView</span><span class="params">()</span> </span>&#123;</div><div class="line">   <span class="comment">// Something Here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>书写参考：<a href="http://www.csdn123.com/html/topnews201408/29/729.htm" target="_blank" rel="external">出处</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[SwipeRefreshLayout + RecyclerView 实现下拉刷新和上拉加载更多]]></title>
      <url>http://yoursite.com/2015/10/13/SwipeRefreshLayout-RecyclerView-%E5%AE%9E%E7%8E%B0%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E5%92%8C%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A/</url>
      <content type="html"><![CDATA[<p>SwipeRefreshLayout 是谷歌公司推出的用于下拉刷新的控件，SwipeRefreshLayout已经被放到了sdk中，在Version 19.1之后SwipeRefreshLayout 被放到support v4中。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">源码在SDK\sdk\extras\android\support\v4\src\java\android\support\v4\widget\SwipeRefreshLayout.java</div></pre></td></tr></table></figure>
<p><b>SwipeRefreshLayout只提供了下拉刷新，我们需要添加上拉加载更多</b></p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/swipeRefreshLayout.gif"></p>
<h5 id="SwipeRefreshLayout中要注意的API"><a href="#SwipeRefreshLayout中要注意的API" class="headerlink" title="SwipeRefreshLayout中要注意的API:"></a>SwipeRefreshLayout中要注意的API:</h5><p><li>setOnRefreshListener(OnRefreshListener listener)  设置下拉监听，当用户下拉的时候会去执行回调</li></p>
<p><li>setColorSchemeColors(int… colors) 设置 进度条的颜色变化，最多可以设置4种颜色</li></p>
<p><li>setProgressViewOffset(boolean scale, int start, int end) 调整进度条距离屏幕顶部的距离 (19) </li></p>
<p><li>setRefreshing(boolean refreshing) 设置SwipeRefreshLayout当前是否处于刷新状态，一般是在请求数据的时候设置为true，在数据被加载到View中后，设置为false。</li></p>
<h5 id="添加上拉加载：对recyclerview添加addOnscrollListener-滑动到可见的最后一个item的时候，让mSwipeRefreshLayout-setRefreshing-true-加载数据，发handler-然后消失。"><a href="#添加上拉加载：对recyclerview添加addOnscrollListener-滑动到可见的最后一个item的时候，让mSwipeRefreshLayout-setRefreshing-true-加载数据，发handler-然后消失。" class="headerlink" title="添加上拉加载：对recyclerview添加addOnscrollListener,滑动到可见的最后一个item的时候，让mSwipeRefreshLayout.setRefreshing(true);加载数据，发handler ,然后消失。"></a>添加上拉加载：对recyclerview添加addOnscrollListener,滑动到可见的最后一个item的时候，让mSwipeRefreshLayout.setRefreshing(true);加载数据，发handler ,然后消失。</h5><h5 id="布局文件：SwipeRefreshLayout要嵌套在listview、srcrollview、recyclerview等的外边"><a href="#布局文件：SwipeRefreshLayout要嵌套在listview、srcrollview、recyclerview等的外边" class="headerlink" title="布局文件：SwipeRefreshLayout要嵌套在listview、srcrollview、recyclerview等的外边"></a>布局文件：SwipeRefreshLayout要嵌套在listview、srcrollview、recyclerview等的外边</h5><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v4.widget.SwipeRefreshLayout</div><div class="line">     android:id="@+id/swiperefreshlayout"</div><div class="line">     android:layout_height="wrap_content"</div><div class="line">     android:layout_width="match_parent"</div><div class="line">     &gt;</div><div class="line">     &lt;android.support.v7.widget.RecyclerView</div><div class="line">         android:id="@+id/recyclerview"</div><div class="line">         android:layout_height="wrap_content"</div><div class="line">         android:layout_width="match_parent"</div><div class="line">         &gt;&lt;/android.support.v7.widget.RecyclerView&gt;</div><div class="line"> &lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</div></pre></td></tr></table></figure>
<h5 id="Activity"><a href="#Activity" class="headerlink" title="Activity"></a>Activity</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">mRecyclerView= (RecyclerView) findViewById(R.id.recyclerview);</div><div class="line">layoutManager=<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">mRecyclerView.setLayoutManager(layoutManager);</div><div class="line">mRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(<span class="keyword">this</span>, DividerItemDecoration.VERTICAL_LIST));</div><div class="line">adapter=<span class="keyword">new</span> SimpleAdapter(<span class="keyword">this</span>,mDatas);</div><div class="line">mRecyclerView.setAdapter(adapter);</div><div class="line">mSwipeRefreshLayout= (SwipeRefreshLayout) findViewById(R.id.swiperefreshlayout);</div><div class="line">mSwipeRefreshLayout.setColorSchemeResources(android.R.color.holo_blue_bright, android.R.color.holo_green_light,</div><div class="line">        android.R.color.holo_orange_light, android.R.color.holo_red_light);</div><div class="line">    <span class="comment">//此处是android自带的只支持下拉刷新</span></div><div class="line">mSwipeRefreshLayout.setOnRefreshListener(<span class="keyword">new</span> SwipeRefreshLayout.OnRefreshListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">()</span> </span>&#123;</div><div class="line">        handler.sendEmptyMessageDelayed(MSG_COMPLETE, <span class="number">3000</span>);</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">   <span class="comment">//此处我们是对recyclerview添加scrollListener ,监听滑倒最后一个可见的条目的时候，刷新加载数据</span></div><div class="line">mRecyclerView.addOnScrollListener(<span class="keyword">new</span> RecyclerView.OnScrollListener() &#123;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrollStateChanged</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> newState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onScrollStateChanged(recyclerView, newState);</div><div class="line">            <span class="comment">//SCROLL_STATE_DRAGGING  和   SCROLL_STATE_IDLE 两种效果自己看着来</span></div><div class="line">        <span class="keyword">if</span>(newState == RecyclerView.SCROLL_STATE_IDLE &amp;&amp; lastVisibleItem + <span class="number">1</span> == adapter.getItemCount())&#123;</div><div class="line">            mSwipeRefreshLayout.setRefreshing(<span class="keyword">true</span>);</div><div class="line">            handler.sendEmptyMessageDelayed(MSG_COMPLETE,<span class="number">3000</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView recyclerView, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onScrolled(recyclerView, dx, dy);</div><div class="line">        lastVisibleItem=layoutManager.findLastVisibleItemPosition();</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>handler模拟加载数据</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> Handler handler=<span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            <span class="keyword">switch</span> (msg.what)&#123;</div><div class="line">                <span class="keyword">case</span> MSG_COMPLETE:</div><div class="line">                    List&lt;String&gt; lists=<span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">6</span> ; i++) &#123;</div><div class="line">                        lists.add(<span class="string">"刷新"</span>+i);</div><div class="line">                    &#125;</div><div class="line">                    mDatas.addAll(<span class="number">0</span>,lists);</div><div class="line">                    adapter.notifyDataSetChanged();</div><div class="line">                    mSwipeRefreshLayout.setRefreshing(<span class="keyword">false</span>);</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div></pre></td></tr></table></figure>
<h5 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h5><p>用 StaggeredGridLayoutManager 实现瀑布流时，上拉加载更多提前预加载：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mRecyclerView.addOnScrollListener(getOnBottomListener(layoutManager));</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PRELOAD_SIZE = <span class="number">6</span>;</div><div class="line"></div><div class="line">RecyclerView.<span class="function">OnScrollListener <span class="title">getOnBottomListener</span><span class="params">(<span class="keyword">final</span> StaggeredGridLayoutManager layoutManager)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RecyclerView.OnScrollListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onScrolled</span><span class="params">(RecyclerView rv, <span class="keyword">int</span> dx, <span class="keyword">int</span> dy)</span> </span>&#123;</div><div class="line">                <span class="keyword">boolean</span> isBottom =</div><div class="line">                        layoutManager.findLastCompletelyVisibleItemPositions(<span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>])[<span class="number">1</span>] &gt;=</div><div class="line">                                beautymapImgAdapter.getItemCount() - PRELOAD_SIZE;</div><div class="line">                <span class="keyword">if</span> (!mRefreshLayout.isRefreshing() &amp;&amp; isBottom &amp;&amp; beautymapImageInfoList.size() &gt;= <span class="number">10</span>) &#123;</div><div class="line">                    <span class="keyword">if</span> (!mIsFirstTimeTouchBottom) &#123;</div><div class="line">                        mRefreshLayout.setRefreshing(<span class="keyword">true</span>);</div><div class="line">                        getBeautyGalleryListFromNet(pageNum + <span class="number">1</span>);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        mIsFirstTimeTouchBottom = <span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android RecyclerView使用全解析]]></title>
      <url>http://yoursite.com/2015/10/10/Android-RecyclerView%E4%BD%BF%E7%94%A8%E5%85%A8%E8%A7%A3%E6%9E%90%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      <content type="html"><![CDATA[<h3 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h3><p>整体上看RecyclerView架构，提供了一种插拔式的体验，高度的解耦，异常的灵活，通过设置它提供的不同LayoutManager，ItemDecoration , ItemAnimator实现令人瞠目的效果。</p>
<p><li>你想要控制其显示的方式，请通过布局管理器LayoutManager（代替listview、gridview、horgiridview、瀑布流）</li></p>
<p><li>你想要控制Item间的间隔（可绘制），请通过ItemDecoration（默认没有间隔，特别难看）</li></p>
<p><li>你想要控制Item增删的动画，请通过ItemAnimator</li></p>
<p><li>你想要控制点击、长按事件，请自己写（接口回调）</li></p>
<h3 id="二、导入"><a href="#二、导入" class="headerlink" title="二、导入"></a>二、导入</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.android.support:recyclerview-v7:23.0.1'</span></div></pre></td></tr></table></figure>
<h3 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h3><p>RecyclerView的使用代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">	mRecyclerView = findView(R.id.id_recyclerview);</div><div class="line">	<span class="comment">//设置布局管理器  </span></div><div class="line">	mRecyclerView.setLayoutManager(layoutManager);</div><div class="line">	<span class="comment">//设置adapter</span></div><div class="line">	mRecyclerView.setAdapter(adapter)</div><div class="line">	<span class="comment">//设置Item增加、移除动画</span></div><div class="line">	mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</div><div class="line">	<span class="comment">//添加分割线</span></div><div class="line">	mRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(</div><div class="line">	                getActivity(), DividerItemDecoration.HORIZONTAL_LIST));</div><div class="line"></div><div class="line">RecyclerView代表的意义是，我只管Recycler View，也就是说RecyclerView只管回收与复用View，其他的你可以自己去设置。可以看出其高度的解耦，给予你充分的定制自由（所以你才可以轻松的通过这个控件实现ListView,GirdView，瀑布流等效果）。</div></pre></td></tr></table></figure>
<h4 id="RecyclerView设置Adapter"><a href="#RecyclerView设置Adapter" class="headerlink" title="RecyclerView设置Adapter"></a>RecyclerView设置Adapter</h4><p>RecyclerView 自带adapter、viewHolder 继承他们</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">SimpleAdapter</span>.<span class="title">MyViewHolder</span>&gt;</span>&#123;    </div><div class="line"></div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; mDatas;</div><div class="line">    <span class="keyword">public</span> Context context;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleAdapter</span><span class="params">(MainActivity mainActivity, List&lt;String&gt; mDatas)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.mDatas=mDatas;</div><div class="line">        <span class="keyword">this</span>.context=mainActivity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> MyViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</div><div class="line">        MyViewHolder holder = <span class="keyword">new</span> MyViewHolder(LayoutInflater.from(context).inflate(R.layout.recycle_item, parent, <span class="keyword">false</span>));</div><div class="line">        <span class="keyword">return</span> holder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(MyViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">         holder.tv.setText(mDatas.get(position));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> mDatas.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="class"><span class="keyword">class</span> <span class="title">MyViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;</div><div class="line"></div><div class="line">        TextView tv;</div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyViewHolder</span><span class="params">(View itemView)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>(itemView);</div><div class="line">            tv= (TextView) itemView.findViewById(R.id.tv);</div><div class="line">        &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/recyclerview_type.png"></p>
<h4 id="替代ListView"><a href="#替代ListView" class="headerlink" title="替代ListView"></a>替代ListView</h4><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/listvioew_nodivider.png" width="300dp" height="500dp"></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mRecyclerView= (RecyclerView) findViewById(R.id.recycleview);</div><div class="line">RecyclerView.LayoutManager layoutManager=<span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</div><div class="line">mRecyclerView.setLayoutManager(layoutManager);</div></pre></td></tr></table></figure>
<p>演示效果你会发现item之间没有分界线，你去找时，你又会发现recyclerview没有divider这个属性。此时有两个办法可以解决：</p>
<p><li>1.你可以给item的布局设置margin值</li></p>
<p><li>2.定制分割线</li></p>
<h5 id="ItemDecoration"><a href="#ItemDecoration" class="headerlink" title="ItemDecoration"></a>ItemDecoration</h5><p>我们可以通过该方法添加分割线： </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mRecyclerView.addItemDecoration()</div></pre></td></tr></table></figure>
<p>该方法的参数为RecyclerView.ItemDecoration，该类为抽象类，官方目前并没有提供默认的实现类（我觉得最好能提供几个）。 </p>
<p>该类的源码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ItemDecoration</span> </span>&#123;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">            onDraw(c, parent);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDrawOver</span><span class="params">(Canvas c, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">            onDrawOver(c, parent);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, State state)</span> </span>&#123;</div><div class="line">            getItemOffsets(outRect, ((LayoutParams) view.getLayoutParams()).getViewLayoutPosition(),</div><div class="line">                    parent);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Deprecated</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition, RecyclerView parent)</span> </span>&#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>当我们调用mRecyclerView.addItemDecoration()方法添加decoration的时候，RecyclerView在绘制的时候，去会绘制decorator，即调用该类的onDraw和onDrawOver方法，</p>
<p><li>onDraw方法先于drawChildren</li></p>
<p><li>onDrawOver在drawChildren之后，一般我们选择复写其中一个即可。</li></p>
<p><li>getItemOffsets 可以通过outRect.set()为每个Item设置一定的偏移量，主要用于绘制Decorator。</li></p>
<p>接下来我们看一个RecyclerView.ItemDecoration的实现类，该类很好的实现了RecyclerView添加分割线（当使用LayoutManager为LinearLayoutManager时）。 </p>
<h5 id="DividerItemDecoration"><a href="#DividerItemDecoration" class="headerlink" title="DividerItemDecoration"></a>DividerItemDecoration</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = <span class="keyword">new</span> <span class="keyword">int</span>[]&#123;</div><div class="line">            android.R.attr.listDivider</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> HORIZONTAL_LIST = LinearLayoutManager.HORIZONTAL;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> VERTICAL_LIST = LinearLayoutManager.VERTICAL;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Drawable mDivider;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mOrientation;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DividerItemDecoration</span><span class="params">(Context context, <span class="keyword">int</span> orientation)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(ATTRS);</div><div class="line">        mDivider = a.getDrawable(<span class="number">0</span>);</div><div class="line">        a.recycle();</div><div class="line">        setOrientation(orientation);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrientation</span><span class="params">(<span class="keyword">int</span> orientation)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (orientation != HORIZONTAL_LIST &amp;&amp; orientation != VERTICAL_LIST) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"invalid orientation"</span>);</div><div class="line">        &#125;</div><div class="line">        mOrientation = orientation;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        Log.v(<span class="string">"recyclerview - itemdecoration"</span>, <span class="string">"onDraw()"</span>);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) &#123;</div><div class="line">            drawVertical(c, parent);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            drawHorizontal(c, parent);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> left = parent.getPaddingLeft();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> right = parent.getWidth() - parent.getPaddingRight();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            android.support.v7.widget.RecyclerView v = <span class="keyword">new</span> android.support.v7.widget.RecyclerView(parent.getContext());</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getBottom() + params.bottomMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> top = parent.getPaddingTop();</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> bottom = parent.getHeight() - parent.getPaddingBottom();</div><div class="line"></div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getRight() + params.rightMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = left + mDivider.getIntrinsicHeight();</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition, RecyclerView parent)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (mOrientation == VERTICAL_LIST) &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该实现类可以看到通过读取系统主题中的 android.R.attr.listDivider作为Item间的分割线，并且支持横向和纵向。</p>
<p>获取到listDivider以后，该属性的值是个Drawable，在getItemOffsets中，outRect去设置了绘制的范围。onDraw中实现了真正的绘制。</p>
<p>我们在原来的代码中添加一句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mRecyclerView.addItemDecoration(<span class="keyword">new</span> DividerItemDecoration(<span class="keyword">this</span>,</div><div class="line">DividerItemDecoration.VERTICAL_LIST));</div></pre></td></tr></table></figure>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/listview_divider.png" width="300dp" height="500dp"></p>
<p>该分割线是系统默认的，你可以在theme.xml中找到该属性的使用情况。那么，使用系统的listDivider有什么好处呢？就是方便我们去随意的改变，该属性我们可以直接声明在：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;!-- Application theme. --&gt;</div><div class="line">  &lt;style name="AppTheme" parent="AppBaseTheme"&gt;</div><div class="line">    &lt;item name="android:listDivider"&gt;@drawable/divider_bg&lt;/item&gt;  </div><div class="line">  &lt;/style&gt;</div></pre></td></tr></table></figure>
<p>然后自己写个drawable即可，下面我们换一种分隔符：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;shape xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:shape="rectangle" &gt;</div><div class="line"></div><div class="line">    &lt;gradient</div><div class="line">        android:centerColor="#ff00ff00"</div><div class="line">        android:endColor="#ff0000ff"</div><div class="line">        android:startColor="#ffff0000"</div><div class="line">        android:type="linear" /&gt;</div><div class="line">    &lt;size android:height="4dp"/&gt;</div><div class="line"></div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/listview_custom_divider.png" width="300dp" height="500dp"></p>
<h4 id="LayoutManager"><a href="#LayoutManager" class="headerlink" title="LayoutManager"></a>LayoutManager</h4><p>上面实现了类似ListView样子的Demo，通过使用其默认的LinearLayoutManager。</p>
<p>RecyclerView.LayoutManager吧，这是一个抽象类，好在系统提供了3个实现类：</p>
<p><li>LinearLayoutManager 线性管理器，支持横向、纵向。</li></p>
<p><li>GridLayoutManager 网格布局管理器</li></p>
<p><li>StaggeredGridLayoutManager 瀑布流式布局管理器</li></p>
<p>上面我们已经初步体验了下LinearLayoutManager，接下来看GridLayoutManager。</p>
<h5 id="GridLayoutManager"><a href="#GridLayoutManager" class="headerlink" title="GridLayoutManager"></a>GridLayoutManager</h5><p>我们尝试去实现类似GridView，秒秒钟的事情：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mRecyclerView.setLayoutManager(new LinearLayoutManager(this));</span></div><div class="line">  mRecyclerView.setLayoutManager(<span class="keyword">new</span> GridLayoutManager(<span class="keyword">this</span>,<span class="number">4</span>));   <span class="comment">//4列</span></div></pre></td></tr></table></figure>
<p>只需要修改LayoutManager即可，还是很nice的。</p>
<p>当然了，改为GridLayoutManager以后，对于分割线，前面的DividerItemDecoration就不适用了，主要是因为它在绘制的时候，比如水平线，针对每个child的取值为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> left = parent.getPaddingLeft();</div><div class="line"><span class="keyword">final</span> <span class="keyword">int</span> right = parent.getWidth() - parent.getPaddingRight();</div></pre></td></tr></table></figure>
<p>因为每个Item一行，这样是没问题的。而GridLayoutManager时，一行有多个childItem，这样就多次绘制了，并且GridLayoutManager时，Item如果为最后一列（则右边无间隔线）或者为最后一行（底部无分割线）。</p>
<p>针对上述，我们编写了DividerGridItemDecoration。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DividerGridItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span></span></div><div class="line">&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span>[] ATTRS = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; android.R.attr.listDivider &#125;;</div><div class="line">    <span class="keyword">private</span> Drawable mDivider;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DividerGridItemDecoration</span><span class="params">(Context context)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">final</span> TypedArray a = context.obtainStyledAttributes(ATTRS);</div><div class="line">        mDivider = a.getDrawable(<span class="number">0</span>);</div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas c, RecyclerView parent, State state)</span></span></div><div class="line">    &#123;</div><div class="line"></div><div class="line">        drawHorizontal(c, parent);</div><div class="line">        drawVertical(c, parent);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSpanCount</span><span class="params">(RecyclerView parent)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="comment">// 列数</span></div><div class="line">        <span class="keyword">int</span> spanCount = -<span class="number">1</span>;</div><div class="line">        LayoutManager layoutManager = parent.getLayoutManager();</div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager)</div><div class="line">        &#123;</div><div class="line"></div><div class="line">            spanCount = ((GridLayoutManager) layoutManager).getSpanCount();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> StaggeredGridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            spanCount = ((StaggeredGridLayoutManager) layoutManager)</div><div class="line">                    .getSpanCount();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> spanCount;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawHorizontal</span><span class="params">(Canvas c, RecyclerView parent)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getLeft() - params.leftMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = child.getRight() + params.rightMargin</div><div class="line">                    + mDivider.getIntrinsicWidth();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getBottom() + params.bottomMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = top + mDivider.getIntrinsicHeight();</div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawVertical</span><span class="params">(Canvas c, RecyclerView parent)</span></span></div><div class="line">    &#123;</div><div class="line">        <span class="keyword">final</span> <span class="keyword">int</span> childCount = parent.getChildCount();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">final</span> View child = parent.getChildAt(i);</div><div class="line"></div><div class="line">            <span class="keyword">final</span> RecyclerView.LayoutParams params = (RecyclerView.LayoutParams) child</div><div class="line">                    .getLayoutParams();</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> top = child.getTop() - params.topMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> bottom = child.getBottom() + params.bottomMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> left = child.getRight() + params.rightMargin;</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> right = left + mDivider.getIntrinsicWidth();</div><div class="line"></div><div class="line">            mDivider.setBounds(left, top, right, bottom);</div><div class="line">            mDivider.draw(c);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLastColum</span><span class="params">(RecyclerView parent, <span class="keyword">int</span> pos, <span class="keyword">int</span> spanCount,</span></span></div><div class="line">            <span class="keyword">int</span> childCount)</div><div class="line">    &#123;</div><div class="line">        LayoutManager layoutManager = parent.getLayoutManager();</div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">if</span> ((pos + <span class="number">1</span>) % spanCount == <span class="number">0</span>)<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">            &#123;</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> StaggeredGridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> orientation = ((StaggeredGridLayoutManager) layoutManager)</div><div class="line">                    .getOrientation();</div><div class="line">            <span class="keyword">if</span> (orientation == StaggeredGridLayoutManager.VERTICAL)</div><div class="line">            &#123;</div><div class="line">                <span class="keyword">if</span> ((pos + <span class="number">1</span>) % spanCount == <span class="number">0</span>)<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            &#123;</div><div class="line">                childCount = childCount - childCount % spanCount;</div><div class="line">                <span class="keyword">if</span> (pos &gt;= childCount)<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">isLastRaw</span><span class="params">(RecyclerView parent, <span class="keyword">int</span> pos, <span class="keyword">int</span> spanCount,</span></span></div><div class="line">            <span class="keyword">int</span> childCount)</div><div class="line">    &#123;</div><div class="line">        LayoutManager layoutManager = parent.getLayoutManager();</div><div class="line">        <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> GridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            childCount = childCount - childCount % spanCount;</div><div class="line">            <span class="keyword">if</span> (pos &gt;= childCount)<span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (layoutManager <span class="keyword">instanceof</span> StaggeredGridLayoutManager)</div><div class="line">        &#123;</div><div class="line">            <span class="keyword">int</span> orientation = ((StaggeredGridLayoutManager) layoutManager)</div><div class="line">                    .getOrientation();</div><div class="line">            <span class="comment">// StaggeredGridLayoutManager 且纵向滚动</span></div><div class="line">            <span class="keyword">if</span> (orientation == StaggeredGridLayoutManager.VERTICAL)</div><div class="line">            &#123;</div><div class="line">                childCount = childCount - childCount % spanCount;</div><div class="line">                <span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">                <span class="keyword">if</span> (pos &gt;= childCount)</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125; <span class="keyword">else</span></div><div class="line">            <span class="comment">// StaggeredGridLayoutManager 且横向滚动</span></div><div class="line">            &#123;</div><div class="line">                <span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">                <span class="keyword">if</span> ((pos + <span class="number">1</span>) % spanCount == <span class="number">0</span>)</div><div class="line">                &#123;</div><div class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, <span class="keyword">int</span> itemPosition,</span></span></div><div class="line">            RecyclerView parent)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">int</span> spanCount = getSpanCount(parent);</div><div class="line">        <span class="keyword">int</span> childCount = parent.getAdapter().getItemCount();</div><div class="line">        <span class="keyword">if</span> (isLastRaw(parent, itemPosition, spanCount, childCount))<span class="comment">// 如果是最后一行，则不需要绘制底部</span></div><div class="line">        &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(), <span class="number">0</span>);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isLastColum(parent, itemPosition, spanCount, childCount))<span class="comment">// 如果是最后一列，则不需要绘制右边</span></div><div class="line">        &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicHeight());</div><div class="line">        &#125; <span class="keyword">else</span></div><div class="line">        &#123;</div><div class="line">            outRect.set(<span class="number">0</span>, <span class="number">0</span>, mDivider.getIntrinsicWidth(),</div><div class="line">                    mDivider.getIntrinsicHeight());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>主要在getItemOffsets方法中，去判断如果是最后一行，则不需要绘制底部；如果是最后一列，则不需要绘制右边，整个判断也考虑到了StaggeredGridLayoutManager的横向和纵向，所以稍稍有些复杂。最重要还是去理解，如何绘制什么的不重要。一般如果仅仅是希望有空隙，还是去设置item的margin方便。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/gridview.png" width="300dp" height="500dp"></p>
<h5 id="StaggeredGridLayoutMnager"><a href="#StaggeredGridLayoutMnager" class="headerlink" title="StaggeredGridLayoutMnager"></a>StaggeredGridLayoutMnager</h5><p>瀑布流式的布局，其实他可以实现GridLayoutManager一样的功能，仅仅按照下列代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// mRecyclerView.setLayoutManager(new GridLayoutManager(this,4));</span></div><div class="line">   mRecyclerView.setLayoutManager(<span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">4</span>,        StaggeredGridLayoutManager.VERTICAL));</div><div class="line">   layoutManager.setGapStrategy(StaggeredGridLayoutManager.GAP_HANDLING_NONE);<span class="comment">//可防止Item切换</span></div></pre></td></tr></table></figure>
<p>这两种写法显示的效果是一致的，但是注意StaggeredGridLayoutManager构造的第二个参数传一个orientation，如果传入的是StaggeredGridLayoutManager.VERTICAL代表有多少列；那么传入的如果是StaggeredGridLayoutManager.HORIZONTAL就代表有多少行，比如本例如果改为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mRecyclerView.setLayoutManager(<span class="keyword">new</span> StaggeredGridLayoutManager(<span class="number">4</span>,</div><div class="line">        StaggeredGridLayoutManager.HORIZONTAL));</div></pre></td></tr></table></figure>
<p>可以看到，固定为4行，变成了左右滑动。有一点需要注意，如果是横向的时候，item的宽度需要注意去设置，毕竟横向的宽度没有约束了，应为控件可以横向滚动了。<br>如果你需要一样横向滚动的GridView，那么恭喜你。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/hor_gridview.gif"></p>
<h5 id="用RecyclerView实现瀑布流"><a href="#用RecyclerView实现瀑布流" class="headerlink" title="用RecyclerView实现瀑布流"></a>用RecyclerView实现瀑布流</h5><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/pull.png" width="300dp" height="500dp"></p>
<p>只要使用StaggeredGridLayoutManager我们就已经实现了，只是上面的item布局我们使用了固定的高度，下面我们仅仅在适配器的onBindViewHolder方法中为我们的item设置个随机的高度</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mHeights = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mDatas.size(); i++) &#123;</div><div class="line">           mHeights.add((<span class="keyword">int</span>) (<span class="number">100</span> + Math.random() * <span class="number">300</span>));    <span class="comment">//产生100-400的随机高度</span></div><div class="line">       &#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(PullViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">       ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();</div><div class="line">       lp.height=mHeights.get(position);</div><div class="line">       holder.itemView.setLayoutParams(lp);          <span class="comment">//设置item的高度</span></div><div class="line">       holder.tv.setText(mDatas.get(position));</div><div class="line"></div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h4 id="ItemAnimator"><a href="#ItemAnimator" class="headerlink" title="ItemAnimator"></a>ItemAnimator</h4><p>ItemAnimator也是一个抽象类，好在系统为我们提供了一种默认的实现类，期待系统多<br>添加些默认的实现。</p>
<p>借助默认的实现，当Item添加和移除的时候，添加动画效果很简单:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置item动画</span></div><div class="line">mRecyclerView.setItemAnimator(<span class="keyword">new</span> DefaultItemAnimator());</div></pre></td></tr></table></figure>
<p>注意，这里更新数据集不是用adapter.notifyDataSetChanged()而是<br>notifyItemInserted(position)与notifyItemRemoved(position)<br>否则没有动画效果。 </p>
<p>上述为adapter中添加了两个方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">        mDatas.add(position, <span class="string">"Insert One"</span>);</div><div class="line">        notifyItemInserted(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeData</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            mDatas.remove(position);</div><div class="line">        notifyItemRemoved(position);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>Activity中点击MenuItem触发：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span></span></div><div class="line">&#123;</div><div class="line">    getMenuInflater().inflate(R.menu.main, menu);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">super</span>.onCreateOptionsMenu(menu);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">switch</span> (item.getItemId())</div><div class="line">    &#123;</div><div class="line">    <span class="keyword">case</span> R.id.id_action_add:</div><div class="line">        mAdapter.addData(<span class="number">1</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    <span class="keyword">case</span> R.id.id_action_delete:</div><div class="line">        mAdapter.removeData(<span class="number">1</span>);</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/pull_animator.gif"><br>当然了只提供了一种动画，那么我们肯定可以去自定义各种nice的动画效果。 </p>
<p>高兴的是，github上已经有很多类似的项目了，这里我们直接引用下：RecyclerViewItemAnimators，大家自己下载查看。 </p>
<p>提供了SlideInOutLeftItemAnimator,SlideInOutRightItemAnimator,<br>SlideInOutTopItemAnimator,SlideInOutBottomItemAnimator等动画效果。</p>
<h4 id="Click-and-LongClick"><a href="#Click-and-LongClick" class="headerlink" title="Click and LongClick"></a>Click and LongClick</h4><p>不过一个挺郁闷的地方就是，系统没有提供ClickListener和LongClickListener。</p>
<p>不过我们也可以自己去添加，只是会多了些代码而已。 </p>
<p>实现的方式比较多，你可以通过mRecyclerView.addOnItemTouchListener去监听然后去判断手势，<br>当然你也可以通过adapter中自己去提供回调，这里我们选择后者，前者的方式，大家有兴趣自己去实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PullAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">PullViewHolder</span>&gt; </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ItemClickListener</span></span>&#123;</div><div class="line">        <span class="function"><span class="keyword">void</span> <span class="title">onItemClickListener</span><span class="params">(View view,<span class="keyword">int</span> position)</span></span>;</div><div class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">onItemLongClickListener</span><span class="params">(View view,<span class="keyword">int</span> position)</span></span>;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> ItemClickListener mItemClickListener;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnItemClickListener</span><span class="params">(ItemClickListener itemClickListener)</span></span>&#123;</div><div class="line">        <span class="keyword">this</span>.mItemClickListener=itemClickListener;</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> PullViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line"></div><div class="line">        ViewGroup.LayoutParams lp = holder.itemView.getLayoutParams();</div><div class="line">        lp.height=mHeights.get(position);</div><div class="line">        holder.itemView.setLayoutParams(lp);</div><div class="line">        holder.tv.setText(mDatas.get(position));</div><div class="line">        <span class="keyword">if</span>(mItemClickListener != <span class="keyword">null</span>)&#123;</div><div class="line"></div><div class="line">            holder.itemView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">int</span> pos=holder.getLayoutPosition();       <span class="comment">//这个位置position注意</span></div><div class="line">                    mItemClickListener.onItemClickListener(holder.itemView,pos);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            holder.itemView.setOnLongClickListener(<span class="keyword">new</span> View.OnLongClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onLongClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    <span class="keyword">int</span> pos=holder.getLayoutPosition();</div><div class="line">                    <span class="keyword">return</span>  mItemClickListener.onItemLongClickListener(holder.itemView,pos);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>在Activity中</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">adapter.setOnItemClickListener(<span class="keyword">new</span> PullAdapter.ItemClickListener() &#123;</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClickListener</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">              Toast.makeText(PullActivity.<span class="keyword">this</span>,<span class="string">"Click"</span>+position,Toast.LENGTH_SHORT).show();</div><div class="line">          &#125;</div><div class="line">	</div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onItemLongClickListener</span><span class="params">(View view, <span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">              Toast.makeText(PullActivity.<span class="keyword">this</span>,<span class="string">"LongClick"</span>+position,Toast.LENGTH_SHORT).show();</div><div class="line">              <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>adapter中自己定义了个接口，然后在onBindViewHolder中去为holder.itemView去设置相应<br>的监听最后回调我们设置的监听。</p>
<p>最后别忘了给item添加一个drawable:</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line">&lt;selector xmlns:android="http://schemas.android.com/apk/res/android" &gt;</div><div class="line">    &lt;item android:state_pressed="true" android:drawable="@color/color_item_press"&gt;&lt;/item&gt;</div><div class="line">    &lt;item android:drawable="@color/color_item_normal"&gt;&lt;/item&gt;</div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>到此我们基本介绍了RecylerView常见用法，包含了：</p>
<p><li>系统提供了几种LayoutManager的使用；</li></p>
<p><li>如何通过自定义ItemDecoration去设置分割线，或者一些你想作为分隔的drawable，注意这里 </li></p>
<p><li>巧妙的使用了系统的listDivider属性，你可以尝试添加使用divider和dividerHeight属性。</li></p>
<p><li>如何使用ItemAnimator为RecylerView去添加Item移除、添加的动画效果。</li></p>
<p><li>介绍了如何添加ItemClickListener与ItemLongClickListener。</li></p>
<p>可以看到RecyclerView可以实现：</p>
<p><li>ListView的功能</li></p>
<p><li>GridView的功能</li></p>
<p><li>横向ListView的功能，参考Android 自定义RecyclerView 实现真正的Gallery效果</li></p>
<p><li>横向ScrollView的功能</li></p>
<p><li>瀑布流效果</li></p>
<p><li>便于添加Item增加和移除动画</li></p>
<p>通过简单改变下LayoutManager，就可以产生不同的效果，那么我们可以根据手机屏幕的宽度去动态设置LayoutManager，屏幕宽度一般的，显示为ListView；宽度稍大的显示两列的GridView或者瀑布流（或者横纵屏幕切换时变化，有点意思~）；显示的列数和宽度成正比。甚至某些特殊屏幕，让其横向滑动~~再选择一个nice的动画效果，相信这种插件式的编码体验一定会让你迅速爱上RecyclerView。</p>
<p>最后说明：</p>
<p>此文章转载于：<br><a href="http://blog.csdn.net/lmj623565791/article/details/45059587" target="_blank" rel="external">http://blog.csdn.net/lmj623565791/article/details/45059587</a></p>
<p>本文出自:<a href="
http://blog.csdn.net/lmj623565791" target="_blank" rel="external">【张鸿洋的博客】</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android沉浸式通知栏的一个开源库SystemBarTint的使用]]></title>
      <url>http://yoursite.com/2015/10/10/Android%E6%B2%89%E6%B5%B8%E5%BC%8F%E9%80%9A%E7%9F%A5%E6%A0%8F%E7%9A%84%E4%B8%80%E4%B8%AA%E5%BC%80%E6%BA%90%E5%BA%93SystemBarTint%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h3 id="一、导入："><a href="#一、导入：" class="headerlink" title="一、导入："></a>一、导入：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">compile <span class="string">'com.readystatesoftware.systembartint:systembartint:1.0.3'</span></div></pre></td></tr></table></figure>
<h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>沉浸式是androd4.4出现的，所以android系统必须是4.4之后的系统才会有此效果</p>
<p>android5.0之后，有一些组件设置主题之后，就会有沉浸式的效果。</p>
<p>这是官方给的例子，确实是这么用</p>
<h4 id="使用一：-（设置颜色）"><a href="#使用一：-（设置颜色）" class="headerlink" title="使用一： （设置颜色）"></a>使用一： （设置颜色）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MatchActionBarActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123; </div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">		setContentView(R.layout.activity_match_actionbar);</div><div class="line"></div><div class="line">		<span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">			setTranslucentStatus(<span class="keyword">true</span>);</div><div class="line">		&#125;</div><div class="line"></div><div class="line">		SystemBarTintManager tintManager = <span class="keyword">new</span> SystemBarTintManager(<span class="keyword">this</span>);</div><div class="line">		tintManager.setStatusBarTintEnabled(<span class="keyword">true</span>);</div><div class="line">		tintManager.setStatusBarTintResource(R.color.statusbar_bg);<span class="comment">//通知栏所需颜色</span></div><div class="line">           setTranslucentStatus(<span class="keyword">true</span>);</div><div class="line"></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@TargetApi</span>(<span class="number">19</span>) </div><div class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setTranslucentStatus</span><span class="params">(<span class="keyword">boolean</span> on)</span> </span>&#123;</div><div class="line">		Window win = getWindow();</div><div class="line">		WindowManager.LayoutParams winParams = win.getAttributes();</div><div class="line">		<span class="keyword">final</span> <span class="keyword">int</span> bits = WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS;</div><div class="line">		<span class="keyword">if</span> (on) &#123;</div><div class="line">			winParams.flags |= bits;</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">			winParams.flags &amp;= ~bits;</div><div class="line">		&#125;</div><div class="line">		win.setAttributes(winParams);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="使用二：（设置图片）"><a href="#使用二：（设置图片）" class="headerlink" title="使用二：（设置图片）"></a>使用二：（设置图片）</h4><figure class="highlight java"><figcaption><span>setSystemBarTintDrawable(getResources().getDrawable(R.drawable.sr_primary));</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">	</div><div class="line">	</div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">setSystemBarTintDrawable</span><span class="params">(Drawable tintDrawable)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">           SystemBarTintManager mTintManager = <span class="keyword">new</span> SystemBarTintManager(<span class="keyword">this</span>);</div><div class="line">           <span class="keyword">if</span> (tintDrawable != <span class="keyword">null</span>) &#123;</div><div class="line">               mTintManager.setStatusBarTintEnabled(<span class="keyword">true</span>);</div><div class="line">               mTintManager.setTintDrawable(tintDrawable);</div><div class="line">           &#125; <span class="keyword">else</span> &#123;</div><div class="line">               mTintManager.setStatusBarTintEnabled(<span class="keyword">false</span>);</div><div class="line">               mTintManager.setTintDrawable(<span class="keyword">null</span>);</div><div class="line">           &#125;</div><div class="line">       &#125;</div><div class="line">	</div><div class="line">   &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[进入 Material Design时代（一）之design包]]></title>
      <url>http://yoursite.com/2015/10/10/%E8%BF%9B%E5%85%A5-Material-Design%E6%97%B6%E4%BB%A3%EF%BC%88%E4%B8%80%EF%BC%89%E4%B9%8Bdesign%E5%8C%85/</url>
      <content type="html"><![CDATA[<h3 id="一、导入"><a href="#一、导入" class="headerlink" title="一、导入"></a>一、导入</h3><a id="more"></a>
<p>导入design包：</p>
<pre><code>compile &apos;com.android.support:design:23.0.1&apos;
</code></pre><h3 id="二、主要使用组件"><a href="#二、主要使用组件" class="headerlink" title="二、主要使用组件"></a>二、主要使用组件</h3><h3> AppBarlayout:</h3> 

<p>AppBarLayout是继承LinearLayout实现的一个ViewGroup容器组件，它是为了Material Design设计的App Bar,支持手势滑动操作。</p>
<p>默认的AppBarLayout是垂直方向的，它的作用是把AppBarLayout包裹的内容都作为AppBar。</p>
<p><b>常用效果是：将Toolbar 和Tablayout的组合部分共同构成 AppBar的效果。</b></p>
<p><b>注意：</b>AppBarLayout必须作为Toolbar的父布局容器</p>
<p>AppBarLayout是支持手势滑动效果的，不过的跟CoordinatorLayout配合使用<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/appbarlayout.png"></p>
<h3>Coordinatorlayout:</h3>

<p>CoordinatorLayout是一个增强型的FrameLayout。它的作用有两个：</p>
<p><li>1.作为一个布局的根布局 </li></p>
<p><li>2.最后一个为子视图之间相互协调手势效果的一个协调布局</li></p>
<p>布局文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">&lt;android.support.design.widget.CoordinatorLayout</div><div class="line">       xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:app="http://schemas.android.com/apk/res-auto"</div><div class="line">    android:id="@+id/main_content"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"&gt;</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.AppBarLayout</div><div class="line">        android:id="@+id/appbar"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"&gt;</div><div class="line"></div><div class="line">        &lt;android.support.v7.widget.Toolbar</div><div class="line">            android:id="@+id/toolbar"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="?attr/actionBarSize"</div><div class="line">            android:background="?attr/colorPrimary"</div><div class="line">            app:popupTheme="@style/ThemeOverlay.AppCompat.Light"</div><div class="line">            app:layout_scrollFlags="scroll|enterAlways" /&gt;</div><div class="line"></div><div class="line">        &lt;android.support.design.widget.TabLayout</div><div class="line">            android:id="@+id/tabs"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="wrap_content" /&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v4.view.ViewPager</div><div class="line">        android:id="@+id/viewpager"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        app:layout_behavior="@string/appbar_scrolling_view_behavior" /&gt;</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.FloatingActionButton</div><div class="line">        android:id="@+id/fab"</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_gravity="end|bottom"</div><div class="line">        android:layout_margin="@dimen/fab_margin"</div><div class="line">        android:src="@drawable/ic_done" /&gt;</div><div class="line"></div><div class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div></pre></td></tr></table></figure>
<p>Acitvity:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">setSupportActionBar(toolbar);</div><div class="line">	</div><div class="line"><span class="keyword">final</span> ActionBar ab = getSupportActionBar();</div><div class="line">ab.setHomeAsUpIndicator(R.drawable.ic_menu);</div><div class="line"> ab.setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">   TabLayout tabLayout = (TabLayout) findViewById(R.id.tabs);</div><div class="line">   tabLayout.setupWithViewPager(viewPager);    <span class="comment">//design包自带的TabLayout自带和viewpager关联的方法</span></div></pre></td></tr></table></figure>
<p>效果：<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/演示coordinatorLayout.gif"></p>
<p>代码介绍：</p>
<h4 id="1"><a href="#1" class="headerlink" title="1."></a>1.</h4><p>由于CoordinatorLayout是FrameLayout布局，我们可以通过<br><code avrasm="" class="hljs">android:layout_gravity=bottom|end</code><br>属性来控制组件在整个布局中的位置，比如上面效果中的FAB就是通过android:layout_gravity=”bottom|end”来确定 FAB的位置在底端的最右边的位置。</p>
<h4 id="2"><a href="#2" class="headerlink" title="2."></a>2.</h4><p>为了达到上面效果图的手势动画效果，我们必须做如下设置，通过app:layout_scrollFlags=”scroll|enterAlways” 属性来确定哪个组件是可滑动的</p>
<p>设置的layout_scrollFlags有如下几种选项：</p>
<p><li>scroll: 所有想滚动出屏幕的view都需要设置这个flag- 没有设置这个flag的view将被固定在屏幕顶部。</li></p>
<p><li>enterAlways: 这个flag让任意向下的滚动都会导致该view变为可见，启用快速“返回模式”。</li></p>
<p><li>enterAlwaysCollapsed: 当你的视图已经设置minHeight属性又使用此标志时，你的视图只能已最小高度进入，只有当滚动视图到达顶部时才扩大到完整高度。</li></p>
<p><li>exitUntilCollapsed: 滚动退出屏幕，最后折叠在顶端。</li></p>
<p>我们上面的布局中 给Toolbar设置了app:layout_scrollFlags属性，因此，Toolbar是可以滚动出屏幕，且向下滚动有可以出现。</p>
<h4 id="3"><a href="#3" class="headerlink" title="3."></a>3.</h4><p>为了使得Toolbar可以滑动，我们必须还得有个条件，就是CoordinatorLayout布局下包裹一个可以滑动的布局，比如 RecyclerView，ViewPager,NestedScrollView(经过测试，ListView，ScrollView不支持)具有滑动效果的组件。并且给这些组件设置如下属性来告诉CoordinatorLayout，该组件是带有滑动行为的组件，然后CoordinatorLayout在接受到滑动时会通知AppBarLayout 中可滑动的Toolbar可以滑出屏幕了。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:layout_behavior=<span class="meta">@string</span>/appbar_scrolling_view_behavior</div></pre></td></tr></table></figure>
<h4 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h4><p>为了使得Toolbar有滑动效果，必须做到如下三点：</p>
<p><li>CoordinatorLayout必须作为整个布局的父布局容器。</li></p>
<p><li>给需要滑动的组件设置 app:layout_scrollFlags=”scroll|enterAlways” 属性。 (ToolBar)</li></p>
<p><li>给你的可滑动的组件，也就是RecyclerView、ViewPager或者 NestedScrollView 设置如下属性：</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:layout_behavior=<span class="meta">@string</span>/appbar_scrolling_view_behavior</div></pre></td></tr></table></figure>
<h3>CollapsingToolbarLayout:</h3>

<p>CollapsingToolbarLayout包裹 Toolbar 的时候提供一个可折叠的 Toolbar，一般作为AppbarLayout的子视图使用。</p>
<p>CollapsingToolbarLayout 提供以下属性和方法是用：</p>
<ol>
<li><p>Collapsing title：ToolBar的标题，当CollapsingToolbarLayout全屏没有折叠时，title显示的是大字体，在折叠的过程中，title不断变小到一定大小的效果。你可以调用setTitle(CharSequence)方法设置title。</p>
</li>
<li><p>Content scrim：ToolBar被折叠到顶部固定时候的背景，你可以调用setContentScrim(Drawable)方法改变背景或者 在属性中使用 app:contentScrim=?attr/colorPrimary来改变背景。</p>
</li>
<li><p>Status bar scrim：状态栏的背景，调用方法setStatusBarScrim(Drawable)。还没研究明白，不过这个只能在Android5.0以上系统有效果。</p>
</li>
<li><p>Parallax scrolling children：CollapsingToolbarLayout滑动时，子视图的视觉差，可以通过属性app:layout_collapseParallaxMultiplier=0.6改变。</p>
</li>
<li><p>CollapseMode ：子视图的折叠模式，在子布局中使用。有两种 “pin”：固定模式，在折叠的时候最后固定在顶端；“parallax”：视差模式，在折叠的时候会有个视差折叠的效果。我们可以在布局中使用属性app:layout_collapseMode=parallax来改变。</p>
<p>效果：<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/CollapsingToolbarLayout.gif"></p>
</li>
</ol>
<p>布局文件：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.design.widget.CoordinatorLayout</div><div class="line">    xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:app="http://schemas.android.com/apk/res-auto"</div><div class="line">    android:id="@+id/main_content"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:fitsSystemWindows="true"&gt;</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.AppBarLayout</div><div class="line">        android:id="@+id/appbar"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="@dimen/detail_backdrop_height"</div><div class="line">        android:theme="@style/ThemeOverlay.AppCompat.Dark.ActionBar"</div><div class="line">        android:fitsSystemWindows="true"&gt;</div><div class="line"></div><div class="line">        &lt;android.support.design.widget.CollapsingToolbarLayout</div><div class="line">            android:id="@+id/collapsing_toolbar"</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="match_parent"</div><div class="line">            app:layout_scrollFlags="scroll|exitUntilCollapsed"</div><div class="line">            android:fitsSystemWindows="true"</div><div class="line">            app:contentScrim="?attr/colorPrimary"</div><div class="line">            app:expandedTitleMarginStart="48dp"</div><div class="line">            app:expandedTitleMarginEnd="64dp"&gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/backdrop"</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="match_parent"</div><div class="line">                android:scaleType="centerCrop"</div><div class="line">                android:fitsSystemWindows="true"</div><div class="line">                app:layout_collapseMode="parallax" /&gt;</div><div class="line"></div><div class="line">            &lt;android.support.v7.widget.Toolbar</div><div class="line">                android:id="@+id/toolbar"</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="?attr/actionBarSize"</div><div class="line">                app:popupTheme="@style/ThemeOverlay.AppCompat.Light"</div><div class="line">                app:layout_collapseMode="pin" /&gt;</div><div class="line"></div><div class="line">        &lt;/android.support.design.widget.CollapsingToolbarLayout&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.design.widget.AppBarLayout&gt;</div><div class="line"></div><div class="line">    &lt;android.support.v4.widget.NestedScrollView</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        app:layout_behavior="@string/appbar_scrolling_view_behavior"&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:layout_width="match_parent"</div><div class="line">            android:layout_height="match_parent"</div><div class="line">            android:orientation="vertical"</div><div class="line">            android:paddingTop="24dp"&gt;</div><div class="line"></div><div class="line">            &lt;android.support.v7.widget.CardView</div><div class="line">                android:layout_width="match_parent"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_margin="@dimen/card_margin"&gt;</div><div class="line"></div><div class="line">                &lt;LinearLayout</div><div class="line">                    style="@style/Widget.CardContent"</div><div class="line">                    android:layout_width="match_parent"</div><div class="line">                    android:layout_height="wrap_content"&gt;</div><div class="line"></div><div class="line">                    &lt;TextView</div><div class="line">                        android:layout_width="match_parent"</div><div class="line">                        android:layout_height="wrap_content"</div><div class="line">                        android:text="Info"</div><div class="line">                        android:textAppearance="@style/TextAppearance.AppCompat.Title" /&gt;</div><div class="line"></div><div class="line">                    &lt;TextView</div><div class="line">                        android:layout_width="match_parent"</div><div class="line">                        android:layout_height="wrap_content"</div><div class="line">                        android:text="@string/cheese_ipsum" /&gt;</div><div class="line"></div><div class="line">                &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">            &lt;/android.support.v7.widget.CardView&gt;</div><div class="line"></div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;/android.support.v4.widget.NestedScrollView&gt;</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.FloatingActionButton</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        app:layout_anchor="@id/appbar"</div><div class="line">        app:layout_anchorGravity="bottom|right|end"</div><div class="line">        android:src="@drawable/ic_discuss"</div><div class="line">        android:layout_margin="@dimen/fab_margin"</div><div class="line">        android:clickable="true"/&gt;</div><div class="line"></div><div class="line">&lt;/android.support.design.widget.CoordinatorLayout&gt;</div></pre></td></tr></table></figure>
<p>Activity:</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);</div><div class="line">setSupportActionBar(toolbar);</div><div class="line">getSupportActionBar().setDisplayHomeAsUpEnabled(<span class="keyword">true</span>);</div><div class="line">	</div><div class="line">CollapsingToolbarLayout collaspingToolbar = (CollapsingToolbarLayout) findViewById(R.id.collapsing_toolbar);</div><div class="line">collaspingToolbar.setTitle(cheeseName);</div><div class="line">   ImageView imageview = (ImageView) findViewById(R.id.backdrop);</div><div class="line">   Glide.with(<span class="keyword">this</span>).load(Cheeses.getRandomCheeseDrawable()).centerCrop().into(imageview);</div></pre></td></tr></table></figure>
<h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>CollapsingToolbarLayout主要是提供一个可折叠的Toolbar容器，对容器中的不同视图设置layout_collapseMode折叠模式，来达到不同的折叠效果。</p>
<p>1.Toolbar 的高度layout_height必须固定，不能 “wrap_content”，否则Toolbar不会滑动，也没有折叠效果。</p>
<p>2.为了能让FloatingActionButton也能折叠且消失出现，我们必须给FAB设置锚点属性</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;code class="hljs" perl=""&gt;app:layout_anchor=@id/appbar&lt;/code&gt;</div></pre></td></tr></table></figure>
<p>意思是FAB浮动按钮显示在哪个布局区域。<br>且设置当前锚点的位置</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app:layout_anchorGravity=”bottom|end|right”</div></pre></td></tr></table></figure>
<p>意思FAB浮动按钮在这个布局区域的具体位置。<br>两个属性共同作用才是的FAB 浮动按钮也能折叠消失，出现。</p>
<p>3.给需要有折叠效果的组件设置 layout_collapseMode属性。</p>
<p></p><h3>NavigationView:</h3><br>用于侧滑菜单中的menu布局。之前Google在V4包中推出自己的 DrawerLayout作为抽屉侧滑菜单，其实这次谷歌只是将之前的ListView布局替换成NavigationView了。简化了之前ListView写适配器的繁琐。<p></p>
<p>效果：<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/navigationView.png"></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;android.support.v4.widget.DrawerLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    xmlns:app="http://schemas.android.com/apk/res-auto"</div><div class="line">    android:id="@+id/drawer_layout"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:fitsSystemWindows="true"&gt;</div><div class="line"></div><div class="line">    &lt;include layout="@layout/include_list_viewpager"/&gt;   //主界面布局</div><div class="line"></div><div class="line">    &lt;android.support.design.widget.NavigationView        //侧滑菜单布局</div><div class="line">        android:id="@+id/nav_view"</div><div class="line">        android:layout_height="match_parent"</div><div class="line">        android:layout_width="wrap_content"</div><div class="line">        android:layout_gravity="start"</div><div class="line">        android:fitsSystemWindows="true"</div><div class="line">        app:headerLayout="@layout/nav_header"         //侧滑顶部的头布局</div><div class="line">        app:menu="@menu/drawer_view"/&gt;                //侧滑菜单项</div><div class="line"></div><div class="line">&lt;/android.support.v4.widget.DrawerLayout&gt;</div></pre></td></tr></table></figure>
<p>其中NavigationView 中的 android:layout_gravity=”start” 属性来控制抽屉菜单从哪边滑出，一般“start ”从左边滑出，“end”从右边滑出。</p>
<p>这里最主要的两个属性分别是：</p>
<p>1.app:headerLayout: 给NavigationView添加头部布局</p>
<p>2.app：menu：给NavigationView添加menu菜单布局</p>
<p>nav_header.xml</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="192dp"</div><div class="line">    android:background="?attr/colorPrimaryDark"</div><div class="line">    android:padding="16dp"</div><div class="line">    android:theme="@style/ThemeOverlay.AppCompat.Dark"</div><div class="line">    android:orientation="vertical"</div><div class="line">    android:gravity="bottom"&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:text="Username"</div><div class="line">        android:textAppearance="@style/TextAppearance.AppCompat.Body1"/&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>
<p>drawer_view.xml (menu布局)</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;menu xmlns:android="http://schemas.android.com/apk/res/android"&gt;</div><div class="line"></div><div class="line">    &lt;group android:checkableBehavior="single"&gt;</div><div class="line">        &lt;item</div><div class="line">            android:id="@+id/nav_home"</div><div class="line">            android:icon="@drawable/ic_dashboard"</div><div class="line">            android:title="Home" /&gt;</div><div class="line">        &lt;item</div><div class="line">            android:id="@+id/nav_messages"</div><div class="line">            android:icon="@drawable/ic_event"</div><div class="line">            android:title="Messages" /&gt;</div><div class="line">        &lt;item</div><div class="line">            android:id="@+id/nav_friends"</div><div class="line">            android:icon="@drawable/ic_headset"</div><div class="line">            android:title="Friends" /&gt;</div><div class="line">        &lt;item</div><div class="line">            android:id="@+id/nav_discussion"</div><div class="line">            android:icon="@drawable/ic_forum"</div><div class="line">            android:title="Discussion" /&gt;</div><div class="line">    &lt;/group&gt;</div><div class="line"></div><div class="line">    &lt;item android:title="Sub items"&gt;</div><div class="line">        &lt;menu&gt;</div><div class="line">            &lt;item</div><div class="line">                android:icon="@drawable/ic_dashboard"</div><div class="line">                android:title="Sub item 1" /&gt;</div><div class="line">            &lt;item</div><div class="line">                android:icon="@drawable/ic_forum"</div><div class="line">                android:title="Sub item 2" /&gt;</div><div class="line">        &lt;/menu&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line"></div><div class="line">&lt;/menu&gt;</div></pre></td></tr></table></figure>
<h4 id="java代码使用："><a href="#java代码使用：" class="headerlink" title="java代码使用："></a>java代码使用：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initNavigationView</span><span class="params">()</span></span>&#123;</div><div class="line">        navigationView = (NavigationView) findViewById(R.id.navigationView);</div><div class="line">        drawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);</div><div class="line">        <span class="comment">//设置侧滑菜单选择监听事件</span></div><div class="line">        navigationView.setNavigationItemSelectedListener(<span class="keyword">new</span> NavigationView.OnNavigationItemSelectedListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onNavigationItemSelected</span><span class="params">(MenuItem menuItem)</span> </span>&#123;</div><div class="line">                menuItem.setChecked(<span class="keyword">true</span>);</div><div class="line">                <span class="comment">//关闭抽屉侧滑菜单</span></div><div class="line">                drawerLayout.closeDrawers();</div><div class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (item.getItemId() == android.R.id.home)&#123;</div><div class="line">            <span class="comment">//打开抽屉侧滑菜单</span></div><div class="line">            drawerLayout.openDrawer(GravityCompat.START);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onOptionsItemSelected(item);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>关于NavigationView中item的字体颜色和icon选中状态颜色是去当前主题theme中的</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;--正常状态下字体颜色和icon颜色--&gt;</div><div class="line">&lt;item name="android:textColorPrimary"&gt;@android:color/darker_gray&lt;/item&gt;</div><div class="line"></div><div class="line">&lt;--选中状态icon的颜色和字体颜色--&gt;</div><div class="line"> &lt;item name="colorPrimary"&gt;@color/accent_material_light&lt;/item&gt;&lt;/code&gt;</div></pre></td></tr></table></figure>
<p>当然你可以通过如下方法或者属性来改变这一状态：</p>
<p><li>setItemBackgroundResource(int)：给menu设置背景资源，对应的属性app:itemBackground </li></p>
<p><li>setItemIconTintList(ColorStateList)：给menu的icon设置颜色，对应的属性app:itemIconTint</li></p>
<p><li>setItemTextColor(ColorStateList)：给menu的item设置字体颜色，对应的属性app:itemTextColor</li></p>
<p></p><h3>SnackBar:</h3><br>当Snackbar在显示的时候，往往出现在屏幕的底部。为了给Snackbar留出空间，浮动操作按钮需要向上移动。<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/snackbar.gif"><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FloatingActionButton fab = (FloatingActionButton) findViewById(R.id.fab);</div><div class="line">        fab.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View view)</span> </span>&#123;</div><div class="line">                Snackbar.make(view, <span class="string">"Here's a Snackbar"</span>, Snackbar.LENGTH_LONG)</div><div class="line">                        .setAction(<span class="string">"Action"</span>, <span class="keyword">null</span>).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>SnackBar可用于代替Toast弹出再按一次返回的情况。</p>
<p></p><h3><a href="https://github.com/chrisbanes/cheesesquare" target="_blank" rel="external">完整代码地址</a><p></p>
</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android Studio插件GsonFormat快速实现JavaBean]]></title>
      <url>http://yoursite.com/2015/10/09/Android-Studio%E6%8F%92%E4%BB%B6GsonFormat%E5%BF%AB%E9%80%9F%E5%AE%9E%E7%8E%B0JavaBean/</url>
      <content type="html"><![CDATA[<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>1.Android studio File-&gt;Settings..-&gt;Plugins–&gt;Browse repositores..搜索GsonFormat</p>
<p>2.安装插件,重启android studio</p>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>1.下载GsonFormat.jar ;</p>
<p>2.Android studio File-&gt;Settings..-&gt;Plugins –&gt;install plugin from disk..导入下载GsonFormat.jar</p>
<p>3.重启android studio  </p>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h3 id="1-新建一个bean的实体类"><a href="#1-新建一个bean的实体类" class="headerlink" title="1.新建一个bean的实体类"></a>1.新建一个bean的实体类</h3><h3 id="2-Code-–-gt-Generate-–-gt-GsonFormat-或者使用Generate的快捷键-Alt-Insert"><a href="#2-Code-–-gt-Generate-–-gt-GsonFormat-或者使用Generate的快捷键-Alt-Insert" class="headerlink" title="2.Code –&gt; Generate –&gt;GsonFormat 或者使用Generate的快捷键 Alt+Insert"></a>2.Code –&gt; Generate –&gt;GsonFormat 或者使用Generate的快捷键 Alt+Insert</h3><h3 id="3-将写好的简单json格式的粘贴上去，ok就行了"><a href="#3-将写好的简单json格式的粘贴上去，ok就行了" class="headerlink" title="3.将写好的简单json格式的粘贴上去，ok就行了"></a>3.将写好的简单json格式的粘贴上去，ok就行了</h3><p>简单的实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"><span class="string">"name"</span>: <span class="string">"小名"</span>,</div><div class="line"><span class="string">"gender"</span>: <span class="string">"man"</span>,</div><div class="line"><span class="string">"age"</span>: <span class="number">15</span>,</div><div class="line"><span class="string">"height"</span>: <span class="string">"160cm"</span>,</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>复杂的实体类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&#123; </div><div class="line">“name”: “王五”, </div><div class="line">“gender”: “man”, </div><div class="line">“age”: <span class="number">15</span>, </div><div class="line">“height”: “<span class="number">140</span>cm”, </div><div class="line">“addr”: &#123; </div><div class="line">“province”: “fujian”, </div><div class="line">“city”: “quanzhou”, </div><div class="line">“code”: “<span class="number">300000</span>” </div><div class="line">&#125;, </div><div class="line">“hobby”: [ </div><div class="line">&#123; </div><div class="line">“name”: “billiards”, </div><div class="line">“code”: “<span class="number">1</span>” </div><div class="line">&#125;, </div><div class="line">&#123; </div><div class="line">“name”: “computerGame”, </div><div class="line">“code”: “<span class="number">2</span>” </div><div class="line">&#125; </div><div class="line">] </div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Jsoup抓取网页数据]]></title>
      <url>http://yoursite.com/2015/10/09/Jsoup%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E6%95%B0%E6%8D%AE/</url>
      <content type="html"><![CDATA[<h3 id="jsoup使用文档"><a href="#jsoup使用文档" class="headerlink" title="jsoup使用文档"></a><a href="http://www.open-open.com/jsoup/" target="_blank" rel="external">jsoup使用文档</a></h3><h3 id="Android中使用，首先导入jsoup-jar包"><a href="#Android中使用，首先导入jsoup-jar包" class="headerlink" title="Android中使用，首先导入jsoup.jar包"></a>Android中使用，首先导入jsoup.jar包</h3><pre><code>compile &apos;org.jsoup:jsoup:1.8.3&apos;
</code></pre><h3 id="主要使用方法：还是得看使用文档。"><a href="#主要使用方法：还是得看使用文档。" class="headerlink" title="主要使用方法：还是得看使用文档。"></a>主要使用方法：还是得看使用文档。</h3><h4 id="获取指定数据，无非就是通过-id、class、tag-进行查找"><a href="#获取指定数据，无非就是通过-id、class、tag-进行查找" class="headerlink" title="获取指定数据，无非就是通过 id、class、tag 进行查找"></a>获取指定数据，无非就是通过 id、class、tag 进行查找</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Document doc = Jsoup.connect(<span class="string">"http://www.quwenlieqi.com/funny/"</span>).get();</div><div class="line">Elements ListDiv =doc.select(<span class="string">".excerpt"</span>);</div><div class="line"><span class="keyword">for</span> (Element element :ListDiv) &#123;</div><div class="line">      Elements links = element.getElementsByClass(<span class="string">"thumbnail"</span>);</div><div class="line">      <span class="keyword">for</span>(Element link : links)&#123;</div><div class="line">           String href=  link.attr(<span class="string">"href"</span>);</div><div class="line">           System.out.println(href.toString());</div><div class="line">                   &#125;	</div><div class="line">        ｝</div></pre></td></tr></table></figure>
<p>算了，总之就是（我喜欢使用getElementByClass()）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">getElementsByClass(className);</div><div class="line">getElementsByTag(<span class="string">"a"</span>);</div><div class="line">getElementsById(idName);</div></pre></td></tr></table></figure>
<p>或者用 <b>doc.select(“<em>“)，element.select(“</em>“);</b></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">如果通过id的话，*为#；</div><div class="line">如果通过class的话，*为.；</div><div class="line">如果通过tag的话，*为tag名</div></pre></td></tr></table></figure>
<p>下面举几个例子：(别人的例子 粘过来的)</p>
<h3 id="1，-定位"><a href="#1，-定位" class="headerlink" title="1， 定位"></a>1， 定位</h3><p>通过div的属性值，定位到html的div（块），即所需要内容对应的块。<br>示例代码如下：</p>
<pre><code>&lt;div class=&quot;content&quot;&gt; 
</code></pre><h3 id="2，-筛选数据"><a href="#2，-筛选数据" class="headerlink" title="2， 筛选数据"></a>2， 筛选数据</h3><p>a， 通过标签头，在div中继续筛选数据。可能会找到很多的数据，这里会用到循环。见eg1。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//eg1:解析百度音乐 </span></div><div class="line">           Document doc = Jsoup.connect(<span class="string">"http://list.mp3.baidu.com/top/singer/A.html"</span>).get(); </div><div class="line">           Element singerListDiv = doc.getElementsByAttributeValue(<span class="string">"class"</span>, <span class="string">"content"</span>).first(); </div><div class="line">           Elements links = singerListDiv.getElementsByTag(<span class="string">"a"</span>); </div><div class="line">            </div><div class="line">           <span class="keyword">for</span> (Element link: links) &#123; </div><div class="line">               String linkHref = link.attr(<span class="string">"href"</span>); </div><div class="line">               String linkText = link.text().trim(); </div><div class="line">               System.out.println(linkHref);  </div><div class="line">           &#125;</div></pre></td></tr></table></figure>
<p>b， 通过标签名，在div中筛选数据，选中此标签内的所有数据。见eg2</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//eg2:解析万年历 </span></div><div class="line">       Document doc = Jsoup.connect(<span class="string">"http://www.nongli.com/item4/index.asp?dt=2012-03-03"</span>).get(); </div><div class="line">       Element infoTable = doc.getElementsByAttributeValue(<span class="string">"class"</span>, <span class="string">"table002"</span>).first(); </div><div class="line">       Elements tableLineInfos = infoTable.select(<span class="string">"tr"</span>); </div><div class="line">       <span class="keyword">for</span> (Element lineInfo : tableLineInfos) &#123; </div><div class="line">           String lineInfoContent = lineInfo.select(<span class="string">"td"</span>).last().text().trim(); </div><div class="line">           System.out.println(<span class="string">"jsoup is :"</span> + lineInfoContent); </div><div class="line">       &#125;</div></pre></td></tr></table></figure>
<p>c， 限定筛选条件。如果eg5</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//eg5:查找html元素 </span></div><div class="line">       File input = <span class="keyword">new</span> File(<span class="string">"/tmp/input.html"</span>); </div><div class="line">       Document doc = Jsoup.parse(input, <span class="string">"UTF-8"</span>, <span class="string">"http://www.oschina.net/"</span>); </div><div class="line">       Elements links = doc.select(<span class="string">"a[href]"</span>); <span class="comment">// 链接 </span></div><div class="line">       Elements pngs = doc.select(<span class="string">"img[src$=.png]"</span>); <span class="comment">// 所有 png 的图片 </span></div><div class="line">       Element masthead = doc.select(<span class="string">"div.masthead"</span>).first();<span class="comment">// div with class=masthead </span></div><div class="line">       Elements resultLinks = doc.select(<span class="string">"h3.r &gt; a"</span>); <span class="comment">// direct a after h3</span></div></pre></td></tr></table></figure>
<p>NOTE: <td colspan="2" class="l3">二月15日<br>壬辰年<br>癸卯月<br>丁卯日<br></td></p>
<p>此处不能直接单独获得三组数据，获得的是总的三个数据。可通过正则表达式分解</p>
<h3 id="3，-获取数据"><a href="#3，-获取数据" class="headerlink" title="3， 获取数据"></a>3， 获取数据</h3><pre><code>element.text()即可获得相关数据
</code></pre><h3 id="4-获取属性"><a href="#4-获取属性" class="headerlink" title="4.获取属性"></a>4.获取属性</h3><pre><code>element.attr(&quot;属性名&quot;);
</code></pre><h3 id="5-还有很多没有学习，回来用到了再添加"><a href="#5-还有很多没有学习，回来用到了再添加" class="headerlink" title="5.还有很多没有学习，回来用到了再添加"></a>5.还有很多没有学习，回来用到了再添加</h3><h3 id="plus-Jsoup有灵活的语法，比如通过class-value对指定div块，可通过select-div-value-找到，更多用法请参考文档！"><a href="#plus-Jsoup有灵活的语法，比如通过class-value对指定div块，可通过select-div-value-找到，更多用法请参考文档！" class="headerlink" title="plus: Jsoup有灵活的语法，比如通过class-value对指定div块，可通过select(div.value)找到，更多用法请参考文档！ "></a>plus: Jsoup有灵活的语法，比如通过class-value对指定div块，可通过select(div.value)找到，更多用法请<a href="http://www.open-open.com/jsoup/" target="_blank" rel="external">参考文档！ </a></h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android图像处理之Bitmap类]]></title>
      <url>http://yoursite.com/2015/08/17/Android%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%E4%B9%8BBitmap%E7%B1%BB/</url>
      <content type="html"><![CDATA[<p>Bitmap是Android系统中的图像处理的最重要类之一。用它可以获取图像文件信息，进行图像剪切、旋转、缩放等操作，并可以指定格式保存图像文件。</p>
<h3 id="一、Bitmap生成"><a href="#一、Bitmap生成" class="headerlink" title="一、Bitmap生成"></a>一、Bitmap生成</h3><h4 id="1-1-BitmapFactory-decode出Bitmap"><a href="#1-1-BitmapFactory-decode出Bitmap" class="headerlink" title="1.1 BitmapFactory decode出Bitmap"></a>1.1 BitmapFactory decode出Bitmap</h4><p> Bitmap实现在android.graphics包中。但是Bitmap类的构造函数是私有的，外面并不能实例化，只能是通过JNI实例化。这必然是 某个辅助类提供了创建Bitmap的接口，而这个类的实现通过JNI接口来实例化Bitmap的，这个类就是BitmapFactory。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/BitmapFactory&Options.gif">图一、BitmapFactory主要方法及Options选项</p>
<p>利用BitmapFactory可以从一个指定文件中，利用decodeFile()解出Bitmap；也可以定义的图片资源中，利用decodeResource()解出Bitmap。</p>
<h4 id="1-2-decode时的选项"><a href="#1-2-decode时的选项" class="headerlink" title="1.2 decode时的选项"></a>1.2 decode时的选项</h4><p>在使用方法decodeFile()/decodeResource()时，都可以指定一个BitmapFacotry.Options。</p>
<p>利用Options的下列属性，可以指定decode的选项：</p>
<ul><br><li>inPreferredConfig 指定decode到内存中，手机中所采用的编码，可选值定义在Bitmap.Config中。缺省值是ARGB_8888。<br><br></li><li>inJustDecodeBounds 如果设置为true，并不会把图像的数据完全解码，亦即decodeXyz()返回值为null，但是Options的outAbc中解出了图像的基本信息。<br><br></li><li>inSampleSize 设置decode时的缩放比例。<br></li></ul>

<p>利用Options的这些值就可以高效的得到一幅缩略图。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/BitmapFactory&decodeFile.gif">图二、BitmapFactory.decodeFile()</p>
<p>先设置inJustDecodeBounds= true，调用decodeFile()得到图像的基本信息[Step#2~4]；</p>
<p>利用图像的宽度（或者高度，或综合）以及目标的宽度，得到inSampleSize值，再设置inJustDecodeBounds= false，调用decodeFile()得到完整的图像数据[Step#5~8]。</p>
<p>先获取比例，再读入数据，如果欲读入大比例缩小的图，将显著的节约内容资源。有时候还会读入大量的缩略图，这效果就更明显了。</p>
<h3 id="二、利用Bitmap和Matrix实现图像变换"><a href="#二、利用Bitmap和Matrix实现图像变换" class="headerlink" title="二、利用Bitmap和Matrix实现图像变换"></a>二、利用Bitmap和Matrix实现图像变换</h3><p> Bitmap可以和Matrix结合实现图像的剪切、旋转、缩放等操作。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/Bitmap&Scale.gif">图三、Bitmap方法</p>
<p>用源Bitmap通过变换生成新的Bitmap的方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmap</span><span class="params">(Bitmap source, <span class="keyword">int</span> x, <span class="keyword">int</span> y, intwidth, <span class="keyword">int</span> height, </span></span></div><div class="line">            Matrix m, <span class="keyword">boolean</span> filter) </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createBitmap</span><span class="params">(Bitmap source, <span class="keyword">int</span> x, <span class="keyword">int</span> y, intwidth, <span class="keyword">int</span> height)</span> </div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">createScaledBitmap</span><span class="params">(Bitmap src, <span class="keyword">int</span> dstWidth, </span></div><div class="line">            <span class="keyword">int</span> dstHeight,<span class="keyword">boolean</span> filter)</div></pre></td></tr></table></figure>
<p>第一个方法是最终的实现，后两种只是对第一种方法的封装。</p>
<p>第二个方法可以从源Bitmap中指定区域(x,y, width, height)中挖出一块来实现剪切；第三个方法可以把源Bitmap缩放为dstWidth x dstHeight的Bitmap。</p>
<p>设置Matrix的Rotate（通过setRotate()）或者Scale（通过setScale()），传入第一个方法，可实现旋转或缩放。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/Bitmap&Rotate.gif">图四、Bitmap实现旋转</p>
<h3 id="三、保存图像文件"><a href="#三、保存图像文件" class="headerlink" title="三、保存图像文件"></a>三、保存图像文件</h3><p>经过图像变换之后的Bitmap里的数据可以保存到图像压缩文件里（JPG/PNG）。</p>
<p><img src="http://7xl32g.com1.z0.glb.clouddn.com/Bitmap&Save.gif">图五、保存Bitmap数据到文件</p>
<p>这个操作过程中，Bitmap.compress()方法的参数format可设置JPEG或PNG格式；quality可选择压缩质量；fOut是输出流（OutputStream），这里的FileOutputStream是OutputStream的一个子类。</p>
<p>总结一下，本文介绍Bitmap的使用方法——用Bitmap实现图像文件的读取和写入，并用Bitmap实现图像的剪切、旋转和缩放变换。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ViewPager+Fragment 懒加载]]></title>
      <url>http://yoursite.com/2015/08/11/ViewPager-Fragment-%E6%87%92%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<h3 id="在ViewPager上做文章（原理上可行，但实际上未起作用）"><a href="#在ViewPager上做文章（原理上可行，但实际上未起作用）" class="headerlink" title="在ViewPager上做文章（原理上可行，但实际上未起作用）"></a>在ViewPager上做文章（原理上可行，但实际上未起作用）</h3><p>viewpager默认多加载一个page</p>
<p>重写viewPager,将v4包里的ViewPager代码复制粘贴到新定义的LazyViewPager  </p>
<p>只需该一个默认变量值 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_OFFSCREEN_PAGES = <span class="number">0</span>;   <span class="comment">//默认为1 改为0  即默认加载多加载0个</span></div></pre></td></tr></table></figure>
<h3 id="在Fragment上做文章"><a href="#在Fragment上做文章" class="headerlink" title="在Fragment上做文章"></a>在Fragment上做文章</h3><p>做应用开发的时候，一个Activity里面可能会以viewpager（或其他容器）与多个Fragment来组合使用，而如果每个fragment都需要去加载数据，或从本地加载，或从网络加载，那么在这个activity刚创建的时候就变成需要初始化大量资源。这样的结果，我们当然不会满意。那么，能不能做到当切换到这个fragment的时候，它才去初始化呢？</p>
<p><b>答案就在Fragment里的setUserVisibleHint这个方法里</b></p>
<p>该方法用于告诉系统，这个Fragment的UI是否是可见的。所以我们只需要继承Fragment并重写该方法，即可实现在fragment可见时才进行数据加载操作，即Fragment的懒加载。</p>
<h4 id="效果图："><a href="#效果图：" class="headerlink" title="效果图："></a>效果图：</h4><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/2015011308525158.gif"></p>
<h4 id="代码如下："><a href="#代码如下：" class="headerlink" title="代码如下："></a>代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseFragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;  </div><div class="line">    <span class="keyword">protected</span> <span class="keyword">boolean</span> isVisible;  </div><div class="line">     <span class="comment">//是否已被加载过一次，第二次就不再去请求数据了</span></div><div class="line">       <span class="keyword">protected</span> <span class="keyword">boolean</span> isFirst=<span class="keyword">true</span>;</div><div class="line">    <span class="comment">/** </span></div><div class="line">     * 在这里实现Fragment数据的缓加载. </div><div class="line">     * <span class="doctag">@param</span> isVisibleToUser </div><div class="line">     */  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserVisibleHint</span><span class="params">(<span class="keyword">boolean</span> isVisibleToUser)</span> </span>&#123;  </div><div class="line">        <span class="keyword">super</span>.setUserVisibleHint(isVisibleToUser);  </div><div class="line">        <span class="keyword">if</span>(getUserVisibleHint()) &#123;  </div><div class="line">            isVisible = <span class="keyword">true</span>;  </div><div class="line">            onVisible();  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            isVisible = <span class="keyword">false</span>;  </div><div class="line">            onInvisible();  </div><div class="line">        &#125;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onVisible</span><span class="params">()</span></span>&#123;  </div><div class="line">		<span class="keyword">if</span>(isFirst)&#123;</div><div class="line">			lazyLoad();  </div><div class="line">            isFirst=<span class="keyword">false</span>;</div><div class="line">		&#125;</div><div class="line">        </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">lazyLoad</span><span class="params">()</span></span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onInvisible</span><span class="params">()</span></span>&#123;&#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在LazyFragment，我增加了三个方法，一个是onVisiable，即fragment被设置为可见时调用，一个是onInvisible，即fragment被设置为不可见时调用。另外再写了一个lazyLoad的抽象方法，该方法在onVisible里面调用。你可能会想，为什么不在getUserVisibleHint里面就直接调用呢？</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我这么写是为了代码的复用。因为在fragment中，我们还需要创建视图（onCreateView()方法），可能还需要在它不可见时就进行其他小量的初始化操作（比如初始化需要通过AIDL调用的远程服务）等。而setUserVisibleHint是在onCreateView之前调用的，那么在视图未初始化的时候，在lazyLoad当中就使用的话，就会有空指针的异常。而把lazyLoad抽离成一个方法，那么它的子类就可以这样做：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomListFragment</span> <span class="keyword">extends</span> <span class="title">BaseFragment</span> </span>&#123;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FRAGMENT_INDEX = fragment_index;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> FIRST_FRAGMENT = <span class="number">0</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SECOND_FRAGMENT = <span class="number">1</span>;</div><div class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> THIRD_FRAGMENT = <span class="number">2</span>;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> TextView mFragmentView;</div><div class="line"></div><div class="line">   <span class="keyword">private</span> <span class="keyword">int</span> mCurIndex = -<span class="number">1</span>;</div><div class="line">   <span class="comment">/** 标志位，标志已经初始化完成 */</span></div><div class="line">   <span class="keyword">private</span> <span class="keyword">boolean</span> isPrepared;</div><div class="line">  </div><div class="line"></div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 创建新实例</div><div class="line">    * </div><div class="line">    * <span class="doctag">@param</span> index</div><div class="line">    * <span class="doctag">@return</span></div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CustomListFragment <span class="title">newInstance</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</div><div class="line">       Bundle bundle = <span class="keyword">new</span> Bundle();</div><div class="line">       bundle.putInt(FRAGMENT_INDEX, index);</div><div class="line">       CustomListFragment fragment = <span class="keyword">new</span> CustomListFragment();</div><div class="line">       fragment.setArguments(bundle);</div><div class="line">       <span class="keyword">return</span> fragment;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span>(mFragmentView == <span class="keyword">null</span>) &#123;</div><div class="line">           mFragmentView = (TextView) inflater.inflate(R.layout.fragment, container, <span class="keyword">false</span>);</div><div class="line">           <span class="comment">//获得索引值</span></div><div class="line">           Bundle bundle = getArguments();</div><div class="line">           <span class="keyword">if</span> (bundle != <span class="keyword">null</span>) &#123;</div><div class="line">               mCurIndex = bundle.getInt(FRAGMENT_INDEX);</div><div class="line">           &#125;</div><div class="line">           isPrepared = <span class="keyword">true</span>;</div><div class="line">           lazyLoad();</div><div class="line">       &#125;</div><div class="line">        </div><div class="line">       <span class="comment">//因为共用一个Fragment视图，所以当前这个视图已被加载到Activity中，必须先清除后再加入Activity</span></div><div class="line">       ViewGroup parent = (ViewGroup)mFragmentView.getParent();</div><div class="line">       <span class="keyword">if</span>(parent != <span class="keyword">null</span>) &#123;</div><div class="line">           parent.removeView(mFragmentView);</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">return</span> mFragmentView;</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">lazyLoad</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">if</span> (!isPrepared || !isVisible ) &#123;</div><div class="line">           <span class="keyword">return</span>;</div><div class="line">       &#125;</div><div class="line"></div><div class="line">       <span class="keyword">new</span> AsyncTask&lt;<span class="keyword">void</span>, <span class="keyword">boolean</span>=<span class="string">""</span>&gt;() &#123;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPreExecute</span><span class="params">()</span> </span>&#123;</div><div class="line">               <span class="keyword">super</span>.onPreExecute();</div><div class="line">               <span class="comment">//显示加载进度对话框</span></div><div class="line">               UIHelper.showDialogForLoading(getActivity(), 正在加载..., <span class="keyword">true</span>);</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">protected</span> Boolean <span class="title">doInBackground</span><span class="params">(Void... params)</span> </span>&#123;</div><div class="line">               <span class="keyword">try</span> &#123;</div><div class="line">                   Thread.sleep(<span class="number">2000</span>);</div><div class="line">                   <span class="comment">//在这里添加调用接口获取数据的代码</span></div><div class="line">                   <span class="comment">//doSomething()</span></div><div class="line">               &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">                   e.printStackTrace();</div><div class="line">               &#125;</div><div class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">           &#125;</div><div class="line"></div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Boolean isSuccess)</span> </span>&#123;</div><div class="line">               <span class="keyword">if</span> (isSuccess) &#123;</div><div class="line">                   <span class="comment">// 加载成功</span></div><div class="line">                   setView();</div><div class="line">               &#125; <span class="keyword">else</span> &#123;</div><div class="line">                   <span class="comment">// 加载失败</span></div><div class="line">               &#125;</div><div class="line">               <span class="comment">//关闭对话框</span></div><div class="line">               UIHelper.hideDialogForLoading();</div><div class="line">           &#125;</div><div class="line">       &#125;.execute();</div><div class="line">   &#125;</div><div class="line"></div><div class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setView</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="comment">// 根据索引加载不同视图</span></div><div class="line">       <span class="keyword">switch</span> (mCurIndex) &#123;</div><div class="line">       <span class="keyword">case</span> FIRST_FRAGMENT:</div><div class="line">           mFragmentView.setText(第一个);</div><div class="line">           <span class="keyword">break</span>;</div><div class="line"></div><div class="line">       <span class="keyword">case</span> SECOND_FRAGMENT:</div><div class="line">           mFragmentView.setText(第二个);</div><div class="line">           <span class="keyword">break</span>;</div><div class="line"></div><div class="line">       <span class="keyword">case</span> THIRD_FRAGMENT:</div><div class="line">           mFragmentView.setText(第三个);</div><div class="line">           <span class="keyword">break</span>;</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line"> 	&#125;</div></pre></td></tr></table></figure>
<p>在上面的类当中，我们增加了一个标志位isPrepared，用于标志是否初始化完成。然后在我们所需要的初始化操作完成之后调用，如上面的例子当中，在初始化view之后，设置 isPrepared为true，同时调用lazyLoad()方法。而在lazyLoad()当中，判断isPrepared和isVisible只要有一个不为true就不往下执行。也就是仅当初始化完成，并且可见的时候才继续加载，这样的避免了未初始化完成就使用而带来的问题。 </p>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p><b>这样会引发一个问题，就是fragment每次来回切换都会判断是否可见，可见就加lazyload(),就会造成加载数据，我们不想加载….</b></p>
<h4 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h4><p><b>在lazyFragemnt 或者在 继承lazyFragment的fragment 中添加一个 标记值 默认 isFirst; 加载前先判断;第一次加载之后将 isFirst=true;</b></p>
<h4 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h4><p>到这里我们只是写好了Fragment，在FragmentActivity中还需要对ViewPager设置一下，让它每次只加载一个Fragment，ViewPager.setOffscreenPageLimit(int limit)，其中参数可以设为0或者1，参数小于1时，会默认用1来作为参数，未设置之前，ViewPager会默认加载两个Fragment。所以，我们只需要调用下它，设置下加载Fragment个数即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">FragmentActivity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span></span>&#123;</div><div class="line"> </div><div class="line">    <span class="keyword">private</span> RadioButton mFstBtn;</div><div class="line">    <span class="keyword">private</span> RadioButton mSndBtn;</div><div class="line">    <span class="keyword">private</span> RadioButton mThdBtn;</div><div class="line">     </div><div class="line">    <span class="keyword">private</span> ViewPager mViewPager;</div><div class="line">    <span class="keyword">private</span> ListFragmentPagerAdapter mPagerAdapter;</div><div class="line">    <span class="keyword">private</span> List&lt;fragment&gt; mFragments = <span class="keyword">new</span> ArrayList&lt;fragment&gt;();</div><div class="line">     </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> FIRST_FRAGMENT = <span class="number">0</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> SECOND_FRAGMENT = <span class="number">1</span>;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">int</span> THIRD_FRAGMENT = <span class="number">2</span>;</div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.activity_main);</div><div class="line">        initButton();</div><div class="line">        initViewPager();</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化按钮</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initButton</span><span class="params">()</span> </span>&#123;</div><div class="line">        mFstBtn = (RadioButton)findViewById(R.id.id_rb_fst);</div><div class="line">        mFstBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mSndBtn = (RadioButton)findViewById(R.id.id_rb_snd);</div><div class="line">        mSndBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">        mThdBtn = (RadioButton)findViewById(R.id.id_rb_thd);</div><div class="line">        mThdBtn.setOnClickListener(<span class="keyword">this</span>);</div><div class="line">    &#125;</div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 初始化ViewPager控件</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initViewPager</span><span class="params">()</span> </span>&#123;</div><div class="line">        mViewPager = (ViewPager)findViewById(R.id.id_vp_viewpager);</div><div class="line">        <span class="comment">//关闭预加载，默认一次只加载一个Fragment</span></div><div class="line">        mViewPager.setOffscreenPageLimit(<span class="number">1</span>);</div><div class="line">        <span class="comment">//添加Fragment</span></div><div class="line">        mFragments.add(CustomListFragment.newInstance(FIRST_FRAGMENT));</div><div class="line">        mFragments.add(CustomListFragment.newInstance(SECOND_FRAGMENT));</div><div class="line">        mFragments.add(CustomListFragment.newInstance(THIRD_FRAGMENT));</div><div class="line">        <span class="comment">//适配器</span></div><div class="line">        mPagerAdapter = <span class="keyword">new</span> ListFragmentPagerAdapter(getSupportFragmentManager(), mFragments);</div><div class="line">        mViewPager.setAdapter(mPagerAdapter);</div><div class="line">        mViewPager.setOnPageChangeListener(onPageChangeListener);</div><div class="line">    &#125;</div><div class="line"> </div><div class="line">     </div><div class="line">    <span class="keyword">private</span> OnPageChangeListener onPageChangeListener = <span class="keyword">new</span> OnPageChangeListener() &#123;</div><div class="line">         </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="comment">//根据用户选中的按钮修改按钮样式</span></div><div class="line">            <span class="keyword">switch</span> (position) &#123;</div><div class="line">            <span class="keyword">case</span> FIRST_FRAGMENT:</div><div class="line">                mFstBtn.setChecked(<span class="keyword">true</span>);</div><div class="line">                mSndBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                mThdBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line"> </div><div class="line">            <span class="keyword">case</span> SECOND_FRAGMENT:</div><div class="line">                mFstBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                mSndBtn.setChecked(<span class="keyword">true</span>);</div><div class="line">                mThdBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">                 </div><div class="line">            <span class="keyword">case</span> THIRD_FRAGMENT:</div><div class="line">                mFstBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                mSndBtn.setChecked(<span class="keyword">false</span>);</div><div class="line">                mThdBtn.setChecked(<span class="keyword">true</span>);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">         </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> arg0, <span class="keyword">float</span> arg1, <span class="keyword">int</span> arg2)</span> </span>&#123;&#125;</div><div class="line">         </div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> arg0)</span> </span>&#123;&#125;</div><div class="line">    &#125;;</div><div class="line">     </div><div class="line">     </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">        <span class="keyword">switch</span> (v.getId()) &#123;</div><div class="line">        <span class="keyword">case</span> R.id.id_rb_fst:</div><div class="line">            mViewPager.setCurrentItem(FIRST_FRAGMENT);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line"> </div><div class="line">        <span class="keyword">case</span> R.id.id_rb_snd:</div><div class="line">            mViewPager.setCurrentItem(SECOND_FRAGMENT);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">             </div><div class="line">        <span class="keyword">case</span> R.id.id_rb_thd:</div><div class="line">            mViewPager.setCurrentItem(THIRD_FRAGMENT);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="小需求："><a href="#小需求：" class="headerlink" title="小需求："></a>小需求：</h4><p>在懒加载的基础上 有时还需要viewpager的缓存，也就是不需要每次都加载，viewpager默认只保持当前条目的前一个和后一个条目…</p>
<p>这是我们就需要设置缓存条目的数量</p>
<pre><code>mViewPager.setOffscreenPageLimit(limitNum);
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[ScrollView滑动到顶部或底部的响应]]></title>
      <url>http://yoursite.com/2015/08/10/ScrollView%E6%BB%91%E5%8A%A8%E5%88%B0%E9%A1%B6%E9%83%A8%E6%88%96%E5%BA%95%E9%83%A8%E7%9A%84%E5%93%8D%E5%BA%94/</url>
      <content type="html"><![CDATA[<p>两种实现方式的主要不同点在于判断滑动位置的地方，第一种方式在onScrollChanged函数中判断, 第二种在OnTouchListener的onTouch中判断。其他如是否滚动到边缘的判断、响应事件接口OnBorderListener、对外暴露的接口都一样。</p>
<p>第一种方式代码可见: <a href="https://github.com/Trinea/android-common/blob/master/src/cn/trinea/android/common/view/BorderScrollView.java" target="_blank" rel="external">onScrollChanged BorderScrollView</a></p>
<p>第二种方式代码可见: <a href="https://code.google.com/p/trinea-code/source/browse/trunk/BorderScrollView/BorderScrollView.java" target="_blank" rel="external">OnTouchListener BorderScrollView</a></p>
<p>1、<b>判断是否已经滚动到顶部或底部，代码如下：</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doOnBorderListener</span><span class="params">()</span> </span>&#123;</div><div class="line">	<span class="keyword">if</span> (contentView != <span class="keyword">null</span> &amp;&amp; contentView.getMeasuredHeight() &lt;= getScrollY() + getHeight()) &#123;</div><div class="line">		<span class="keyword">if</span> (onBorderListener != <span class="keyword">null</span>) &#123;</div><div class="line">			onBorderListener.onBottom();</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (getScrollY() == <span class="number">0</span>) &#123;</div><div class="line">		<span class="keyword">if</span> (onBorderListener != <span class="keyword">null</span>) &#123;</div><div class="line">			onBorderListener.onTop();</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>滚动到顶部判断：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getScrollY() == <span class="number">0</span></div></pre></td></tr></table></figure>
<p>滚动到底部判断</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">View contentView = getChildAt(<span class="number">0</span>);</div><div class="line">contentView.getMeasuredHeight() &lt;= getScrollY() + getHeight();</div></pre></td></tr></table></figure>
<p>其中getChildAt表示得到ScrollView的child View，因为ScrollView只允许一个child view，所以contentView.getMeasuredHeight()表示得到子View的高度, getScrollY()表示得到y轴的滚动距离，getHeight()为scrollView的高度。当getScrollY()达到最大时加上scrollView的高度就的就等于它内容的高度了啊~</p>
<p>2、<b>定义到达顶部和底部响应事件接口OnBorderListener，包含onTop和onBottom函数</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * OnBorderListener, Called when scroll to top or bottom</div><div class="line"> * </div><div class="line"> * <span class="doctag">@author</span> </div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnBorderListener</span> </span>&#123;</div><div class="line"> </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called when scroll to bottom</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBottom</span><span class="params">()</span></span>;</div><div class="line"> </div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * Called when scroll to top</div><div class="line">	 */</div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onTop</span><span class="params">()</span></span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个接口允许用户自定义到达底部和顶部的响应事件</p>
<h4 id="第一种方式-在onScrollChanged函数中判断，主要代码如下："><a href="#第一种方式-在onScrollChanged函数中判断，主要代码如下：" class="headerlink" title="第一种方式: 在onScrollChanged函数中判断，主要代码如下："></a>第一种方式: 在onScrollChanged函数中判断，主要代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Override</span></div><div class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onScrollChanged</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> oldx, <span class="keyword">int</span> oldy)</span> </span>&#123;</div><div class="line">	<span class="keyword">super</span>.onScrollChanged(x, y, oldx, oldy);</div><div class="line">	doOnBorderListener();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ScrollView的onScrollChanged函数中判断是否到达顶部和底部，并进行相应事件调用，onScrollChanged函数在ScrollView中内容开始滚动时出发被调用。</p>
<h4 id="第二种方式-在OnTouchListener的onTouch中判断，主要代码如下："><a href="#第二种方式-在OnTouchListener的onTouch中判断，主要代码如下：" class="headerlink" title="第二种方式: 在OnTouchListener的onTouch中判断，主要代码如下："></a>第二种方式: 在OnTouchListener的onTouch中判断，主要代码如下：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.onBorderTouchListener = <span class="keyword">new</span> OnTouchListener() &#123;</div><div class="line"> </div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouch</span><span class="params">(View v, MotionEvent event)</span> </span>&#123;</div><div class="line">		<span class="keyword">switch</span> (event.getAction()) &#123;</div><div class="line">			<span class="keyword">case</span> MotionEvent.ACTION_UP:</div><div class="line">				doOnBorderListener();</div><div class="line">				<span class="keyword">break</span>;</div><div class="line">		&#125;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">	&#125;</div><div class="line"> </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>表示在touch结束后，手指拿起时执行doOnBorderListener，进行判断和响应。</p>
<h4 id="两种方式的比较："><a href="#两种方式的比较：" class="headerlink" title="两种方式的比较："></a>两种方式的比较：</h4><p><b>第一种方式精确度高，但doOnBorderListener可能执行多次</b>，因为ScrollView滑动中，onScrollChanged总是在不停被调用，需要用户自己做并发控制，也可以参考<a href="https://github.com/Trinea/android-common/blob/master/src/cn/trinea/android/common/view/DropDownListView.java#L541" target="_blank" rel="external">DropDownListView</a>的写法让用户在自定义Listener执行结束后手动调用onBottomComplete函数。</p>
<p><b>第二种方式不会造成doOnBorderListener多次执行，但却可能一次都没有调用。</b>比如你快速滑动，还未到达底部手指已经松开，由于惯性滚动到底部，可能并不会执行doOnBorderListener。因为onTouch的ACTION_UP事件在手指松开已经接收到这时候却还没有到达底部。<br>两种方式各有优劣，大家可酌情选择。我要求准确响应，所以选择了第一种，自己再做下控制确保不会多次执行。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于瀑布流解决OOM问题]]></title>
      <url>http://yoursite.com/2015/08/10/%E5%85%B3%E4%BA%8E%E7%80%91%E5%B8%83%E6%B5%81%E8%A7%A3%E5%86%B3OOM%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>最近在做一款全图片的壁纸的app应用，既然是全图片那么，必不可免的会出现oom异常，非常的头疼麻烦~~~,其他的瀑布流开源项目使用总是出现这样或那样的问题….说实话，下面这么长的代码我都不想看，又乱</p>
<h3 id="借鉴"><a href="#借鉴" class="headerlink" title="借鉴"></a>借鉴</h3><p>  <a href="http://pan.baidu.com/s/1i3rjMDJ" target="_blank" rel="external">资源借鉴</a>      //百度网盘里面有我借鉴的资源，可以下载来看一下</p>
<h3 id="自定义ScrollView解决OOM"><a href="#自定义ScrollView解决OOM" class="headerlink" title="自定义ScrollView解决OOM"></a>自定义ScrollView解决OOM</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div><div class="line">307</div><div class="line">308</div><div class="line">309</div><div class="line">310</div><div class="line">311</div><div class="line">312</div><div class="line">313</div><div class="line">314</div><div class="line">315</div><div class="line">316</div><div class="line">317</div><div class="line">318</div><div class="line">319</div><div class="line">320</div><div class="line">321</div><div class="line">322</div><div class="line">323</div><div class="line">324</div><div class="line">325</div><div class="line">326</div><div class="line">327</div><div class="line">328</div><div class="line">329</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">	<span class="comment">/**</span></div><div class="line"> * 自定义的ScrollView，在其中动态地对图片进行添加。</div><div class="line"> *</div><div class="line"> * <span class="doctag">@author</span> guolin</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyScrollView2</span> <span class="keyword">extends</span> <span class="title">ScrollView</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 每页要加载的图片数量</div><div class="line">     */</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PAGE_SIZE = <span class="number">20</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 记录当前已加载到第几页</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> page;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 每一列的宽度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> columnWidth;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前第一列的高度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> firstColumnHeight;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 当前第二列的高度</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> secondColumnHeight;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 是否已加载过一次layout，这里onLayout中的初始化只需加载一次</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> loadOnce;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 第一列的布局</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> LinearLayout firstColumn;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 第二列的布局</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> LinearLayout secondColumn;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * MyScrollView下的直接子布局。</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> View scrollLayout;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * MyScrollView布局的高度。</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> scrollViewHeight;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 记录上垂直方距向的滚动离。</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> lastScrollY = -<span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 记录所有界面上的图片，用以可以随时控制对图片的释放。</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> List&lt;ImageView&gt; imageViewList = <span class="keyword">new</span> ArrayList&lt;ImageView&gt;();</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 在Handler中进行图片可见性检查的判断，以及加载更多图片的操作。</div><div class="line">     */</div><div class="line">    <span class="comment">/*private Handler handler = new Handler() &#123;</span></div><div class="line"></div><div class="line">        public void handleMessage(android.os.Message msg) &#123;</div><div class="line">            MyScrollView2 myScrollView = (MyScrollView2) msg.obj;</div><div class="line">            int scrollY = myScrollView.getScrollY();</div><div class="line">            // 如果当前的滚动位置和上次相同，表示已停止滚动</div><div class="line">            if (scrollY == lastScrollY) &#123;</div><div class="line">                // 当滚动的最底部，并且当前没有正在下载的任务时，开始加载下一页的图片</div><div class="line">                if (scrollViewHeight + scrollY &gt;= scrollLayout.getHeight()) &#123;</div><div class="line">                    myScrollView.loadMoreImages();</div><div class="line">                &#125;</div><div class="line">                myScrollView.checkVisibility();</div><div class="line">            &#125; else &#123;</div><div class="line">                lastScrollY = scrollY;</div><div class="line">                Message message = new Message();</div><div class="line">                message.obj = myScrollView;</div><div class="line">                // 5毫秒后再次对滚动位置进行判断</div><div class="line">                handler.sendMessageDelayed(message, 5);</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line"></div><div class="line">    &#125;;*/</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * MyScrollView的构造函数。</div><div class="line">     *</div><div class="line">     * <span class="doctag">@param</span> context</div><div class="line">     * <span class="doctag">@param</span> attrs</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyScrollView2</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">       handler.sendEmptyMessageDelayed(<span class="number">11</span>,<span class="number">500</span>);</div><div class="line"><span class="comment">//        setOnTouchListener(this);</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    Handler handler=<span class="keyword">new</span> Handler()&#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">super</span>.handleMessage(msg);</div><div class="line">            checkVisibility();</div><div class="line">            handler.sendEmptyMessageDelayed(<span class="number">11</span>,<span class="number">500</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onScrollChanged</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> oldl, <span class="keyword">int</span> oldt)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onScrollChanged(l, t, oldl, oldt);</div><div class="line">        doOnBorderListener();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">public</span> <span class="keyword">boolean</span> isZhixing;  <span class="comment">//到底部是会一直夹在数据 加个标记 就只会加载一次</span></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doOnBorderListener</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (scrollViewHeight + getScrollY() &gt;= scrollLayout.getHeight()) &#123;</div><div class="line">            <span class="keyword">if</span>(!isZhixing)&#123;</div><div class="line">                LLogUtils.d(<span class="string">"============loadCount==="</span> + loadCount);</div><div class="line">                isZhixing=<span class="keyword">true</span>;</div><div class="line">                initData(loadCount);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getScrollY() == <span class="number">0</span>) &#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> String mUrl;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        mUrl = url;</div><div class="line">        initData(loadCount);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    List&lt;GroupPicture&gt; imageDatas = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initData</span><span class="params">(<span class="keyword">int</span> loadCount)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> firstIndex = (loadCount - <span class="number">1</span>) * <span class="number">20</span>;</div><div class="line">        <span class="keyword">int</span> endIndex = <span class="number">20</span>;</div><div class="line">        String selectUrl = mUrl + <span class="string">"&amp;limit_a="</span> + firstIndex + <span class="string">"&amp;limit_b="</span> + endIndex;</div><div class="line">        LApplication.getHttpUtils().send(HttpRequest.HttpMethod.GET, selectUrl, <span class="keyword">new</span> RequestCallBack&lt;String&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(ResponseInfo&lt;String&gt; response)</span> </span>&#123;</div><div class="line">                String result = response.result;</div><div class="line">                LogUtils.d(<span class="string">"result"</span> + result);</div><div class="line">                Response&lt;GroupPicture&gt; data = GsonUtil.get(result, <span class="keyword">new</span> TypeToken&lt;Response&lt;GroupPicture&gt;&gt;() &#123;</div><div class="line">                &#125;);</div><div class="line">                <span class="keyword">if</span> (data.getStatus() == Response.FAILED) &#123;</div><div class="line"><span class="comment">//                    ToastUtil.show(data.getMsg());</span></div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    List&lt;GroupPicture&gt; dataList = data.getList();</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (dataList == <span class="keyword">null</span> || dataList.size() == <span class="number">0</span>) &#123;</div><div class="line">                        ToastUtil.show(<span class="string">"暂未更多资源，敬请期待..."</span>);</div><div class="line">                        <span class="keyword">return</span>;</div><div class="line">                    &#125;</div><div class="line">                        imageDatas.addAll(dataList);</div><div class="line"></div><div class="line">                    LLogUtils.d(<span class="string">"imageDatas==============="</span>+imageDatas.size());</div><div class="line">                        loadMoreImages();</div><div class="line"><span class="comment">//                    handler.sendMessageDelayed(handler.obtainMessage(0, MyScrollView2.this), 5);</span></div><div class="line"></div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(HttpException arg0, String arg1)</span> </span>&#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 进行一些关键性的初始化操作，获取MyScrollView的高度，以及得到第一列的宽度值。并在这里开始加载第一页的图片。</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onLayout(changed, l, t, r, b);</div><div class="line">        <span class="keyword">if</span> (changed &amp;&amp; !loadOnce) &#123;</div><div class="line">            scrollViewHeight = getHeight();</div><div class="line">            scrollLayout = getChildAt(<span class="number">0</span>);</div><div class="line">            firstColumn = (LinearLayout) findViewById(R.id.first_column);</div><div class="line">            secondColumn = (LinearLayout) findViewById(R.id.second_column);</div><div class="line">            columnWidth = firstColumn.getWidth();</div><div class="line">            loadOnce = <span class="keyword">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 监听用户的触屏事件，如果用户手指离开屏幕则开始进行滚动检测。</div><div class="line">     */</div><div class="line">   <span class="comment">/* @Override</span></div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        if (event.getAction() == MotionEvent.ACTION_UP) &#123;</div><div class="line">            Message message = new Message();</div><div class="line">            message.obj = this;</div><div class="line">            handler.sendMessageDelayed(message, 5);</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;*/</div><div class="line"></div><div class="line">    <span class="keyword">int</span> loadCount = <span class="number">1</span>;</div><div class="line"></div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 开始加载下一页的图片，每张图片都会开启一个异步线程去下载。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadMoreImages</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> startIndex = page * PAGE_SIZE;</div><div class="line">        <span class="keyword">int</span> endIndex = page * PAGE_SIZE + PAGE_SIZE;</div><div class="line">        <span class="keyword">if</span> (startIndex &lt; imageDatas.size()) &#123;</div><div class="line">            <span class="keyword">if</span> (loadCount &gt;= <span class="number">2</span>) &#123;</div><div class="line">                Toast.makeText(getContext(), <span class="string">"正在加载..."</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">            loadCount++;</div><div class="line">            <span class="keyword">if</span> (endIndex &gt; imageDatas.size()) &#123;</div><div class="line">                endIndex = imageDatas.size();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = startIndex; i &lt; endIndex; i++) &#123;</div><div class="line">                ImageView imageView = <span class="keyword">new</span> ImageView(getContext());</div><div class="line"></div><div class="line">                <span class="keyword">final</span> GroupPicture bean = imageDatas.get(i);</div><div class="line">                LApplication.getBitmapUtils().configDefaultShowOriginal(<span class="keyword">true</span>);</div><div class="line">                LApplication.getBitmapUtils().display(imageView, bean.getPictureUrl(), <span class="keyword">new</span> BitmapLoadCallBack&lt;ImageView&gt;() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadCompleted</span><span class="params">(ImageView imageView, String s, Bitmap bitmap, BitmapDisplayConfig bitmapDisplayConfig, BitmapLoadFrom bitmapLoadFrom)</span> </span>&#123;</div><div class="line">                        LinearLayout.LayoutParams params = <span class="keyword">new</span> LinearLayout.LayoutParams(</div><div class="line">                                ScreenUtil.getWidth() / <span class="number">2</span>, ScreenUtil.getWidth() / <span class="number">2</span>);</div><div class="line">                        params.setMargins(ScreenUtil.dp2px(<span class="number">1</span>), <span class="number">0</span>, <span class="number">0</span>, ScreenUtil.dp2px(<span class="number">1</span>));</div><div class="line">                        imageView.setTag(R.string.id, <span class="keyword">true</span>);</div><div class="line">                        imageView.setLayoutParams(params);</div><div class="line">                        imageView.setImageBitmap(bitmap);</div><div class="line">                        imageView.setScaleType(ScaleType.CENTER_CROP);</div><div class="line"></div><div class="line">                        imageView.setTag(R.string.image_url, bean);</div><div class="line">                        imageViewList.add(imageView);</div><div class="line">                        imageView.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">                            <span class="meta">@Override</span></div><div class="line">                            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                                Intent intent = <span class="keyword">new</span> Intent(getContext(), ImageShowActivity.class);</div><div class="line">                                String groupId = bean.getGroupId();</div><div class="line">                                intent.putExtra(<span class="string">"groupId"</span>, groupId);</div><div class="line">                                getContext().startActivity(intent);</div><div class="line">                            &#125;</div><div class="line">                        &#125;);</div><div class="line"></div><div class="line">                        findColumnToAdd(imageView, ScreenUtil.getWidth() / <span class="number">2</span>).addView(imageView);</div><div class="line"></div><div class="line">                        isZhixing=<span class="keyword">false</span>;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(ImageView imageView, String s, Drawable drawable)</span> </span>&#123;</div><div class="line"></div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            page++;</div><div class="line">        &#125;</div><div class="line">        checkVisibility();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 遍历imageViewList中的每张图片，对图片的可见性进行检查，如果图片已经离开屏幕可见范围，则将图片替换成一张空图。</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkVisibility</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; imageViewList.size(); i++) &#123;</div><div class="line">            ImageView imageView = imageViewList.get(i);</div><div class="line">            <span class="keyword">boolean</span> isSet = (<span class="keyword">boolean</span>) imageView.getTag(R.string.id);</div><div class="line">            <span class="keyword">int</span> borderTop = (Integer) imageView.getTag(R.string.border_top);</div><div class="line">            <span class="keyword">int</span> borderBottom = (Integer) imageView</div><div class="line">                    .getTag(R.string.border_bottom);</div><div class="line">               <span class="comment">//这个地方 getScrollY()-ScreenUtil.getWidth() 和getScrollY() + scrollViewHeight+ScreenUtil.getWidth() 多加个ScreenUtil.getWidth() 是为了上下提前显示一张图片</span></div><div class="line">            <span class="keyword">if</span> (borderBottom &gt; getScrollY()-ScreenUtil.getWidth()</div><div class="line">                   &amp;&amp; borderTop &lt; getScrollY() + scrollViewHeight+ScreenUtil.getWidth()) &#123;<span class="comment">//show</span></div><div class="line">                <span class="keyword">final</span> GroupPicture bean = (GroupPicture) imageView.getTag(R.string.image_url);</div><div class="line">                imageView.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">                    <span class="meta">@Override</span></div><div class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                        Intent intent = <span class="keyword">new</span> Intent(getContext(), ImageShowActivity.class);</div><div class="line">                        String groupId = bean.getGroupId();</div><div class="line">                        intent.putExtra(<span class="string">"groupId"</span>, groupId);</div><div class="line">                        getContext().startActivity(intent);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                 <span class="keyword">if</span>(!isSet) &#123;</div><div class="line">                     LApplication.getBitmapUtils().display(imageView, bean.getPictureUrl());</div><div class="line">                     imageView.setTag(R.string.id, <span class="keyword">true</span>);</div><div class="line">                 &#125;</div><div class="line"></div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                imageView.setImageResource(R.drawable.empty_photo);</div><div class="line">                imageView.setOnClickListener(<span class="keyword">null</span>);</div><div class="line">                imageView.setTag(R.string.id, <span class="keyword">false</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> LinearLayout <span class="title">findColumnToAdd</span><span class="params">(ImageView imageView, <span class="keyword">int</span> imageHeight)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (firstColumnHeight &lt;= secondColumnHeight) &#123;</div><div class="line">            imageView.setTag(R.string.border_top, firstColumnHeight);</div><div class="line">            firstColumnHeight += imageHeight;</div><div class="line">            imageView.setTag(R.string.border_bottom, firstColumnHeight);</div><div class="line">            <span class="keyword">return</span> firstColumn;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            imageView.setTag(R.string.border_top, secondColumnHeight);</div><div class="line">            secondColumnHeight += imageHeight;</div><div class="line">            imageView</div><div class="line">                    .setTag(R.string.border_bottom, secondColumnHeight);</div><div class="line">            <span class="keyword">return</span> secondColumn;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此自定义ScrollView没有使用常规的实现解耦分离、这点没有做好~~</p>
<p>使用方法：或者将这个布局文件加到其他布局文件中 或者作为根布局文件<br>布局文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</div><div class="line"></div><div class="line">	&lt;com.qiao.custom.MyScrollView2</div><div class="line">	    android:id="@+id/select_scroll"</div><div class="line">	    xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">	    android:layout_width="match_parent"</div><div class="line">	    android:layout_height="match_parent"&gt;</div><div class="line">	</div><div class="line">	    &lt;LinearLayout</div><div class="line">	        android:layout_width="match_parent"</div><div class="line">	        android:layout_height="wrap_content"</div><div class="line">	        android:orientation="vertical"&gt;</div><div class="line"></div><div class="line">            //在顶部加了个自定义的viewPager 轮播图	 看需求 不需要删除 不影响</div><div class="line">		        &lt;com.klo.zz.bizhi.widget.CustomeViewPager</div><div class="line">	            android:id="@+id/lunbo_pager"</div><div class="line">	            android:layout_width="match_parent"</div><div class="line">	            android:layout_height="wrap_content"/&gt;</div><div class="line">	</div><div class="line">	        &lt;LinearLayout</div><div class="line">	            android:layout_width="match_parent"</div><div class="line">	            android:layout_height="wrap_content"</div><div class="line">	            android:layout_marginTop="1dp"</div><div class="line">	            android:orientation="horizontal"&gt;</div><div class="line">	</div><div class="line">	            &lt;LinearLayout</div><div class="line">	                android:id="@+id/first_column"</div><div class="line">	                android:layout_width="0dp"</div><div class="line">	                android:layout_height="wrap_content"</div><div class="line">	                android:layout_weight="1"</div><div class="line">	                android:orientation="vertical"&gt;&lt;/LinearLayout&gt;</div><div class="line">	</div><div class="line">	            &lt;LinearLayout</div><div class="line">	                android:id="@+id/second_column"</div><div class="line">	                android:layout_width="0dp"</div><div class="line">	                android:layout_height="wrap_content"</div><div class="line">	                android:layout_weight="1"</div><div class="line">	                android:orientation="vertical"&gt;&lt;/LinearLayout&gt;</div><div class="line">	        &lt;/LinearLayout&gt;</div><div class="line">	    &lt;/LinearLayout&gt;</div><div class="line">	&lt;/com.qiao.custom.MyScroll2&gt;</div></pre></td></tr></table></figure>
<p>在String.xml中添加</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;string name="border_top"&gt;Border Top&lt;/string&gt;</div><div class="line">&lt;string name="border_bottom"&gt;Border Bottom&lt;/string&gt;</div><div class="line">&lt;string name="image_url"&gt;Image Url&lt;/string&gt;</div><div class="line">&lt;string name="bitmap"&gt;bitmap&lt;/string&gt;</div><div class="line">&lt;string name="id"&gt;99&lt;/string&gt;</div></pre></td></tr></table></figure>
<p>在类里面 findViewById()找到 myScrollView 然后 setUrl();</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于Android Studio的Gradle文件配置的一些知识]]></title>
      <url>http://yoursite.com/2015/08/10/%E5%85%B3%E4%BA%8EAndroid-Studio%E7%9A%84Gradle%E7%9A%84%E9%85%8D%E7%BD%AE%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="一、采用签名不再是debug的签名"><a href="#一、采用签名不再是debug的签名" class="headerlink" title="一、采用签名不再是debug的签名"></a>一、采用签名不再是debug的签名</h3><p>  直接在编辑环境中运行app默认是debug签名的，我们想更改签名不是debug（例如，微信sdk接入分享的使用要求apk文件不能是debug签名，否则不生效）。</p>
<p>  我们需要在项目的build.gradle中android{} 根目录中添加：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">	android&#123;                        <span class="comment">//在他的目录下添加</span></div><div class="line">	 </div><div class="line">		 signingConfigs&#123;</div><div class="line">		        debug&#123;</div><div class="line">		            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"haha.keystore"</span>)</span>            <span class="comment">//签名文件的名字 这是在根目录下</span></span></div><div class="line">		            storePassword "haha123456"                 <span class="comment">//密码</span></div><div class="line">		            keyAlias "zzu"                            <span class="comment">//组织（这个是刚开始生成签名文件时填的）</span></div><div class="line">		            keyPassword "haha123456"                   <span class="comment">//key密码</span></div><div class="line">		        &#125;</div><div class="line">		    &#125;</div><div class="line">	 &#125;</div><div class="line">	 </div><div class="line">```	 </div><div class="line">	 </div><div class="line">同时还要经签名文件 haha.keystore放到项目app的根目录下</div><div class="line"></div><div class="line">或者在项目的build.gradle中android&#123;&#125;根目录中添加：</div><div class="line"></div><div class="line">```java</div><div class="line"></div><div class="line">Properties properties = <span class="keyword">new</span> Properties()</div><div class="line">    properties.load(project.rootProject.file(<span class="string">'local.properties'</span>).newDataInputStream())</div><div class="line"></div><div class="line">	signingConfigs &#123;</div><div class="line">	        haha &#123;                                              <span class="comment">//haha 这个名字是随意命名的</span></div><div class="line">	            <span class="function">storeFile <span class="title">file</span><span class="params">(<span class="string">"../keystore/haha.keystore"</span>)</span>     <span class="comment">// 签名文件的路径   这是在根目录下新建了keystore文件夹</span></span></div><div class="line">	            storePassword properties.<span class="title">getProperty</span><span class="params">(<span class="string">"Password"</span>)</span></div><div class="line">	            keyAlias properties.<span class="title">getProperty</span><span class="params">(<span class="string">"keyAlias"</span>)</span></div><div class="line">	            keyPassword properties.<span class="title">getProperty</span><span class="params">(<span class="string">"Password"</span>)</span></div><div class="line">	        &#125;</div><div class="line"></div><div class="line"></div><div class="line">	 buildTypes &#123;</div><div class="line">	        release &#123;</div><div class="line">	            signingConfig signingConfigs.haha      <span class="comment">//配置</span></div><div class="line">	            minifyEnabled <span class="keyword">false</span>    <span class="comment">//时候开启混淆</span></div><div class="line">	            <span class="function">proguardFiles <span class="title">getDefaultProguardFile</span><span class="params">(<span class="string">'proguard-android.txt'</span>)</span>, 'proguard-rules.pro'   <span class="comment">//混淆文件</span></span></div><div class="line">	        &#125;</div><div class="line">	</div><div class="line">	        debug &#123;</div><div class="line">	            signingConfig signingConfigs.haha</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
<p>然后在local.properties 中添加 </p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">keyAlias=haha</div><div class="line">Password=haha123</div></pre></td></tr></table></figure>
<h3 id="二、直接生成以什么命名格式的apk文件"><a href="#二、直接生成以什么命名格式的apk文件" class="headerlink" title="二、直接生成以什么命名格式的apk文件"></a>二、直接生成以什么命名格式的apk文件</h3><p>同样是在项目的build.gradle中android{}根目录中添加：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">applicationVariants.all &#123;</div><div class="line">       variant -&gt;</div><div class="line">           variant.outputs.each &#123;</div><div class="line">               output -&gt;</div><div class="line">                   def oldFile = output.<span class="function">outputFile</span></div><div class="line">                   <span class="title">if</span> <span class="params">(variant.buildType.name.equals(<span class="string">'release'</span>)</span>) &#123;</div><div class="line">	</div><div class="line">                            <span class="comment">//生成的就是  bizhi-版本号-版本名_singed.apk</span></div><div class="line">                       def releaseApkName=<span class="string">'bizhi-'</span>+defaultConfig.versionCode+<span class="string">"-"</span>+defaultConfig.versionName+<span class="string">"-signed.apk"</span></div><div class="line">                       output.outputFile=<span class="keyword">new</span> File(oldFile.parent,releaseApkName)</div><div class="line">                   &#125;</div><div class="line">           &#125;</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<h3 id="三、Gradle多渠道打包"><a href="#三、Gradle多渠道打包" class="headerlink" title="三、Gradle多渠道打包"></a>三、Gradle多渠道打包</h3><p>以有多渠道打包为例，</p>
<p>在AndroidManifest.xml里面会有这么一段：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=<span class="string">"UMENG_CHANNEL"</span></div><div class="line">    android:value=<span class="string">"Channel_ID"</span> /&gt;</div></pre></td></tr></table></figure>
<p>里面的Channel_ID就是渠道标示。我们的目标就是在编译的时候这个值能够自动变化。</p>
<p><li>第一步 在AndroidManifest.xml里配置PlaceHolder</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;meta-data</div><div class="line">    android:name=<span class="string">"UMENG_CHANNEL"</span></div><div class="line">    android:value=<span class="string">"$&#123;UMENG_CHANNEL_VALUE&#125;"</span> /&gt;</div></pre></td></tr></table></figure>
<p><li>第二步 在build.gradle设置productFlavors</li></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">	android &#123;  </div><div class="line">	    productFlavors &#123;</div><div class="line">	        xiaomi &#123;</div><div class="line">	            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"xiaomi"</span>]</div><div class="line">	        &#125;</div><div class="line">	        _360 &#123;</div><div class="line">	            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"_360"</span>]</div><div class="line">	        &#125;</div><div class="line">	        baidu &#123;</div><div class="line">	            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"baidu"</span>]</div><div class="line">	        &#125;</div><div class="line">	        wandoujia &#123;</div><div class="line">	            manifestPlaceholders = [UMENG_CHANNEL_VALUE: <span class="string">"wandoujia"</span>]</div><div class="line">	        &#125;</div><div class="line">	    &#125;  </div><div class="line">	&#125;</div><div class="line">```	</div><div class="line">或者批量修改</div><div class="line"></div><div class="line">全选复制放进笔记</div><div class="line"></div><div class="line">```java</div><div class="line">	android &#123;  </div><div class="line">	    productFlavors &#123;</div><div class="line">	        xiaomi &#123;&#125;</div><div class="line">	        _360 &#123;&#125;</div><div class="line">	        baidu &#123;&#125;</div><div class="line">	        wandoujia &#123;&#125;</div><div class="line">	    &#125;  </div><div class="line">	</div><div class="line">	    productFlavors.all &#123; </div><div class="line">	        flavor -&gt; flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name] </div><div class="line">	    &#125;</div><div class="line">	&#125;</div><div class="line">```	</div><div class="line"></div><div class="line">整体就是：</div><div class="line"></div><div class="line">```java</div><div class="line">productFlavors &#123;</div><div class="line">        _3kongjian &#123;&#125;   <span class="comment">//3空间</span></div><div class="line">        wandoujia &#123;&#125;<span class="comment">//豌豆荚</span></div><div class="line">        _360 &#123;&#125;<span class="comment">//360</span></div><div class="line">        tencent &#123;&#125;<span class="comment">//应用宝</span></div><div class="line">        _91 &#123;&#125;<span class="comment">//91助手</span></div><div class="line">        baidu &#123;&#125;<span class="comment">//百度</span></div><div class="line">        xiaomi &#123;&#125;<span class="comment">//小米</span></div><div class="line">        huawei &#123;&#125;<span class="comment">//华为</span></div><div class="line">        anzhi &#123;&#125;  <span class="comment">//安智</span></div><div class="line"></div><div class="line"></div><div class="line">        productFlavors.all &#123; flavor -&gt;</div><div class="line">            flavor.manifestPlaceholders = [UMENG_CHANNEL_VALUE: name]</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    applicationVariants.all &#123;</div><div class="line">        variant -&gt;</div><div class="line">            variant.outputs.each &#123;</div><div class="line">                output -&gt;</div><div class="line">                    def oldFile = output.<span class="function">outputFile</span></div><div class="line">                    <span class="title">if</span> <span class="params">(variant.buildType.name.equals(<span class="string">'release'</span>)</span>) &#123;</div><div class="line">                        def releaseApkName = defaultConfig.versionName + <span class="string">'/yifenguser-'</span> + defaultConfig.versionName + <span class="string">"-"</span> + variant.productFlavors[<span class="number">0</span>].name + <span class="string">"-signed.apk"</span></div><div class="line">                        output.outputFile = <span class="keyword">new</span> File(oldFile.parent, releaseApkName)</div><div class="line">                    &#125;</div><div class="line">            &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于ViewPager的一些知识]]></title>
      <url>http://yoursite.com/2015/07/30/%E5%85%B3%E4%BA%8EViewPager%E7%9A%84%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="需求一："><a href="#需求一：" class="headerlink" title="需求一："></a>需求一：</h3><p> ViewPager滑动到第一张继续向右滑、滑倒最后一张继续向左滑，之后的逻辑操作（例：弹出提示、打开另一个Activity等）</p>
<p> 这两种方法都有缺陷：弹出提示建议 方法二，打开新的Activity建议方法一</p>
<p>方法一：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> <span class="keyword">int</span> currentPageScrollStatus;</div><div class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">showData</span><span class="params">()</span> </span>&#123;</div><div class="line">    imageAdapter = <span class="keyword">new</span> ImageAdapter();</div><div class="line">    imagePager.setAdapter(imageAdapter);</div><div class="line">	</div><div class="line">    imagePager.setOnPageChangeListener(<span class="keyword">new</span> ViewPager.OnPageChangeListener() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrolled</span><span class="params">(<span class="keyword">int</span> position, <span class="keyword">float</span> positionOffset, <span class="keyword">int</span> positionOffsetPixels)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (position == <span class="number">0</span>) &#123;</div><div class="line">                <span class="comment">//如果offsetPixels是0页面也被滑动了，代表在第一页还要往左划</span></div><div class="line">                <span class="keyword">if</span> (positionOffsetPixels == <span class="number">0</span> &amp;&amp; currentPageScrollStatus == <span class="number">1</span>) &#123;</div><div class="line">                    ToastUtil.show(<span class="string">"已经是第一张了"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (position == imageAdapter.getCount()-<span class="number">1</span>) &#123;</div><div class="line">                <span class="comment">//已经在最后一页还想往右划</span></div><div class="line">                <span class="keyword">if</span> (positionOffsetPixels == <span class="number">0</span> &amp;&amp; currentPageScrollStatus == <span class="number">1</span>) &#123;</div><div class="line">                    ToastUtil.show(<span class="string">"已经是最后一张了"</span>);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">	</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageSelected</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</div><div class="line">            <span class="comment">//切换page设置当前position值</span></div><div class="line">            setCurrentPos(position);</div><div class="line">        &#125;</div><div class="line">	</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPageScrollStateChanged</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</div><div class="line">    </div><div class="line">            currentPageScrollStatus=state;</div><div class="line">        &#125;</div><div class="line">	</div><div class="line">       </div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法二：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">	    int currItem;</div><div class="line">        </div><div class="line">	    private void showData() &#123;</div><div class="line">	        imageAdapter = new ImageAdapter();</div><div class="line">	        imagePager.setAdapter(imageAdapter);</div><div class="line">	</div><div class="line">	        imagePager.setOnPageChangeListener(new ViewPager.OnPageChangeListener() &#123;</div><div class="line">                int lastState=-1;</div><div class="line">	            @Override</div><div class="line">	            public void onPageScrolled(int position, float positionOffset, int positionOffsetPixels) &#123;</div><div class="line">	               currItem=position;</div><div class="line">	            &#125;</div><div class="line">	</div><div class="line">	            @Override</div><div class="line">	            public void onPageSelected(int position) &#123;</div><div class="line">	               </div><div class="line">	            &#125;</div><div class="line">	</div><div class="line">	            @Override</div><div class="line">	            public void onPageScrollStateChanged(int state) &#123;</div><div class="line">	                if(currItem == imageAdapter.getCount()-1 &amp;&amp; state == 0 &amp;&amp; lastState == 1)&#123;</div><div class="line">	                    ToastUtil.show("已经是最后一张了");</div><div class="line">	                &#125;if(currItem == 0 &amp;&amp; state == 0 &amp;&amp; lastState == 1)&#123;</div><div class="line">	                    ToastUtil.show("已经是第一张了");</div><div class="line">	                &#125;</div><div class="line">                    lastState = state;</div><div class="line">	            &#125;</div><div class="line">	           </div><div class="line">	        &#125;);</div><div class="line">	    &#125;</div><div class="line">```	   </div><div class="line"> </div><div class="line">#### 方法二解决缺陷：声明一个lastState值</div><div class="line"></div><div class="line">### 需求二：</div><div class="line"></div><div class="line"> 点击ViewPager的Item跳转到不同的，做不同的逻辑操作等</div><div class="line"> </div><div class="line"> 不是viewpager.setOnItemClickListener</div><div class="line"></div><div class="line"> 而是在PagerAdapter 的instantiateItem()方法中根据postion 做相应的逻辑操作</div><div class="line"></div><div class="line">```java</div><div class="line">	public Object instantiateItem(ViewGroup container, final int position) &#123;</div><div class="line">	        final int location = position % mViewList.size();      //这是为了做无限轮播</div><div class="line">	        View view = mViewList.get(location);</div><div class="line">	        container.addView(view);</div><div class="line">	        view.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">	            @Override</div><div class="line">	            public void onClick(View v) &#123;</div><div class="line">	               Intent intent=new Intent(mContext, ImageShowActivity.class);</div><div class="line">	                intent.putExtra("groupId",mIdList.get(location));</div><div class="line">	                mContext.startActivity(intent);</div><div class="line">	            &#125;</div><div class="line">	        &#125;);</div><div class="line">	        return view;</div><div class="line">	    &#125;</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[自定义矩形、圆形等边框及相关知识]]></title>
      <url>http://yoursite.com/2015/07/30/%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9F%A9%E5%BD%A2%E3%80%81%E5%9C%86%E5%BD%A2%E7%AD%89%E8%BE%B9%E6%A1%86%E5%8F%8A%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86/</url>
      <content type="html"><![CDATA[<h3 id="需求一："><a href="#需求一：" class="headerlink" title="需求一："></a>需求一：</h3><p> 做一个一半矩形、一半圆形的边框，而且左边没有边框、其他上、右、下要有1像素的边框。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line">&lt;layer-list xmlns:android="http://schemas.android.com/apk/res/android"&gt;</div><div class="line">    &lt;item android:left="-2dp"&gt;                    //重点：使左边没有描边</div><div class="line">        &lt;shape android:shape="rectangle"&gt;         //矩形      </div><div class="line"></div><div class="line">            &lt;corners</div><div class="line">                android:topLeftRadius="0dp"       //左上圆角半径 0</div><div class="line">                android:topRightRadius="15dp"     //右上圆角半径 15 </div><div class="line">                android:bottomLeftRadius="0dp"      左下圆角半径 0</div><div class="line">                android:bottomRightRadius="15dp" /&gt;   //右下圆角半径 15</div><div class="line"></div><div class="line"></div><div class="line">            &lt;gradient                            //矩形边框内填充颜色（渐变色）</div><div class="line">                android:startColor="#55000000"</div><div class="line">                android:endColor="#55000000"</div><div class="line">                android:angle="270" /&gt;</div><div class="line"></div><div class="line"></div><div class="line">            &lt;stroke                              //描边 这样四周有1dp 的边框</div><div class="line">                android:width="1dp"</div><div class="line">                android:color="#55ffffff" /&gt;</div><div class="line">        &lt;/shape&gt;</div><div class="line">    &lt;/item&gt;</div><div class="line">&lt;/layer-list&gt;</div></pre></td></tr></table></figure>
<h3 id="后期需求："><a href="#后期需求：" class="headerlink" title="后期需求："></a>后期需求：</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[android将给定图片维持宽高比例缩放后，截取正中间的正方形部分]]></title>
      <url>http://yoursite.com/2015/07/25/android%E5%B0%86%E7%BB%99%E5%AE%9A%E5%9B%BE%E7%89%87%E7%BB%B4%E6%8C%81%E5%AE%BD%E9%AB%98%E6%AF%94%E4%BE%8B%E7%BC%A9%E6%94%BE%E5%90%8E%EF%BC%8C%E6%88%AA%E5%8F%96%E6%AD%A3%E4%B8%AD%E9%97%B4%E7%9A%84%E6%AD%A3%E6%96%B9%E5%BD%A2%E9%83%A8%E5%88%86/</url>
      <content type="html"><![CDATA[<a id="more"></a>
<h3 id="一、本地图片"><a href="#一、本地图片" class="headerlink" title="一、本地图片"></a>一、本地图片</h3><p>本地图片只需将图片转换为bitmap对象即可。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 将给定图片维持宽高比缩放后，截取正中间的正方形部分。</div><div class="line">    * <span class="doctag">@param</span> bitmap      原图</div><div class="line">    * <span class="doctag">@param</span> edgeLength  希望得到的正方形部分的边长</div><div class="line">    * <span class="doctag">@return</span>  缩放截取正中部分后的位图。</div><div class="line">    */</div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Bitmap <span class="title">centerSquareScaleBitmap</span><span class="params">(Bitmap bitmap, <span class="keyword">int</span> edgeLength)</span></span></div><div class="line">  &#123;</div><div class="line">   <span class="keyword">if</span>(<span class="keyword">null</span> == bitmap || edgeLength &lt;= <span class="number">0</span>)</div><div class="line">   &#123;</div><div class="line">    <span class="keyword">return</span>  <span class="keyword">null</span>;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   Bitmap result = bitmap;</div><div class="line">   <span class="keyword">int</span> widthOrg = bitmap.getWidth();</div><div class="line">   <span class="keyword">int</span> heightOrg = bitmap.getHeight();</div><div class="line">   </div><div class="line">   <span class="keyword">if</span>(widthOrg &gt; edgeLength &amp;&amp; heightOrg &gt; edgeLength)</div><div class="line">   &#123;</div><div class="line">    <span class="comment">//压缩到一个最小长度是edgeLength的bitmap</span></div><div class="line">    <span class="keyword">int</span> longerEdge = (<span class="keyword">int</span>)(edgeLength * Math.max(widthOrg, heightOrg) / Math.min(widthOrg, heightOrg));</div><div class="line">    <span class="keyword">int</span> scaledWidth = widthOrg &gt; heightOrg ? longerEdge : edgeLength;</div><div class="line">    <span class="keyword">int</span> scaledHeight = widthOrg &gt; heightOrg ? edgeLength : longerEdge;</div><div class="line">    Bitmap scaledBitmap;</div><div class="line">    </div><div class="line">          <span class="keyword">try</span>&#123;</div><div class="line">           scaledBitmap = Bitmap.createScaledBitmap(bitmap, scaledWidth, scaledHeight, <span class="keyword">true</span>);</div><div class="line">          &#125; </div><div class="line">          <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">           <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">          &#125;</div><div class="line">          </div><div class="line">       <span class="comment">//从图中截取正中间的正方形部分。</span></div><div class="line">       <span class="keyword">int</span> xTopLeft = (scaledWidth - edgeLength) / <span class="number">2</span>;</div><div class="line">       <span class="keyword">int</span> yTopLeft = (scaledHeight - edgeLength) / <span class="number">2</span>;</div><div class="line">       </div><div class="line">       <span class="keyword">try</span>&#123;</div><div class="line">        result = Bitmap.createBitmap(scaledBitmap, xTopLeft, yTopLeft, edgeLength, edgeLength);</div><div class="line">        scaledBitmap.recycle();</div><div class="line">       &#125;</div><div class="line">       <span class="keyword">catch</span>(Exception e)&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">       &#125;         </div><div class="line">   &#125;</div><div class="line">        </div><div class="line">   <span class="keyword">return</span> result;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="二、网络图片"><a href="#二、网络图片" class="headerlink" title="二、网络图片"></a>二、网络图片</h3><p>使用xUtils框架中的Bitmaputils的display方法可以有效地将网络上的图片成功的显示在ImageView布局上。</p>
<p>其中new BitmapCallBack接口中的onLoadCompleted方法，表示load成功，可以得到Bitmap对象，截取我们就是要对bitmap进行操作。</p>
<p>然后调用上述的截取方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">LApplication.getBitmapUtils().display(imageView, selectPicture.getPictureUrl(), <span class="keyword">new</span> BitmapLoadCallBack&lt;View&gt;() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadCompleted</span><span class="params">(ImageView imageView, String s, Bitmap bitmap, BitmapDisplayConfig bitmapDisplayConfig, BitmapLoadFrom bitmapLoadFrom)</span> </span>&#123;</div><div class="line">            Bitmap showBitmap = centerSquareScaleBitmap(bitmap, ScreenUtil.getWidth() / <span class="number">2</span>);  <span class="comment">//截取新的bitmap</span></div><div class="line">            imageView.setBitmap(showBitmap);     <span class="comment">//设显示所占的宽高</span></div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(View view, String s, Drawable drawable)</span> </span>&#123;</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure>
<h3 id="做了那么多，其实有时候还不如这样做，看情况而定吧-这个不行在用上面的："><a href="#做了那么多，其实有时候还不如这样做，看情况而定吧-这个不行在用上面的：" class="headerlink" title="做了那么多，其实有时候还不如这样做，看情况而定吧 这个不行在用上面的："></a>做了那么多，其实有时候还不如这样做，看情况而定吧 这个不行在用上面的：</h3><figure class="highlight java"><figcaption><span>imageView.setScaleType(ScaleType.CENTER_CROP);</span><a href="//就这一句话">link</a></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">LApplication.getBitmapUtils().display(imageView, selectPicture.getPictureUrl(), <span class="keyword">new</span> BitmapLoadCallBack&lt;View&gt;() &#123;</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadCompleted</span><span class="params">(ImageView imageView, String s, Bitmap bitmap, BitmapDisplayConfig bitmapDisplayConfig, BitmapLoadFrom bitmapLoadFrom)</span> </span>&#123;</div><div class="line">               imageView.setBitmap(bitmap);     </div><div class="line">           &#125;</div><div class="line">	</div><div class="line">           <span class="meta">@Override</span></div><div class="line">           <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(View view, String s, Drawable drawable)</span> </span>&#123;</div><div class="line">	</div><div class="line">           &#125;</div><div class="line">       &#125;);</div></pre></td></tr></table></figure>
<h3 id="关于ScaleType-的图片说明"><a href="#关于ScaleType-的图片说明" class="headerlink" title="关于ScaleType 的图片说明"></a>关于ScaleType 的图片说明</h3><p><img src="http://7xl32g.com1.z0.glb.clouddn.com/smallPicture.png">小图<br><img src="http://7xl32g.com1.z0.glb.clouddn.com/bigPicture.png">大图</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[开发Android壁纸:设置壁纸、设置锁屏心得]]></title>
      <url>http://yoursite.com/2015/07/23/%E5%BC%80%E5%8F%91Android%E5%A3%81%E7%BA%B8-%E8%AE%BE%E7%BD%AE%E5%A3%81%E7%BA%B8%E3%80%81%E8%AE%BE%E7%BD%AE%E9%94%81%E5%B1%8F%E5%BF%83%E5%BE%97/</url>
      <content type="html"><![CDATA[<p>直接获取网络上的图片，然后设置壁纸、锁屏可以，不过我这里是先将网络上的图片下载下来，存到sd卡上，然后设置sd卡上的图片为壁纸。</p>
<h2 id="源码下载："><a href="#源码下载：" class="headerlink" title="源码下载："></a>源码下载：</h2><pre><code>这个我还没添加到github上，添加之后更改本位置的内容
</code></pre><h2 id="设置壁纸"><a href="#设置壁纸" class="headerlink" title="设置壁纸"></a>设置壁纸</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wallpaper</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Activity mContext;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Wallpaper</span><span class="params">(ImageShowActivity imageShowActivity)</span> </span>&#123;</div><div class="line">        mContext = imageShowActivity;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWallPaper</span><span class="params">(String url)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> index = url.lastIndexOf(<span class="string">"/"</span>);</div><div class="line">        String pirtureName = url.substring(index + <span class="number">1</span>);</div><div class="line">        String path = AppConfig.DOWN_PATH;</div><div class="line">        File file = <span class="keyword">new</span> File(path);</div><div class="line">        <span class="keyword">if</span> (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</div><div class="line">            file.mkdir();</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">final</span> String target = path + <span class="string">"/"</span> + pirtureName;</div><div class="line">        File targetFile = <span class="keyword">new</span> File(target);</div><div class="line">        <span class="keyword">if</span> (targetFile.exists()) &#123;</div><div class="line">            set(target);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            LApplication.getHttpUtils().download(url, target, <span class="keyword">new</span> RequestCallBack&lt;File&gt;() &#123;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoading</span><span class="params">(<span class="keyword">long</span> total, <span class="keyword">long</span> current, <span class="keyword">boolean</span> isUploading)</span> </span>&#123;</div><div class="line">                    <span class="keyword">super</span>.onLoading(total, current, isUploading);</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(ResponseInfo&lt;File&gt; arg0)</span> </span>&#123;</div><div class="line">                    set(target);   <span class="comment">//设置壁纸</span></div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFailure</span><span class="params">(HttpException arg0, String arg1)</span> </span>&#123;</div><div class="line">                    ToastUtil.show(<span class="string">"网络异常"</span>);</div><div class="line"></div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">	<span class="comment">/**</span></div><div class="line">     * 设置壁纸</div><div class="line">     * <span class="doctag">@param</span> target 图片路径</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(String target)</span> </span>&#123;</div><div class="line">        Bitmap bitmap = BitmapFactory.decodeFile(target);</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            WallpaperManager wallpaperManager = android.app.WallpaperManager.getInstance(mContext);</div><div class="line">            wallpaperManager.setBitmap(bitmap);</div><div class="line">            ToastUtil.show(<span class="string">"设置成功"</span>);</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            String msg = <span class="string">"设置桌面背景发生异常:"</span> + e.getLocalizedMessage();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>别忘记在ApplicationManifest.xml 中加上权限的设置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name = <span class="string">"android.permission.SET_WALLPAPER"</span>/&gt;</div></pre></td></tr></table></figure>
<p>壁纸设置方法有三种：  <b>（尼玛，这三种设置壁纸的方法，都不管我们的死活，直接设置随着屏幕滚动，图片都模糊了）</b></p>
<p>第一 通过WallpaperManager方法中的 setBitmap（）</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">WallpaperManager wallpaperManager = WallpaperManager.getInstance(<span class="keyword">this</span>);</div><div class="line"> Resources res = getResources();</div><div class="line"> Bitmap bitmap=BitmapFactory.decodeResource(res,R.drawable.h); </div><div class="line">  <span class="keyword">try</span>&#123;</div><div class="line"> wallpaperManager.setBitmap(bitmap);</div><div class="line">&#125;<span class="keyword">catch</span> (IOException e)&#123;</div><div class="line">e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二 使用WallpaperManager的setResource(int ResourceID)方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">WallpaperManager wallpaperManager = WallpaperManager.getInstance(<span class="keyword">this</span>);</div><div class="line">	<span class="keyword">try</span> &#123;</div><div class="line">		wallpaperManager.setResource(ResourceID);</div><div class="line">        Toast.makeText(<span class="keyword">this</span>, <span class="string">"设置成功"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">	&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">		e.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第三 通过ContextWrapper 类中提供的setWallpaper（）方法</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Resources localResources = getBaseContext().getResources();</div><div class="line">InputStream localInputStream2 = localResources.openRawResource(ResourceID);</div><div class="line">		<span class="keyword">try</span> &#123;</div><div class="line">			setWallpaper(localInputStream2);</div><div class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">			e.printStackTrace();</div><div class="line">		&#125;</div></pre></td></tr></table></figure>
<h4 id="注意：设置单屏壁纸，不随着屏幕滑动而滑动"><a href="#注意：设置单屏壁纸，不随着屏幕滑动而滑动" class="headerlink" title="注意：设置单屏壁纸，不随着屏幕滑动而滑动"></a>注意：设置单屏壁纸，不随着屏幕滑动而滑动</h4><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div></pre></td><td class="code"><pre><div class="line">	 public void set(String target) &#123;</div><div class="line">	        Bitmap bitmap = BitmapFactory.decodeFile(target);</div><div class="line">	        try &#123;</div><div class="line">	            WallpaperManager wallpaperManager = android.app.WallpaperManager.getInstance(mContext);</div><div class="line">	            int desiredMinimumWidth = mContext.getWindowManager().getDefaultDisplay().getWidth();  //获取屏幕的宽</div><div class="line">	            int desiredMinimumHeight = mContext.getWindowManager().getDefaultDisplay().getHeight(); //获取屏幕的高</div><div class="line">                 //bitmap这个参数再加工一次，缩放到desireMinimumWidth,desireMinmunHeight宽度和高度后再设置</div><div class="line">	            Bitmap sbitmap = sBitmap(bitmap,desiredMinimumWidth,desiredMinimumHeight);</div><div class="line">                //很重要，有的手机少了这句话不行........</div><div class="line">                wallpaperManager.suggestDesiredDimensions(screenWidth, screenHeight);//设置期望壁纸的尺寸</div><div class="line">	            wallpaperManager.setBitmap(sbitmap);</div><div class="line">	            ToastUtil.show("设置成功");</div><div class="line">	        &#125; catch (IOException e) &#123;</div><div class="line">	            String msg = "设置桌面背景发生异常:" + e.getLocalizedMessage();</div><div class="line">	            ToastUtil.show(msg);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	    public  Bitmap sBitmap(Bitmap b, int w, int h) &#123;</div><div class="line">	        int width = b.getWidth();</div><div class="line">	        int height = b.getHeight();</div><div class="line">	        float scaleWidth = ((float) w) / width;</div><div class="line">	        float scaleHeight = ((float) h) / height;</div><div class="line">	        Matrix matrix = new Matrix();</div><div class="line">	        matrix.postScale(scaleWidth, scaleHeight);//缩放</div><div class="line">	        return Bitmap.createBitmap(b, 0, 0, width, height, matrix, true);</div><div class="line">	    &#125;</div><div class="line">```	   </div><div class="line"></div><div class="line">### 设置锁屏(此处的设置锁屏无法禁用home键，而且不好看，马上推出好看的....)</div><div class="line"></div><div class="line">&lt;h1&gt;&lt;a href="https://github.com/iosline/lockScreen"&gt;好看的锁屏：源码下载&lt;/a&gt;&lt;/h1&gt;</div><div class="line"></div><div class="line">&lt;b&gt;设置锁屏壁纸的原理：</div><div class="line"></div><div class="line">  1.监测开机广播，开启锁屏服务，开启锁屏的Activity</div><div class="line"></div><div class="line">  2.设置锁屏壁纸其实就是，监测手机解锁屏幕，然后start一个Activity,该Activity设置壁纸，设置滑动按钮，滑倒指定位置，将当前Activity finish掉即可。</div><div class="line"></div><div class="line">  3.需要注意 home键    Home键在3.1之后就不能屏蔽掉了 所以我们采用广播的方式：在当前Activity注册监听home键的广播,然后重新启动该Activity&lt;/b&gt;</div><div class="line"></div><div class="line">#### 代码如下：</div><div class="line"></div><div class="line">设置锁屏：</div><div class="line"></div><div class="line">```java</div><div class="line">	public class LockManager &#123;</div><div class="line">	</div><div class="line">	    private Activity mContext;</div><div class="line">	</div><div class="line">	    public LockManager(ImageShowActivity imageShowActivity) &#123;</div><div class="line">	        mContext = imageShowActivity;</div><div class="line">	    &#125;</div><div class="line">	</div><div class="line">	    public void setLock(String url) &#123;</div><div class="line">	        int index = url.lastIndexOf("/");</div><div class="line">	        String pirtureName = url.substring(index + 1);</div><div class="line">	        String path = AppConfig.DOWN_PATH;</div><div class="line">	        File file = new File(path);</div><div class="line">	        if (!file.exists() &amp;&amp; !file.isDirectory()) &#123;</div><div class="line">	            file.mkdir();</div><div class="line">	        &#125;</div><div class="line">	        final String target = path + "/" + pirtureName;</div><div class="line">	        File targetFile = new File(target);</div><div class="line">	        if (targetFile.exists()) &#123;</div><div class="line">	            set(target);</div><div class="line">	        &#125; else &#123;</div><div class="line">	            LApplication.getHttpUtils().download(url, target, new RequestCallBack&lt;File&gt;() &#123;</div><div class="line">	</div><div class="line">	                @Override</div><div class="line">	                public void onLoading(long total, long current, boolean isUploading) &#123;</div><div class="line">	                    super.onLoading(total, current, isUploading);</div><div class="line">	</div><div class="line">	                &#125;</div><div class="line">	</div><div class="line">	                @Override</div><div class="line">	                public void onSuccess(ResponseInfo&lt;File&gt; arg0) &#123;</div><div class="line">	                    set(target);</div><div class="line">	                &#125;</div><div class="line">	</div><div class="line">	                @Override</div><div class="line">	                public void onFailure(HttpException arg0, String arg1) &#123;</div><div class="line">	                    ToastUtil.show("网络异常");</div><div class="line">	</div><div class="line">	                &#125;</div><div class="line">	            &#125;);</div><div class="line">	        &#125;</div><div class="line">	    &#125;</div><div class="line">	</div><div class="line">	    private void set(String target) &#123;</div><div class="line">	        Intent i = new Intent(mContext, LockScreenActivity.class);</div><div class="line">	        i.putExtra("targetPath", target);     //将图片路径传过去，设置新的壁纸</div><div class="line">	        CacheUtil.save("targetLock",target);  //将图片路径存起来，这样做是为了 开机自动从存储系统里获取图片路径</div><div class="line">	        mContext.startActivity(i);</div><div class="line">	    &#125;</div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<p>在AndroidManifest.xml清单文件中配置</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!-- ############ 锁屏界面、服务、监听器############ --&gt;</div><div class="line">  &lt;activity android:name=".lock.LockScreenActivity" /&gt;</div><div class="line"></div><div class="line">  &lt;service</div><div class="line">      android:name=".lock.LockScreenService"</div><div class="line">      android:process="system" /&gt;</div><div class="line"></div><div class="line">  &lt;receiver</div><div class="line">      android:name=".lock.LockScreenReceiver"</div><div class="line">      android:process=":remote"&gt;</div><div class="line">      &lt;intent-filter android:priority="1000"&gt;</div><div class="line">          &lt;action android:name="android.intent.action.BOOT_COMPLETED" /&gt;</div><div class="line">          &lt;action android:name="android.intent.action.USER_PRESENT" /&gt;</div><div class="line"></div><div class="line">          &lt;category android:name="android.intent.category.HOME" /&gt;</div><div class="line">      &lt;/intent-filter&gt;</div><div class="line">  &lt;/receiver&gt;</div></pre></td></tr></table></figure>
<p>监测开机的广播 广播接收者   (注意：开机启动，启动锁屏的service,然后service里面启动LockScreenActivity)</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">    <span class="comment">/**</span></div><div class="line"> * 开机广播，启动activity</div><div class="line"> * <span class="doctag">@author</span> jyk</div><div class="line"> *</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockScreenReceiver</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"LockScreenReceiver"</span>;</div><div class="line">	<span class="comment">//private KeyguardManager keyguardManager = null;</span></div><div class="line">	<span class="comment">//private KeyguardManager.KeyguardLock keyguardLock = null;</span></div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">		<span class="keyword">if</span>(intent.getAction().equals(Intent.ACTION_BOOT_COMPLETED))&#123;</div><div class="line">			Intent mIntent = <span class="keyword">new</span> Intent(context, LockScreenService.class);</div><div class="line">			mIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line"></div><div class="line">			<span class="comment">//keyguardManager = (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);</span></div><div class="line">			<span class="comment">//keyguardLock = keyguardManager.newKeyguardLock("");</span></div><div class="line">			<span class="comment">//keyguardLock.disableKeyguard(); </span></div><div class="line">			</div><div class="line">			context.startActivity(mIntent);</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>锁屏的服务 同时注册屏幕锁住与解锁的广播</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockScreenService</span> <span class="keyword">extends</span> <span class="title">Service</span> </span>&#123;</div><div class="line">	<span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String TAG = <span class="string">"LockScreenService"</span>;</div><div class="line">	<span class="keyword">private</span> Intent lockIntent;</div><div class="line">	<span class="keyword">private</span> KeyguardManager keyguardManager = <span class="keyword">null</span>;</div><div class="line">	<span class="keyword">private</span> KeyguardManager.KeyguardLock keyguardLock = <span class="keyword">null</span>;</div><div class="line">	</div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent arg0)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onCreate();</div><div class="line">		lockIntent = <span class="keyword">new</span> Intent(LockScreenService.<span class="keyword">this</span>, LockScreenActivity.class);</div><div class="line">		lockIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);</div><div class="line">		</div><div class="line">		<span class="comment">//注册广播</span></div><div class="line">		IntentFilter mScreenOffFilter = <span class="keyword">new</span> IntentFilter(Intent.ACTION_SCREEN_OFF);</div><div class="line">		LockScreenService.<span class="keyword">this</span>.registerReceiver(mScreenOffReceiver, mScreenOffFilter);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">		<span class="keyword">super</span>.onDestroy();</div><div class="line">           keyguardLock.reenableKeyguard();</div><div class="line">		LockScreenService.<span class="keyword">this</span>.unregisterReceiver(mScreenOffReceiver);</div><div class="line">		<span class="comment">//重新启动activity</span></div><div class="line">		startService(<span class="keyword">new</span> Intent(LockScreenService.<span class="keyword">this</span>, LockScreenService.class));</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="meta">@Override</span></div><div class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">onStartCommand</span><span class="params">(Intent intent, <span class="keyword">int</span> flags, <span class="keyword">int</span> startId)</span> </span>&#123;</div><div class="line">		<span class="keyword">return</span> Service.START_STICKY;</div><div class="line">	&#125;</div><div class="line">	</div><div class="line">	<span class="comment">/**</span></div><div class="line">	 * 屏幕变亮的广播，这里要隐藏系统的锁屏界面</div><div class="line">	 */</div><div class="line">	<span class="keyword">private</span> BroadcastReceiver mScreenOffReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">		<span class="meta">@Override</span></div><div class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">			Log.i(TAG, intent.getAction());</div><div class="line">			<span class="keyword">if</span>(intent.getAction().equals(Intent.ACTION_SCREEN_OFF)</div><div class="line">					|| intent.getAction().equals(Intent.ACTION_SCREEN_ON))&#123;</div><div class="line">				</div><div class="line">				keyguardManager = (KeyguardManager) context.getSystemService(Context.KEYGUARD_SERVICE);</div><div class="line">				keyguardLock = keyguardManager.newKeyguardLock(<span class="string">""</span>);</div><div class="line">				keyguardLock.disableKeyguard(); <span class="comment">//这里就是取消系统默认的锁屏</span></div><div class="line">				</div><div class="line">				startActivity(lockIntent); <span class="comment">//注意这里跳转的意图</span></div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="注意：取消系统默认的锁屏代码出现一次就够了-出现两次就会失效……"><a href="#注意：取消系统默认的锁屏代码出现一次就够了-出现两次就会失效……" class="headerlink" title="注意：取消系统默认的锁屏代码出现一次就够了  出现两次就会失效……"></a>注意：取消系统默认的锁屏代码出现一次就够了  出现两次就会失效……</h3><p>锁屏的LockScreenActivity</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div></pre></td><td class="code"><pre><div class="line">	<span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockScreenActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = <span class="string">"LockScreenActivity"</span>;</div><div class="line">    <span class="keyword">private</span> SliderRelativeLayout sliderRelativeLayout;</div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> MSG_LOCK_SUCESS = <span class="number">1</span>;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</div><div class="line">        requestWindowFeature(Window.FEATURE_NO_TITLE); <span class="comment">//不要title</span></div><div class="line">        getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,</div><div class="line">                WindowManager.LayoutParams.FLAG_FULLSCREEN); <span class="comment">//全屏显示</span></div><div class="line">        setContentView(R.layout.activity_lock_screen);</div><div class="line">        LApplication.init(<span class="keyword">this</span>);</div><div class="line"></div><div class="line">        <span class="comment">//注册广播</span></div><div class="line">        registerReceiver(mHomeKeyEventReceiver, <span class="keyword">new</span> IntentFilter(</div><div class="line">                Intent.ACTION_CLOSE_SYSTEM_DIALOGS));</div><div class="line"></div><div class="line">        String targetPath = getIntent().getStringExtra(<span class="string">"targetPath"</span>);</div><div class="line">        <span class="keyword">if</span>(targetPath == <span class="keyword">null</span>)&#123;</div><div class="line">            targetPath= CacheUtil.getString(<span class="string">"targetLock"</span>);</div><div class="line">        &#125;</div><div class="line">        Drawable bg = Drawable.createFromPath(targetPath);</div><div class="line">        RelativeLayout lockBg = (RelativeLayout) findViewById(R.id.lock_bg);</div><div class="line">        lockBg.setBackgroundDrawable(bg);</div><div class="line"></div><div class="line">        StringData();</div><div class="line">        sliderRelativeLayout = (SliderRelativeLayout) findViewById(R.id.sliderLayout);</div><div class="line">        sliderRelativeLayout.setMainHandler(handler);</div><div class="line">        sliderRelativeLayout.getBackground().setAlpha(<span class="number">180</span>); <span class="comment">//设置背景的透明度</span></div><div class="line"></div><div class="line">        startService(<span class="keyword">new</span> Intent(LockScreenActivity.<span class="keyword">this</span>, LockScreenService.class)); <span class="comment">//这里要显示的调用服务</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">StringData</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">final</span> Calendar c = Calendar.getInstance();</div><div class="line">        c.setTimeZone(TimeZone.getTimeZone(<span class="string">"GMT+8:00"</span>));</div><div class="line">        String mYear = String.valueOf(c.get(Calendar.YEAR)); <span class="comment">// 获取当前年份</span></div><div class="line">        String mMonth = String.valueOf(c.get(Calendar.MONTH) + <span class="number">1</span>);<span class="comment">// 获取当前月份</span></div><div class="line">        String mDay = String.valueOf(c.get(Calendar.DAY_OF_MONTH));<span class="comment">// 获取当前月份的日期号码</span></div><div class="line">        String mWay = String.valueOf(c.get(Calendar.DAY_OF_WEEK));</div><div class="line">        <span class="keyword">if</span> (<span class="string">"1"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"日"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"2"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"一"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"3"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"二"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"4"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"三"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"5"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"四"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"6"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"五"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"7"</span>.equals(mWay)) &#123;</div><div class="line">            mWay = <span class="string">"六"</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ((TextView) findViewById(R.id.time_day)).setText(mMonth + <span class="string">"月"</span> + mDay + <span class="string">"日"</span>);</div><div class="line">        ((TextView) findViewById(R.id.time_week)).setText(<span class="string">"星期"</span> + mWay);</div><div class="line"></div><div class="line">        <span class="keyword">new</span> Thread(<span class="keyword">this</span>).start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler() &#123;</div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</div><div class="line">            <span class="keyword">if</span> (MSG_LOCK_SUCESS == msg.what) &#123;</div><div class="line">                <span class="comment">//Toast.makeText(getApplicationContext(), R.string.lockSuccess, 1).show();</span></div><div class="line"><span class="comment">//				virbate();</span></div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span> (msg.what == <span class="number">100</span>) &#123;</div><div class="line">                ((TextView) findViewById(R.id.time_hour)).setText((String) msg.obj);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">if</span>(msg.what == <span class="number">99</span>)&#123;</div><div class="line">                Intent intent=<span class="keyword">new</span> Intent(LockScreenActivity.<span class="keyword">this</span>,LockScreenActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">                finish();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</div><div class="line">                SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH:mm"</span>);</div><div class="line">                String str = sdf.format(<span class="keyword">new</span> Date());</div><div class="line">                handler.sendMessage(handler.obtainMessage(<span class="number">100</span>, str));</div><div class="line">                Thread.sleep(<span class="number">1000</span>);</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 震动</div><div class="line">     */</div><div class="line">    <span class="comment">/*private void virbate()&#123;</span></div><div class="line">		Vibrator vibrator = (Vibrator) this.getSystemService(Context.VIBRATOR_SERVICE);</div><div class="line">		vibrator.vibrate(200);</div><div class="line">	&#125;*/</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 屏蔽掉Home键   自从3.1之后 就不能屏蔽了</div><div class="line">     */</div><div class="line">	<span class="comment">/*@Override</span></div><div class="line">	public void onAttachedToWindow() &#123;</div><div class="line">		this.getWindow().setType(WindowManager.LayoutParams.TYPE_KEYGUARD_DIALOG);</div><div class="line">		super.onAttachedToWindow();</div><div class="line">	&#125;*/</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 屏蔽掉返回键</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onKeyDown</span><span class="params">(<span class="keyword">int</span> keyCode, KeyEvent event)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (event.getKeyCode() == KeyEvent.KEYCODE_BACK) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">return</span> <span class="keyword">super</span>.onKeyDown(keyCode, event);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 监听是否点击了home键将客户端推到后台</div><div class="line">     */</div><div class="line">    <span class="keyword">private</span> BroadcastReceiver mHomeKeyEventReceiver = <span class="keyword">new</span> BroadcastReceiver() &#123;</div><div class="line">        String SYSTEM_REASON = <span class="string">"reason"</span>;</div><div class="line">        String SYSTEM_HOME_KEY = <span class="string">"homekey"</span>;</div><div class="line">        String SYSTEM_HOME_KEY_LONG = <span class="string">"recentapps"</span>;</div><div class="line"></div><div class="line">        <span class="meta">@Override</span></div><div class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</div><div class="line">            String action = intent.getAction();</div><div class="line">            <span class="keyword">if</span> (action.equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) &#123;</div><div class="line">                String reason = intent.getStringExtra(SYSTEM_REASON);</div><div class="line">                <span class="keyword">if</span> (TextUtils.equals(reason, SYSTEM_HOME_KEY)) &#123;</div><div class="line">                    <span class="comment">//表示按了home键,程序到了后台</span></div><div class="line">                    Toast.makeText(getApplicationContext(), <span class="string">"home"</span>,Toast.LENGTH_SHORT).show();</div><div class="line">                    handler.sendEmptyMessageDelayed(<span class="number">99</span>,<span class="number">3</span>);</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(TextUtils.equals(reason, SYSTEM_HOME_KEY_LONG))&#123;</div><div class="line">                    <span class="comment">//表示长按home键,显示最近使用的程序列表</span></div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">   </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>.onDestroy();</div><div class="line">        unregisterReceiver(mHomeKeyEventReceiver);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>LockScreenActivity 锁屏Activity的布局文件</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div></pre></td><td class="code"><pre><div class="line">&lt;RelativeLayout xmlns:tools="http://schemas.android.com/tools"</div><div class="line">    xmlns:android="http://schemas.android.com/apk/res/android"</div><div class="line">    android:id="@+id/lock_bg"</div><div class="line">    android:layout_width="match_parent"</div><div class="line">    android:layout_height="match_parent"</div><div class="line">    tools:context=".LockScreenActivity" &gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="wrap_content"</div><div class="line">        android:layout_marginTop="100dp"</div><div class="line">        android:orientation="vertical"</div><div class="line">        android:gravity="center_horizontal"</div><div class="line">        android:background="@drawable/shape_locktime_bg"</div><div class="line">        android:padding="20dp" &gt;</div><div class="line"></div><div class="line">        &lt;TextView</div><div class="line">            android:id="@+id/time_hour"</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:text="11:30"</div><div class="line">            android:textColor="@android:color/white"</div><div class="line">            android:textSize="50sp" /&gt;</div><div class="line"></div><div class="line">        &lt;LinearLayout</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:orientation="horizontal" &gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id="@+id/time_day"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:text="07月07日"</div><div class="line">                android:textColor="@android:color/white"</div><div class="line">                android:textSize="30sp" /&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:id="@+id/time_week"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:text="星期日"</div><div class="line">                android:textColor="@android:color/white"</div><div class="line">                android:textSize="30sp" /&gt;</div><div class="line">        &lt;/LinearLayout&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;com.klo.zz.bizhi.lock.SliderRelativeLayout</div><div class="line">        android:id="@+id/sliderLayout"</div><div class="line">        android:layout_width="fill_parent"</div><div class="line">        android:layout_height="50dp"</div><div class="line">        android:layout_alignParentBottom="true"</div><div class="line">        android:layout_marginBottom="100dp"</div><div class="line">        android:background="@drawable/shape_locktime_bg"</div><div class="line">         &gt;</div><div class="line"></div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:id="@+id/relativeLayout1"</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_alignParentLeft="true"</div><div class="line">            android:layout_centerHorizontal="true"</div><div class="line">            android:layout_centerVertical="true" &gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/leftRing"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:src="@mipmap/arrow_right" /&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_centerHorizontal="true"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:textColor="#FF0000" /&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width="wrap_content"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_alignParentRight="true"</div><div class="line">            android:layout_centerHorizontal="true"</div><div class="line">            android:layout_centerVertical="true" &gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/rightRing"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:src="@mipmap/arrow_right" /&gt;</div><div class="line"></div><div class="line">            &lt;TextView</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="wrap_content"</div><div class="line">                android:layout_centerHorizontal="true"</div><div class="line">                android:layout_centerVertical="true"</div><div class="line">                android:textColor="#FF0000" /&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line"></div><div class="line">        &lt;RelativeLayout</div><div class="line">            android:layout_width="222dp"</div><div class="line">            android:layout_height="wrap_content"</div><div class="line">            android:layout_marginLeft="50dp" &gt;</div><div class="line"></div><div class="line">            &lt;ImageView</div><div class="line">                android:id="@+id/loveView"</div><div class="line">                android:layout_width="wrap_content"</div><div class="line">                android:layout_height="match_parent"</div><div class="line">                android:layout_alignParentLeft="true"</div><div class="line">                android:layout_alignParentTop="true"</div><div class="line">                android:src="@mipmap/open_lock" /&gt;</div><div class="line">        &lt;/RelativeLayout&gt;</div><div class="line">    &lt;/com.klo.zz.bizhi.lock.SliderRelativeLayout&gt;</div><div class="line"></div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure>
<p>滑动解锁屏幕的自定义view</p>
<p>SliderRelativeLayout 这个是从从网上找的，就不列出代码了。</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>   不想写…….</p>
<h3 id="源码敬请期待………"><a href="#源码敬请期待………" class="headerlink" title="源码敬请期待………"></a>源码敬请期待………</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android自定义下拉刷新、上拉加载更多及PullToRefresh框架的用法]]></title>
      <url>http://yoursite.com/2015/07/23/Android%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E3%80%81%E4%B8%8A%E6%8B%89%E5%8A%A0%E8%BD%BD%E6%9B%B4%E5%A4%9A%E5%8F%8APullToRegresh%E6%A1%86%E6%9E%B6%E7%9A%84%E7%94%A8%E6%B3%95/</url>
      <content type="html"><![CDATA[<h3 id="一、首先Android-Studio-如何集成PullToRefresh框架"><a href="#一、首先Android-Studio-如何集成PullToRefresh框架" class="headerlink" title="一、首先Android Studio 如何集成PullToRefresh框架"></a>一、首先Android Studio 如何集成PullToRefresh框架</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">dependencies &#123;</div><div class="line">   </div><div class="line">    compile <span class="string">'com.loopeer.android.thirdparty.pulltorefresh:Android-PullToRefresh:2.1.1'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在项目的build.gradle里面添加上述代码，sysc now 同步即可完成集成。</p>
<p>Eclipse的集成不讲，太简单了。</p>
<h3 id="二、使用"><a href="#二、使用" class="headerlink" title="二、使用"></a>二、使用</h3><p>里面很好的封装了PullToRefreshScrollView、PullToRefreshListView、PullToRefreshGridView.</p>
<p>和listview、gridview、scrollview 的用法一致。</p>
<p>首先在布局文件中</p>
<figure class="highlight"><figcaption><span><com.handmark.pulltorefresh.library.pulltorefreshscrollview< span=""></com.handmark.pulltorefresh.library.pulltorefreshscrollview<></span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">        android:id="@+id/select_scroll"</div><div class="line">        android:layout_width="match_parent"</div><div class="line">        android:layout_height="match_parent"&gt;</div><div class="line">&lt;/com.handmark.pulltorefresh.library.PullToRefreshScrollView&gt;</div></pre></td></tr></table></figure>
<p>在代码中 这一个接口 支持下拉刷新和上拉加载更多   <b>OnRefreshListener2</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">selectScroll= (PullToRefreshScrollView) view.findViewById(R.id.select_scroll);</div><div class="line">selectScroll.setMode(PullToRefreshBase.Mode.BOTH);      <span class="comment">//支持下拉刷新和上拉加载更多，否则只支持下拉刷新</span></div><div class="line">      selectScroll.setOnRefreshListener(<span class="keyword">new</span> PullToRefreshBase.OnRefreshListener2&lt;ScrollView&gt;() &#123;</div><div class="line">          <span class="keyword">int</span> loadCount = <span class="number">2</span>;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPullDownToRefresh</span><span class="params">(PullToRefreshBase&lt;ScrollView&gt; pullToRefreshBase)</span> </span>&#123;</div><div class="line">              String label = DateUtils.formatDateTime(</div><div class="line">                      getActivity(),</div><div class="line">                      System.currentTimeMillis(),</div><div class="line">                      DateUtils.FORMAT_SHOW_TIME</div><div class="line">                              | DateUtils.FORMAT_SHOW_DATE</div><div class="line">                              | DateUtils.FORMAT_ABBREV_ALL);</div><div class="line">              <span class="comment">// 显示最后更新的时间</span></div><div class="line">              pullToRefreshBase.getLoadingLayoutProxy()</div><div class="line">                      .setLastUpdatedLabel(label);</div><div class="line">              selectList.clear();</div><div class="line">              initSelectData(<span class="number">1</span>);</div><div class="line">          &#125;</div><div class="line"></div><div class="line">          <span class="meta">@Override</span></div><div class="line">          <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPullUpToRefresh</span><span class="params">(PullToRefreshBase&lt;ScrollView&gt; pullToRefreshBase)</span> </span>&#123;</div><div class="line">              initSelectData(loadCount);</div><div class="line">              loadCount++;</div><div class="line">          &#125;</div><div class="line">      &#125;);</div></pre></td></tr></table></figure>
<p>别忘了 在加载完数据添加一句：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">selectScroll.onRefreshComplete();    <span class="comment">//表示刷新或加载完毕</span></div></pre></td></tr></table></figure>
<p>还有一个接口只支持下拉刷新     <b>OnRefreshListener</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">selectScroll.setOnRefreshListener(<span class="keyword">new</span> PullToRefreshBase.OnRefreshListener&lt;ScrollView&gt;() &#123;</div><div class="line"></div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onPullDownToRefresh</span><span class="params">(PullToRefreshBase&lt;ScrollView&gt; pullToRefreshBase)</span> </span>&#123;</div><div class="line">                String label = DateUtils.formatDateTime(</div><div class="line">                        getActivity(),</div><div class="line">                        System.currentTimeMillis(),</div><div class="line">                        DateUtils.FORMAT_SHOW_TIME</div><div class="line">                                | DateUtils.FORMAT_SHOW_DATE</div><div class="line">                                | DateUtils.FORMAT_ABBREV_ALL);</div><div class="line">                <span class="comment">// 显示最后更新的时间</span></div><div class="line">                pullToRefreshBase.getLoadingLayoutProxy()</div><div class="line">                        .setLastUpdatedLabel(label);</div><div class="line">                </div><div class="line">            &#125;</div><div class="line"></div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<h3 id="出现的问题："><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h3><h5 id="1-使用开源框架pullToRefresh的时候-适用pullToRefreshScrollView中嵌套listview的时候，不管listview上面有什么，会出现listview在顶部的问题"><a href="#1-使用开源框架pullToRefresh的时候-适用pullToRefreshScrollView中嵌套listview的时候，不管listview上面有什么，会出现listview在顶部的问题" class="headerlink" title="1.使用开源框架pullToRefresh的时候 适用pullToRefreshScrollView中嵌套listview的时候，不管listview上面有什么，会出现listview在顶部的问题"></a>1.使用开源框架pullToRefresh的时候 适用pullToRefreshScrollView中嵌套listview的时候，不管listview上面有什么，会出现listview在顶部的问题</h5><p>场景：</p>
<p>遇见这样的场景，listview顶部有一个viewpager，还要下拉刷新和上拉加载更多，网上的listviewForScrollView 会一直测量，造成卡顿的现象，不建议使用scrollview 嵌套viewpager和listviewForScrollView。</p>
<p><b>解决办法：</b></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pulltorefreshlistview.getRefreshableView().addHeaderView(customviewpager);</div></pre></td></tr></table></figure>
<p></p>
<p>让listview上面的组件获得焦点,有时需注意使用顺序</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">lunboPager.setFocusable(<span class="keyword">true</span>);</div><div class="line">lunboPager.setFocusableInTouchMode(<span class="keyword">true</span>);</div><div class="line">lunboPager.requestFocus();</div></pre></td></tr></table></figure>
<h5 id="2-在使用PullToRefreshScrollView的时候，里面使用ListviewForScrollView、GridViewForScrollView-没上拉加载更多、下拉刷新的时候会一直的刷新数据，因为ListviewForScrollView、GridViewForScrollView里面重写了onMeasure-方法-会不断的测量位置，这样很不舒服。"><a href="#2-在使用PullToRefreshScrollView的时候，里面使用ListviewForScrollView、GridViewForScrollView-没上拉加载更多、下拉刷新的时候会一直的刷新数据，因为ListviewForScrollView、GridViewForScrollView里面重写了onMeasure-方法-会不断的测量位置，这样很不舒服。" class="headerlink" title="2.在使用PullToRefreshScrollView的时候，里面使用ListviewForScrollView、GridViewForScrollView,没上拉加载更多、下拉刷新的时候会一直的刷新数据，因为ListviewForScrollView、GridViewForScrollView里面重写了onMeasure()方法,会不断的测量位置，这样很不舒服。"></a>2.在使用PullToRefreshScrollView的时候，里面使用ListviewForScrollView、GridViewForScrollView,没上拉加载更多、下拉刷新的时候会一直的刷新数据，因为ListviewForScrollView、GridViewForScrollView里面重写了onMeasure()方法,会不断的测量位置，这样很不舒服。</h5><p>解决办法：</p>
<p>外界调用只需一句话：将这个自定义添加到布局文件中，调用就是 flowingGroupLayout.addPicture(集合);</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowingGroupLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowingGroupLayout</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">        init();</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">private</span> LinearLayout oneLayout;</div><div class="line">    <span class="keyword">private</span> LinearLayout twoLayout;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        View.inflate(getContext(), R.layout.flowing_pic, <span class="keyword">this</span>);</div><div class="line">        oneLayout = (LinearLayout) findViewById(R.id.ll_one);</div><div class="line">        twoLayout = (LinearLayout) findViewById(R.id.ll_two);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowingGroupLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowingGroupLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</div><div class="line"><span class="comment">//        this.removeAllViews();</span></div><div class="line">        oneLayout.removeAllViews();</div><div class="line">        twoLayout.removeAllViews();</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPicture</span><span class="params">(<span class="keyword">final</span> List&lt;GroupPicture&gt; beans)</span> </span>&#123;</div><div class="line">        LLogUtils.v(beans.size() + <span class="string">""</span>);</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; beans.size(); i++) &#123;</div><div class="line">            GroupPicture picture = beans.get(i);</div><div class="line">            <span class="keyword">final</span> View view = LViewHelper.getView(R.layout.picture_item, getContext());</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI1 = i;</div><div class="line">            LApplication.getBitmapUtils().display(view.findViewById(R.id.picture), picture.getPictureUrl(), <span class="keyword">new</span> BitmapLoadCallBack&lt;View&gt;() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadCompleted</span><span class="params">(View container, String s, Bitmap bitmap, BitmapDisplayConfig bitmapDisplayConfig, BitmapLoadFrom bitmapLoadFrom)</span> </span>&#123;        </div><div class="line">                       <span class="comment">//这里面是对图片的缩放、拉伸然后设置到布局上，不用管</span></div><div class="line">                    <span class="keyword">int</span> bitmapWidth=bitmap.getWidth();</div><div class="line">                    <span class="keyword">int</span> bitmapHeight=bitmap.getHeight();</div><div class="line">                    <span class="keyword">int</span> screenWidth=ScreenUtil.getWidth()/<span class="number">2</span>;</div><div class="line">                    <span class="keyword">if</span>(bitmapHeight&lt;screenWidth || bitmapWidth &lt; screenWidth)&#123;</div><div class="line">                        <span class="keyword">float</span> scale;</div><div class="line">                        <span class="keyword">float</span> scaleHeight=(<span class="keyword">float</span>)screenWidth/bitmapHeight;</div><div class="line">                        <span class="keyword">float</span> scaleWidth=(<span class="keyword">float</span>)screenWidth/bitmapWidth;</div><div class="line">                        <span class="keyword">if</span>(scaleHeight &gt; scaleWidth)&#123;</div><div class="line">                            scale=scaleHeight;</div><div class="line">                        &#125;<span class="keyword">else</span>&#123;</div><div class="line">                            scale=scaleWidth;</div><div class="line">                        &#125;</div><div class="line">                        <span class="keyword">int</span> newBitWidth=(<span class="keyword">int</span>)(bitmapWidth*scale);</div><div class="line">                        <span class="keyword">int</span> newBitmapHeight=(<span class="keyword">int</span>)(bitmapHeight*scale);</div><div class="line">                        Bitmap newBitmap = Bitmap.createScaledBitmap(bitmap, newBitWidth, newBitmapHeight, <span class="keyword">true</span>);</div><div class="line">                        LLImageUtils.setBitmap((ImageView)container,screenWidth,screenWidth,newBitmap);</div><div class="line">                    &#125;<span class="keyword">else</span>&#123;</div><div class="line">                        Bitmap showBitmap = ScaleBitmap.centerSquareScaleBitmap(bitmap, ScreenUtil.getWidth() / <span class="number">2</span>);</div><div class="line">                        LLImageUtils.setBitmap((ImageView)container,<span class="number">0</span>,showBitmap.getHeight(),showBitmap);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    LayoutParams lp = <span class="keyword">new</span> LayoutParams(ScreenUtil.getWidth()/<span class="number">2</span>,ScreenUtil.getWidth()/<span class="number">2</span>);</div><div class="line">                    lp.bottomMargin=ScreenUtil.dp2px(<span class="number">1</span>);</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (finalI1 % <span class="number">2</span> == <span class="number">0</span>) &#123;</div><div class="line">                        <span class="comment">//偶数</span></div><div class="line">                        oneLayout.addView(view, lp);</div><div class="line">                    &#125; <span class="keyword">else</span> &#123;</div><div class="line">                        <span class="comment">//单数</span></div><div class="line">                        twoLayout.addView(view, lp);</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onLoadFailed</span><span class="params">(View view, String s, Drawable drawable)</span> </span>&#123;</div><div class="line"></div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;);</div><div class="line">            <span class="keyword">final</span> <span class="keyword">int</span> finalI = i;</div><div class="line">            view.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</div><div class="line">                    Intent intent = <span class="keyword">new</span> Intent(getContext(), ImageShowActivity.class);</div><div class="line">                    String groupId = beans.get(finalI).getGroupId();</div><div class="line">                    intent.putExtra(<span class="string">"groupId"</span>, groupId);</div><div class="line">                    getContext().startActivity(intent);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><p>   Android自定义控件——ListView的下拉刷新与上拉加载</p>
<pre><code>http://www.tuicool.com/articles/3uAVRva
</code></pre>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决listview中每一项都有不同的布局]]></title>
      <url>http://yoursite.com/2015/07/23/%E8%A7%A3%E5%86%B3listview%E4%B8%AD%E6%AF%8F%E4%B8%80%E9%A1%B9%E9%83%BD%E6%9C%89%E4%B8%8D%E5%90%8C%E7%9A%84%E5%B8%83%E5%B1%80/</url>
      <content type="html"><![CDATA[<h3 id="方法一：（转载）"><a href="#方法一：（转载）" class="headerlink" title="方法一：（转载）"></a>方法一：（转载）</h3><p>实现代码</p>
<p>Adapter的代码</p>
<p>其中:ViewHolder分别是三个不同的布局,也就是ListView中每一项的布局</p>
<p>TYPE_1…是三种类型.</p>
<p>在使用不同布局的时候,getItemViewType和getViewType不能少,一般是不用这两个函数的重载的</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RunRankAdapter</span> <span class="keyword">extends</span> <span class="title">BaseAdapter</span> </span>&#123;  </div><div class="line">    ArrayList&lt;HashMap&lt;String, Object&gt;&gt; ls;  </div><div class="line">    Context mContext;  </div><div class="line">    LinearLayout linearLayout = <span class="keyword">null</span>;  </div><div class="line">    LayoutInflater inflater;  </div><div class="line">    TextView tex;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> VIEW_TYPE = <span class="number">3</span>;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> TYPE_1 = <span class="number">0</span>;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> TYPE_2 = <span class="number">1</span>;  </div><div class="line">    <span class="keyword">final</span> <span class="keyword">int</span> TYPE_3 = <span class="number">2</span>;  </div><div class="line">  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RunRankAdapter</span><span class="params">(Context context,  </span></span></div><div class="line">            ArrayList&lt;HashMap&lt;String, Object&gt;&gt; list) &#123;  </div><div class="line">        ls = list;  </div><div class="line">        mContext = context;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getCount</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> ls.size();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getItem</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> ls.get(position);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getItemId</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="comment">// 每个convert view都会调用此方法，获得当前所需要的view样式  </span></div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemViewType</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;  </div><div class="line">        <span class="keyword">int</span> p = position;  </div><div class="line">        <span class="keyword">if</span> (p == <span class="number">0</span>)  </div><div class="line">            <span class="keyword">return</span> TYPE_1;  </div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == <span class="number">1</span>)  </div><div class="line">            <span class="keyword">return</span> TYPE_2;  </div><div class="line">        <span class="keyword">else</span>  </div><div class="line">            <span class="keyword">return</span> TYPE_3;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getViewTypeCount</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="number">3</span>;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@Override</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span> </span>&#123;  </div><div class="line">        ViewHolder1 holder1 = <span class="keyword">null</span>;  </div><div class="line">        ViewHolder2 holder2 = <span class="keyword">null</span>;  </div><div class="line">        ViewHolder3 holder3 = <span class="keyword">null</span>;  </div><div class="line">        <span class="keyword">int</span> type = getItemViewType(position);  </div><div class="line">        <span class="keyword">if</span> (convertView == <span class="keyword">null</span>) &#123;  </div><div class="line">            inflater = LayoutInflater.from(mContext);  </div><div class="line">            <span class="comment">// 按当前所需的样式，确定new的布局  </span></div><div class="line">            <span class="keyword">switch</span> (type) &#123;  </div><div class="line">            <span class="keyword">case</span> TYPE_1:  </div><div class="line">  </div><div class="line">                convertView = inflater.inflate(R.layout.item_runrank1,  </div><div class="line">                        parent, <span class="keyword">false</span>);  </div><div class="line">                holder1 = <span class="keyword">new</span> ViewHolder1();  </div><div class="line">                holder1.rank1 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list1_rank);  </div><div class="line">                holder1.time1 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list1_time);  </div><div class="line">                convertView.setTag(holder1);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> TYPE_2:  </div><div class="line">                convertView = inflater.inflate(R.layout.item_runrank2,  </div><div class="line">                        parent, <span class="keyword">false</span>);  </div><div class="line">                holder2 = <span class="keyword">new</span> ViewHolder2();  </div><div class="line">                holder2.rank2 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list2_rank);  </div><div class="line">                holder2.time2 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list2_time);  </div><div class="line">                convertView.setTag(holder2);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> TYPE_3:  </div><div class="line">                convertView = inflater.inflate(R.layout.item_runrank3,  </div><div class="line">                        parent, <span class="keyword">false</span>);  </div><div class="line">                holder3 = <span class="keyword">new</span> ViewHolder3();  </div><div class="line">                holder3.rank3 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list3_rank);  </div><div class="line">                holder3.time3 = (TextView) convertView  </div><div class="line">                        .findViewById(R.id.tv_list3_time);  </div><div class="line">                convertView.setTag(holder3);  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">default</span>:  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;  </div><div class="line">  </div><div class="line">        &#125; <span class="keyword">else</span> &#123;  </div><div class="line">            <span class="keyword">switch</span> (type) &#123;  </div><div class="line">            <span class="keyword">case</span> TYPE_1:  </div><div class="line">                holder1 = (ViewHolder1) convertView.getTag();  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> TYPE_2:  </div><div class="line">                holder2 = (ViewHolder2) convertView.getTag();  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            <span class="keyword">case</span> TYPE_3:  </div><div class="line">                holder3 = (ViewHolder3) convertView.getTag();  </div><div class="line">                <span class="keyword">break</span>;  </div><div class="line">            &#125;  </div><div class="line">        &#125;  </div><div class="line">        <span class="comment">// 设置资源  </span></div><div class="line">        <span class="keyword">switch</span> (type) &#123;  </div><div class="line">        <span class="keyword">case</span> TYPE_1:  </div><div class="line">            holder1.rank1.setText(<span class="string">""</span> + (position + <span class="number">1</span>));  </div><div class="line">            holder1.time1.setText(ls.get(position).get(<span class="string">"time"</span>).toString());  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> TYPE_2:  </div><div class="line">            holder2.rank2.setText(<span class="string">""</span> + (position + <span class="number">1</span>));  </div><div class="line">            holder2.time2.setText(ls.get(position).get(<span class="string">"time"</span>).toString());  </div><div class="line">            holder2.totaldistance2.setText(ls.get(position)  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        <span class="keyword">case</span> TYPE_3:  </div><div class="line">            holder3.rank3.setText(<span class="string">""</span> + (position + <span class="number">1</span>));  </div><div class="line">            holder3.time3.setText(ls.get(position).get(<span class="string">"time"</span>).toString());  </div><div class="line">            <span class="keyword">break</span>;  </div><div class="line">        &#125;  </div><div class="line">  </div><div class="line">        <span class="keyword">return</span> convertView;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder1</span> </span>&#123;  </div><div class="line">        TextView rank1;  </div><div class="line">        TextView time1;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder2</span> </span>&#123;  </div><div class="line">        TextView rank2;  </div><div class="line">        TextView time2;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder3</span> </span>&#123;  </div><div class="line">        TextView rank3;  </div><div class="line">        TextView time3;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用方式:</p>
<p>声明并定义自己的Adapter,在ListView中设置他的Adapter</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">private</span> RunRankAdapter runRankAdapter;    </div><div class="line">ArrayList&lt;HashMap&lt;String, Object&gt;&gt; runRank;    </div><div class="line">ListView lv_runRank;  </div><div class="line">runRank = <span class="keyword">new</span> ArrayList&lt;HashMap&lt;String, Object&gt;&gt;();    </div><div class="line">runRankAdapter = <span class="keyword">new</span> RunRankAdapter(<span class="keyword">this</span>, runRank);    </div><div class="line">lv_runRank = (ListView) findViewById(R.id.lv_runRank);    </div><div class="line">lv_runRank.setAdapter(runRankAdapter);</div></pre></td></tr></table></figure>
<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>在主布局文件中包含一个LinearLayout. 并且设置android:orientation=”vertical”</p>
<p>定义两种不同的布局文件，然后代码中,根据不同条件调用.addview向LinearLayout加载就可以了</p>
<h3 id="自己的理解：-（拿两个不同的item举例）"><a href="#自己的理解：-（拿两个不同的item举例）" class="headerlink" title="自己的理解：  （拿两个不同的item举例）"></a>自己的理解：  （拿两个不同的item举例）</h3><p>这两种方法不同的item少了还行，多了就行不通了</p>
<h4 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h4><p>创建两个不同布局的item，然后在adapter中根据position位置的不同判断添加不同的item布局</p>
<h4 id="方法二：-1"><a href="#方法二：-1" class="headerlink" title="方法二："></a>方法二：</h4><p>创建一个布局文件，用LinearLayout设置android:orientation=”vertical”<br>定义两种不同的布局，在代码中根据position及条件设置Visiablity属性为visiable及gone即可。</p>
<h3 id="复杂的多个item不同的情况，后续实现添加-敬请期待……"><a href="#复杂的多个item不同的情况，后续实现添加-敬请期待……" class="headerlink" title="复杂的多个item不同的情况，后续实现添加,敬请期待…….."></a>复杂的多个item不同的情况，后续实现添加,敬请期待……..</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[解决scrollview中嵌套listview、gridview的问题]]></title>
      <url>http://yoursite.com/2015/07/23/%E8%A7%A3%E5%86%B3scrollview%E4%B8%AD%E5%B5%8C%E5%A5%97listview%E3%80%81gridview%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      <content type="html"><![CDATA[<h3 id="出现的问题："><a href="#出现的问题：" class="headerlink" title="出现的问题："></a>出现的问题：</h3><p>   1.在SrollView中嵌套ListView，ListView的显示会有问题，只显示一行或显示效果与预期不同，这是因为android禁止这样使用，放入ScrollView中的ListView的高度是无法计算的。</p>
<p>   2.嵌套中的子ListView和GridvIew是无法滑动的，因为子控件的滑动事件会被外面的ScrollView吃掉，如果想让子控件可以滑动，只能强行的截取滑动的相关事件了。</p>
<h3 id="原因：原因就是scroll事件的消费处理以及ListView控件的高度设定问题。"><a href="#原因：原因就是scroll事件的消费处理以及ListView控件的高度设定问题。" class="headerlink" title="原因：原因就是scroll事件的消费处理以及ListView控件的高度设定问题。"></a>原因：原因就是scroll事件的消费处理以及ListView控件的高度设定问题。</h3><h3 id="解决的办法："><a href="#解决的办法：" class="headerlink" title="解决的办法："></a>解决的办法：</h3><h4 id="一、手动设置listview高度"><a href="#一、手动设置listview高度" class="headerlink" title="一、手动设置listview高度"></a>一、手动设置listview高度</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 动态设置ListView的高度</div><div class="line">* <span class="doctag">@param</span> listView</div><div class="line">*/</div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setListViewHeightBasedOnChildren</span><span class="params">(ListView listView)</span> </span>&#123;</div><div class="line">   <span class="keyword">if</span>(listView == <span class="keyword">null</span>) <span class="keyword">return</span>;</div><div class="line">   ListAdapter listAdapter = listView.getAdapter();</div><div class="line">   <span class="keyword">if</span> (listAdapter == <span class="keyword">null</span>) &#123;</div><div class="line">       <span class="comment">// pre-condition</span></div><div class="line">       <span class="keyword">return</span>;</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">int</span> totalHeight = <span class="number">0</span>;</div><div class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; listAdapter.getCount(); i++) &#123;</div><div class="line">       View listItem = listAdapter.getView(i, <span class="keyword">null</span>, listView);</div><div class="line">       listItem.measure(<span class="number">0</span>, <span class="number">0</span>);</div><div class="line">       totalHeight += listItem.getMeasuredHeight();</div><div class="line">   &#125;</div><div class="line">   ViewGroup.LayoutParams params = listView.getLayoutParams();</div><div class="line">   params.height = totalHeight + (listView.getDividerHeight() * (listAdapter.getCount() - <span class="number">1</span>));</div><div class="line">   listView.setLayoutParams(params);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>  上面这个方法就是设定ListView的高度了，<b>在为ListView设置了Adapter之后使用</b>，就可以解决问题了。</p>
<p>  但是这个方法有个两个细节需要注意：</p>
<p>   <b>一是Adapter中getView方法返回的View的必须由LinearLayout组成</b>，因为只有LinearLayout才有measure()方法，如果使用其他的布局如RelativeLayout，在调用listItem.measure(0, 0);时就会抛异常，因为除LinearLayout外的其他布局的这个方法就是直接抛异常的，没理由…。我最初使用的就是这个方法，但是因为子控件的顶层布局是RelativeLayout，所以一直报错，不得不放弃这个方法。</p>
<p>   <b>二是需要手动把ScrollView滚动至最顶端</b>，因为使用这个方法的话，默认在ScrollView顶端的项是ListView，具体原因不了解，求大神解答…可以在Activity中设置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sv = (ScrollView) findViewById(R.id.act_solution_1_sv);</div><div class="line">sv.ScrollTo(0,0);</div></pre></td></tr></table></figure>
<h4 id="二、使用LinearLayout取代ListView"><a href="#二、使用LinearLayout取代ListView" class="headerlink" title="二、使用LinearLayout取代ListView"></a>二、使用LinearLayout取代ListView</h4><p>既然ListView不能适应ScrollView，那就换一个可以适应ScrollView的控件，干嘛非要吊死在ListView这一棵树上呢？</p>
<p>而LinearLayout是最好的选择。但如果我仍想继续使用已经定义好的Adater呢？我们只需要自定义一个类继承自LinearLayout，为其加上对BaseAdapter的适配。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">* 取代ListView的LinearLayout，使之能够成功嵌套在ScrollView中</div><div class="line">* <span class="doctag">@author</span> </div><div class="line">*/</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinearLayoutForListView</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</div><div class="line">   <span class="keyword">private</span> BaseAdapter adapter;</div><div class="line">   <span class="keyword">private</span> OnClickListener onClickListener = <span class="keyword">null</span>;</div><div class="line">   <span class="comment">/**</span></div><div class="line">    * 绑定布局</div><div class="line">    */</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bindLinearLayout</span><span class="params">()</span> </span>&#123;</div><div class="line">       <span class="keyword">int</span> count = adapter.getCount();</div><div class="line">       <span class="keyword">this</span>.removeAllViews();</div><div class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</div><div class="line">           View v = adapter.getView(i, <span class="keyword">null</span>, <span class="keyword">null</span>);</div><div class="line">           v.setOnClickListener(<span class="keyword">this</span>.onClickListener);</div><div class="line">           addView(v, i);</div><div class="line">       &#125;</div><div class="line">      Log.v(<span class="string">"countTAG"</span>, <span class="string">""</span> + count);</div><div class="line">   &#125;</div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LinearLayoutForListView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">       <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>它的使用和listview一样，写在布局文件里 然后setAdapter就ok了</p>
<h4 id="三、自定义适应ScrollView的listview"><a href="#三、自定义适应ScrollView的listview" class="headerlink" title="三、自定义适应ScrollView的listview"></a>三、自定义适应ScrollView的listview</h4><p>自定义一个类继承自ListView，通过重写其onMeasure方法，达到对ScrollView适配的效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> android.content.Context;</div><div class="line"><span class="keyword">import</span> android.util.AttributeSet;</div><div class="line"><span class="keyword">import</span> android.widget.ListView;</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ListViewForScrollView</span> <span class="keyword">extends</span> <span class="title">ListView</span> </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewForScrollView</span><span class="params">(Context context)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewForScrollView</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs);</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListViewForScrollView</span><span class="params">(Context context, AttributeSet attrs,</span></span></div><div class="line">        <span class="keyword">int</span> defStyle) &#123;</div><div class="line">        <span class="keyword">super</span>(context, attrs, defStyle);</div><div class="line">    &#125;</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 重写该方法，达到使ListView适应ScrollView的效果</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</div><div class="line">        <span class="keyword">int</span> expandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; <span class="number">2</span>,</div><div class="line">        MeasureSpec.AT_MOST);</div><div class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, expandSpec);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>三个构造方法完全不用动，只要重写onMeasure方法，需要改动的地方比起方法2少了不是一点半点…</p>
<p>在xml布局中和Activty中使用的ListView改成这个自定义ListView就行了。代码就省了吧…</p>
<p>这个方法和方法1有一个同样的毛病，就是默认显示的首项是ListView，需要手动把ScrollView滚动至最顶端。</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">	sv = (ScrollView) findViewById(R.id.act_solution_4_sv);</div><div class="line">	sv.smoothScrollTo(0, 0);</div><div class="line">```	</div><div class="line">&lt;b&gt;GridView也一样，只需重写onMeasure()方法即可&lt;/b&gt;</div><div class="line"></div><div class="line">```java</div><div class="line">	public class NoScrollGridView extends GridView&#123;  </div><div class="line">	  </div><div class="line">	     public NoScrollGridView(Context context, AttributeSet attrs)&#123;  </div><div class="line">	          super(context, attrs);  </div><div class="line">	     &#125;  </div><div class="line">	  </div><div class="line">	     public void onMeasure(int widthMeasureSpec, int heightMeasureSpec)&#123;  </div><div class="line">	          int mExpandSpec = MeasureSpec.makeMeasureSpec(Integer.MAX_VALUE &gt;&gt; 2, MeasureSpec.AT_MOST);  </div><div class="line">	          super.onMeasure(widthMeasureSpec, mExpandSpec);  </div><div class="line">	     &#125;  </div><div class="line">	&#125;</div></pre></td></tr></table></figure>
<h4 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h4><p>使用PullToRefresh下拉刷新和上拉加载更多时，sv.ScrollTo(0,0) 是起不到作用的。</p>
<p>解决办法一：  亲测没用</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pullScrollView.getRefreshableView().ScrollTo(<span class="number">0</span>,<span class="number">0</span>);</div></pre></td></tr></table></figure>
<p>解决办法二： 在PullToRefreshAdapterViewBase源码中添加这两个方法即可 （本人觉得麻烦，不建议）</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">	 public final void setSelection(int scrollTop)&#123;</div><div class="line">	       mRefreshableView.setSelection(scrollTop);</div><div class="line">	   &#125;</div><div class="line">	    public final int getFirstVisiablePosition()&#123;</div><div class="line">	        return mRefreshableView.getFirstVisiablePosition();</div><div class="line">	    &#125;</div><div class="line">```	    </div><div class="line">解决办法三：&lt;b&gt;让listview顶部的组件获得焦点（非常好用),有时需注意使用顺序&lt;/b&gt;</div><div class="line">	</div><div class="line">```java		 </div><div class="line">		tsstPager.setFocusable(true);</div><div class="line">		testPager.setFocusableInTouchMode(true);</div><div class="line">		testPager.requestFocus();</div></pre></td></tr></table></figure>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><h4 id="上述几个方法无非就是对listview（gridview）进行重新测量，但在pullToRefresh加载更多和下拉刷新时，会出现不停的测量，不停的刷新数据，手机屏幕乱跳等现象。解决办法：暂无。有能力再解决。"><a href="#上述几个方法无非就是对listview（gridview）进行重新测量，但在pullToRefresh加载更多和下拉刷新时，会出现不停的测量，不停的刷新数据，手机屏幕乱跳等现象。解决办法：暂无。有能力再解决。" class="headerlink" title="上述几个方法无非就是对listview（gridview）进行重新测量，但在pullToRefresh加载更多和下拉刷新时，会出现不停的测量，不停的刷新数据，手机屏幕乱跳等现象。解决办法：暂无。有能力再解决。"></a>上述几个方法无非就是对listview（gridview）进行重新测量，但在pullToRefresh加载更多和下拉刷新时，会出现不停的测量，不停的刷新数据，手机屏幕乱跳等现象。解决办法：暂无。有能力再解决。</h4>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[关于EditText的一些特别使用]]></title>
      <url>http://yoursite.com/2015/07/23/%E5%85%B3%E4%BA%8EEditText%E7%9A%84%E4%B8%80%E4%BA%9B%E7%89%B9%E5%88%AB%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<p> 首先，会有这样的需求，进入这个Activity,会默认让当前EditText不获取焦点，点击这个组件之后才获取焦点，弹出输入法，（或者做一些操作）。</p>
<p>解决办法：<br>   在布局文件中，在这个EditText组件的父view中添加</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">         android:focusable=<span class="string">"true"</span></div><div class="line">         android:focusableInTouchMode=<span class="string">"true"</span></div><div class="line">```       </div><div class="line">   即可解决让当前EditText默认不获取焦点。</div><div class="line"></div><div class="line"></div><div class="line">对EditText进行监听，失去和获取焦点的事件</div><div class="line">    </div><div class="line">```java</div><div class="line">     input.setOnFocusChangeListener(<span class="keyword">new</span>    View.OnFocusChangeListener() &#123;</div><div class="line">            <span class="meta">@Override</span></div><div class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFocusChange</span><span class="params">(View v, <span class="keyword">boolean</span> hasFocus)</span> </span>&#123;</div><div class="line">                <span class="keyword">if</span>(hasFocus)&#123;</div><div class="line">                   <span class="comment">//逻辑操作</span></div><div class="line">                   input.clearFocus();  <span class="comment">//失去焦点 不然输入法会一直存在</span></div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                  <span class="comment">//逻辑操作</span></div><div class="line">              &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div></pre></td></tr></table></figure>
<p>增加一个需求，就是让点击搜索之后EditText中显示刚才输入的值,其实很简单，只需要一句话</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">input.setText(inputContent);</div></pre></td></tr></table></figure>
<h3 id="一、进入这个页面的时候默认弹出输入法"><a href="#一、进入这个页面的时候默认弹出输入法" class="headerlink" title="一、进入这个页面的时候默认弹出输入法"></a>一、进入这个页面的时候默认弹出输入法</h3><p>看一个manifest中Activity的配置，如果这个页面有EditText，并且我们想要进入这个页面的时候默认弹出输入法，可以这样设置这个属性：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">     android:windowSoftInputMode=stateVisible</div><div class="line">```     </div><div class="line">这样就会默认弹起输入法，当然还有别的办法。</div><div class="line"></div><div class="line">```java</div><div class="line">     &lt;activity android:name=".ui.LoginActivity" </div><div class="line">                  android:configChanges="orientation|keyboardHidden|locale" </div><div class="line">                  android:screenOrientation="portrait" </div><div class="line">                  android:windowSoftInputMode="stateVisible|adjustPan" &gt; </div><div class="line">      &lt;/activity&gt;</div></pre></td></tr></table></figure>
<h3 id="二、Android-EditText-不弹出输入法总结"><a href="#二、Android-EditText-不弹出输入法总结" class="headerlink" title="二、Android EditText 不弹出输入法总结"></a>二、Android EditText 不弹出输入法总结</h3><p>方法一：</p>
<p>在AndroidMainfest.xml中选择哪个activity，设置windowSoftInputMode属性为adjustUnspecified|stateHidden</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=<span class="string">".Main"</span> </div><div class="line">     android:windowSoftInputMode=<span class="string">"adjustUnspecified|stateHidden"</span> </div><div class="line">     android:configChanges=<span class="string">"orientation|keyboardHidden"</span>&gt; </div><div class="line">&lt; /activity&gt;</div></pre></td></tr></table></figure>
<p>方法二：</p>
<p>让EditText失去焦点，使用EditText的clearFocus方法</p>
<p>例如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">		EditText edit=(EditText)findViewById(R.id.edit); </div><div class="line">		edit.clearFocus();  </div><div class="line">```		</div><div class="line">方法三：</div><div class="line"></div><div class="line">强制隐藏Android输入法窗口</div><div class="line"></div><div class="line">例如：</div><div class="line"></div><div class="line">```java</div><div class="line">		EditText edit=(EditText)findViewById(R.id.edit); </div><div class="line">		InputMethodManager imm = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE); </div><div class="line">		imm.hideSoftInputFromWindow(edit.getWindowToken(),<span class="number">0</span>); </div><div class="line">```		</div><div class="line">方法四：</div><div class="line"></div><div class="line">EditText始终不弹出软件键盘</div><div class="line"></div><div class="line">例：</div></pre></td></tr></table></figure>
<pre><code>EditText edit=(EditText)findViewById(R.id.edit); 
edit.setInputType(InputType.TYPE_NULL);  
</code></pre><p>```</p>
<h3 id="三、总结-后续添加，敬请期待……"><a href="#三、总结-后续添加，敬请期待……" class="headerlink" title="三、总结 后续添加，敬请期待…….."></a>三、总结 后续添加，敬请期待……..</h3>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[my first blog]]></title>
      <url>http://yoursite.com/2015/07/16/my-first-blog/</url>
      <content type="html"><![CDATA[<h3 id="初次见面，请多关照"><a href="#初次见面，请多关照" class="headerlink" title="初次见面，请多关照"></a>初次见面，请多关照</h3><p>  从建这个博客开始，即开始一种新的体验。为了很好的督促自己，让自己不至于迷失的太远。将自己工作中遇到的问题，涉及到的知识点及难点记录下来便于知识的掌握和将来时时的回头查阅，更好的丰富自己。</p>
<h3 id="正解（我自己都不信）"><a href="#正解（我自己都不信）" class="headerlink" title="正解（我自己都不信）"></a>正解（我自己都不信）</h3><p>  瞎扯蛋，以上皆为废话…………</p>
]]></content>
    </entry>
    
  
  
</search>
